/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/index"],{

/***/ "./node_modules/@markdoc/next.js/src/runtime.js":
/*!******************************************************!*\
  !*** ./node_modules/@markdoc/next.js/src/runtime.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("// IDEA: explore better displayName functions\nfunction displayName(name) {\n  // Pascal case\n  return name\n    .match(/[a-z]+/gi)\n    .map((word) => word.charAt(0).toUpperCase() + word.substr(1).toLowerCase())\n    .join('');\n}\n\nfunction transformRecord(config) {\n  const output = {};\n  const components = {};\n\n  if (config) {\n    Object.entries(config).forEach(([name, registration]) => {\n      if (output[name]) {\n        throw new Error(`\"${name}\" has already been declared`);\n      }\n\n      const componentName = registration.render ? displayName(name) : undefined;\n\n      output[name] = {\n        ...registration,\n        render: componentName,\n      };\n\n      if (componentName) {\n        components[componentName] = registration.render;\n      }\n    });\n  }\n\n  return {output, components};\n}\n\nexports.getSchema = function getSchema(schema) {\n  const {output: tags, components: tagComponents} = transformRecord(\n    schema.tags\n  );\n\n  const {output: nodes, components: nodeComponents} = transformRecord(\n    schema.nodes\n  );\n\n  return {\n    ...schema,\n    tags,\n    nodes,\n    components: {\n      ...tagComponents,\n      ...nodeComponents,\n    },\n  };\n};\n\nexports.defaultObject = function defaultObject(o) {\n  if (Object.prototype.hasOwnProperty.call(o, 'default')) return o.default;\n  return o || {};\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hcmtkb2MvbmV4dC5qcy9zcmMvcnVudGltZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsS0FBSztBQUNqQzs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUEsVUFBVTtBQUNWOztBQUVBLGlCQUFpQjtBQUNqQixTQUFTLHlDQUF5QztBQUNsRDtBQUNBOztBQUVBLFNBQVMsMkNBQTJDO0FBQ3BEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AbWFya2RvYy9uZXh0LmpzL3NyYy9ydW50aW1lLmpzPzJkNTkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSURFQTogZXhwbG9yZSBiZXR0ZXIgZGlzcGxheU5hbWUgZnVuY3Rpb25zXG5mdW5jdGlvbiBkaXNwbGF5TmFtZShuYW1lKSB7XG4gIC8vIFBhc2NhbCBjYXNlXG4gIHJldHVybiBuYW1lXG4gICAgLm1hdGNoKC9bYS16XSsvZ2kpXG4gICAgLm1hcCgod29yZCkgPT4gd29yZC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHdvcmQuc3Vic3RyKDEpLnRvTG93ZXJDYXNlKCkpXG4gICAgLmpvaW4oJycpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1SZWNvcmQoY29uZmlnKSB7XG4gIGNvbnN0IG91dHB1dCA9IHt9O1xuICBjb25zdCBjb21wb25lbnRzID0ge307XG5cbiAgaWYgKGNvbmZpZykge1xuICAgIE9iamVjdC5lbnRyaWVzKGNvbmZpZykuZm9yRWFjaCgoW25hbWUsIHJlZ2lzdHJhdGlvbl0pID0+IHtcbiAgICAgIGlmIChvdXRwdXRbbmFtZV0pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBcIiR7bmFtZX1cIiBoYXMgYWxyZWFkeSBiZWVuIGRlY2xhcmVkYCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNvbXBvbmVudE5hbWUgPSByZWdpc3RyYXRpb24ucmVuZGVyID8gZGlzcGxheU5hbWUobmFtZSkgOiB1bmRlZmluZWQ7XG5cbiAgICAgIG91dHB1dFtuYW1lXSA9IHtcbiAgICAgICAgLi4ucmVnaXN0cmF0aW9uLFxuICAgICAgICByZW5kZXI6IGNvbXBvbmVudE5hbWUsXG4gICAgICB9O1xuXG4gICAgICBpZiAoY29tcG9uZW50TmFtZSkge1xuICAgICAgICBjb21wb25lbnRzW2NvbXBvbmVudE5hbWVdID0gcmVnaXN0cmF0aW9uLnJlbmRlcjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7b3V0cHV0LCBjb21wb25lbnRzfTtcbn1cblxuZXhwb3J0cy5nZXRTY2hlbWEgPSBmdW5jdGlvbiBnZXRTY2hlbWEoc2NoZW1hKSB7XG4gIGNvbnN0IHtvdXRwdXQ6IHRhZ3MsIGNvbXBvbmVudHM6IHRhZ0NvbXBvbmVudHN9ID0gdHJhbnNmb3JtUmVjb3JkKFxuICAgIHNjaGVtYS50YWdzXG4gICk7XG5cbiAgY29uc3Qge291dHB1dDogbm9kZXMsIGNvbXBvbmVudHM6IG5vZGVDb21wb25lbnRzfSA9IHRyYW5zZm9ybVJlY29yZChcbiAgICBzY2hlbWEubm9kZXNcbiAgKTtcblxuICByZXR1cm4ge1xuICAgIC4uLnNjaGVtYSxcbiAgICB0YWdzLFxuICAgIG5vZGVzLFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgIC4uLnRhZ0NvbXBvbmVudHMsXG4gICAgICAuLi5ub2RlQ29tcG9uZW50cyxcbiAgICB9LFxuICB9O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0T2JqZWN0ID0gZnVuY3Rpb24gZGVmYXVsdE9iamVjdChvKSB7XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgJ2RlZmF1bHQnKSkgcmV0dXJuIG8uZGVmYXVsdDtcbiAgcmV0dXJuIG8gfHwge307XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@markdoc/next.js/src/runtime.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=%2FUsers%2Filyukinaanna%2FDocuments%2Flove-or-leave%2Fpages%2Findex.md&page=%2F!":
/*!************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=%2FUsers%2Filyukinaanna%2FDocuments%2Flove-or-leave%2Fpages%2Findex.md&page=%2F! ***!
  \************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return __webpack_require__(/*! ./pages/index.md */ \"./pages/index.md\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/YWJzb2x1dGVQYWdlUGF0aD0lMkZVc2VycyUyRmlseXVraW5hYW5uYSUyRkRvY3VtZW50cyUyRmxvdmUtb3ItbGVhdmUlMkZwYWdlcyUyRmluZGV4Lm1kJnBhZ2U9JTJGIS5qcyIsIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLDBDQUFrQjtBQUN6QztBQUNBO0FBQ0EsT0FBTyxJQUFVO0FBQ2pCLE1BQU0sVUFBVTtBQUNoQjtBQUNBLE9BQU87QUFDUDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/Y2QzOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAod2luZG93Ll9fTkVYVF9QID0gd2luZG93Ll9fTkVYVF9QIHx8IFtdKS5wdXNoKFtcbiAgICAgIFwiL1wiLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmVxdWlyZShcIi4vcGFnZXMvaW5kZXgubWRcIik7XG4gICAgICB9XG4gICAgXSk7XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93Ll9fTkVYVF9QLnB1c2goW1wiL1wiXSlcbiAgICAgIH0pO1xuICAgIH1cbiAgIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=%2FUsers%2Filyukinaanna%2FDocuments%2Flove-or-leave%2Fpages%2Findex.md&page=%2F!\n"));

/***/ }),

/***/ "./markdoc/functions.ts":
/*!******************************!*\
  !*** ./markdoc/functions.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"includes\": function() { return /* binding */ includes; },\n/* harmony export */   \"upper\": function() { return /* binding */ upper; }\n/* harmony export */ });\n/* Use this file to export your Markdoc functions */ const includes = {\n    transform (parameters) {\n        const [array, value] = Object.values(parameters);\n        return Array.isArray(array) ? array.includes(value) : false;\n    }\n};\nconst upper = {\n    transform (parameters) {\n        const string = parameters[0];\n        return typeof string === \"string\" ? string.toUpperCase() : string;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9tYXJrZG9jL2Z1bmN0aW9ucy50cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLGtEQUFrRCxHQUUzQyxNQUFNQSxXQUFXO0lBQ3RCQyxXQUFVQyxVQUFVLEVBQUU7UUFDcEIsTUFBTSxDQUFDQyxPQUFPQyxNQUFNLEdBQUdDLE9BQU9DLE1BQU0sQ0FBQ0o7UUFFckMsT0FBT0ssTUFBTUMsT0FBTyxDQUFDTCxTQUFTQSxNQUFNSCxRQUFRLENBQUNJLFNBQVMsS0FBSztJQUM3RDtBQUNGLEVBQUU7QUFFSyxNQUFNSyxRQUFRO0lBQ25CUixXQUFVQyxVQUFVLEVBQUU7UUFDcEIsTUFBTVEsU0FBU1IsVUFBVSxDQUFDLEVBQUU7UUFDNUIsT0FBTyxPQUFPUSxXQUFXLFdBQVdBLE9BQU9DLFdBQVcsS0FBS0QsTUFBTTtJQUNuRTtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbWFya2RvYy9mdW5jdGlvbnMudHM/ZTgyYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBVc2UgdGhpcyBmaWxlIHRvIGV4cG9ydCB5b3VyIE1hcmtkb2MgZnVuY3Rpb25zICovXG5cbmV4cG9ydCBjb25zdCBpbmNsdWRlcyA9IHtcbiAgdHJhbnNmb3JtKHBhcmFtZXRlcnMpIHtcbiAgICBjb25zdCBbYXJyYXksIHZhbHVlXSA9IE9iamVjdC52YWx1ZXMocGFyYW1ldGVycyk7XG5cbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcnJheSkgPyBhcnJheS5pbmNsdWRlcyh2YWx1ZSkgOiBmYWxzZTtcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCB1cHBlciA9IHtcbiAgdHJhbnNmb3JtKHBhcmFtZXRlcnMpIHtcbiAgICBjb25zdCBzdHJpbmcgPSBwYXJhbWV0ZXJzWzBdO1xuICAgIHJldHVybiB0eXBlb2Ygc3RyaW5nID09PSAnc3RyaW5nJyA/IHN0cmluZy50b1VwcGVyQ2FzZSgpIDogc3RyaW5nO1xuICB9LFxufTtcbiJdLCJuYW1lcyI6WyJpbmNsdWRlcyIsInRyYW5zZm9ybSIsInBhcmFtZXRlcnMiLCJhcnJheSIsInZhbHVlIiwiT2JqZWN0IiwidmFsdWVzIiwiQXJyYXkiLCJpc0FycmF5IiwidXBwZXIiLCJzdHJpbmciLCJ0b1VwcGVyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./markdoc/functions.ts\n"));

/***/ }),

/***/ "./markdoc/nodes/fence.markdoc.ts":
/*!****************************************!*\
  !*** ./markdoc/nodes/fence.markdoc.ts ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fence\": function() { return /* binding */ fence; }\n/* harmony export */ });\n/* harmony import */ var _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @markdoc/markdoc */ \"./node_modules/@markdoc/markdoc/dist/index.mjs\");\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../components */ \"./components/index.js\");\n\n\nconst fence = {\n    render: _components__WEBPACK_IMPORTED_MODULE_0__.CodeBlock,\n    attributes: _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_1__.nodes.fence.attributes\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9tYXJrZG9jL25vZGVzL2ZlbmNlLm1hcmtkb2MudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXVDO0FBQ0k7QUFFcEMsTUFBTUUsUUFBUTtJQUNuQkMsUUFBUUYsa0RBQVNBO0lBQ2pCRyxZQUFZSixvRUFBc0I7QUFDcEMsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9tYXJrZG9jL25vZGVzL2ZlbmNlLm1hcmtkb2MudHM/MGI1YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge25vZGVzfSBmcm9tICdAbWFya2RvYy9tYXJrZG9jJztcbmltcG9ydCB7Q29kZUJsb2NrfSBmcm9tICcuLi8uLi9jb21wb25lbnRzJztcblxuZXhwb3J0IGNvbnN0IGZlbmNlID0ge1xuICByZW5kZXI6IENvZGVCbG9jayxcbiAgYXR0cmlidXRlczogbm9kZXMuZmVuY2UuYXR0cmlidXRlcyxcbn07XG4iXSwibmFtZXMiOlsibm9kZXMiLCJDb2RlQmxvY2siLCJmZW5jZSIsInJlbmRlciIsImF0dHJpYnV0ZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./markdoc/nodes/fence.markdoc.ts\n"));

/***/ }),

/***/ "./markdoc/nodes/heading.markdoc.ts":
/*!******************************************!*\
  !*** ./markdoc/nodes/heading.markdoc.ts ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"heading\": function() { return /* binding */ heading; }\n/* harmony export */ });\n/* harmony import */ var _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @markdoc/markdoc */ \"./node_modules/@markdoc/markdoc/dist/index.mjs\");\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../components */ \"./components/index.js\");\n\n\nfunction generateID(children, attributes) {\n    if (attributes.id && typeof attributes.id === \"string\") {\n        return attributes.id;\n    }\n    return children.filter((child)=>typeof child === \"string\").join(\" \").replace(/[?]/g, \"\").replace(/\\s+/g, \"-\").toLowerCase();\n}\nconst heading = {\n    render: _components__WEBPACK_IMPORTED_MODULE_0__.Heading,\n    children: [\n        \"inline\"\n    ],\n    attributes: {\n        id: {\n            type: String\n        },\n        level: {\n            type: Number,\n            required: true,\n            default: 1\n        },\n        className: {\n            type: String\n        }\n    },\n    transform (node, config) {\n        const attributes = node.transformAttributes(config);\n        const children = node.transformChildren(config);\n        const id = generateID(children, attributes);\n        return new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_1__.Tag(this.render, {\n            ...attributes,\n            id\n        }, children);\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9tYXJrZG9jL25vZGVzL2hlYWRpbmcubWFya2RvYy50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUM7QUFFSTtBQUV6QyxTQUFTRSxXQUFXQyxRQUFRLEVBQUVDLFVBQVUsRUFBRTtJQUN4QyxJQUFJQSxXQUFXQyxFQUFFLElBQUksT0FBT0QsV0FBV0MsRUFBRSxLQUFLLFVBQVU7UUFDdEQsT0FBT0QsV0FBV0MsRUFBRTtJQUN0QixDQUFDO0lBQ0QsT0FBT0YsU0FDSkcsTUFBTSxDQUFDLENBQUNDLFFBQVUsT0FBT0EsVUFBVSxVQUNuQ0MsSUFBSSxDQUFDLEtBQ0xDLE9BQU8sQ0FBQyxRQUFRLElBQ2hCQSxPQUFPLENBQUMsUUFBUSxLQUNoQkMsV0FBVztBQUNoQjtBQUVPLE1BQU1DLFVBQVU7SUFDckJDLFFBQVFYLGdEQUFPQTtJQUNmRSxVQUFVO1FBQUM7S0FBUztJQUNwQkMsWUFBWTtRQUNWQyxJQUFJO1lBQUNRLE1BQU1DO1FBQU07UUFDakJDLE9BQU87WUFBQ0YsTUFBTUc7WUFBUUMsVUFBVSxJQUFJO1lBQUVDLFNBQVM7UUFBQztRQUNoREMsV0FBVztZQUFDTixNQUFNQztRQUFNO0lBQzFCO0lBQ0FNLFdBQVVDLElBQUksRUFBRUMsTUFBTSxFQUFFO1FBQ3RCLE1BQU1sQixhQUFhaUIsS0FBS0UsbUJBQW1CLENBQUNEO1FBQzVDLE1BQU1uQixXQUFXa0IsS0FBS0csaUJBQWlCLENBQUNGO1FBQ3hDLE1BQU1qQixLQUFLSCxXQUFXQyxVQUFVQztRQUVoQyxPQUFPLElBQUlKLGlEQUFHQSxDQUFDLElBQUksQ0FBQ1ksTUFBTSxFQUFFO1lBQUMsR0FBR1IsVUFBVTtZQUFFQztRQUFFLEdBQUdGO0lBQ25EO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9tYXJrZG9jL25vZGVzL2hlYWRpbmcubWFya2RvYy50cz9hNTgxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VGFnfSBmcm9tICdAbWFya2RvYy9tYXJrZG9jJztcblxuaW1wb3J0IHtIZWFkaW5nfSBmcm9tICcuLi8uLi9jb21wb25lbnRzJztcblxuZnVuY3Rpb24gZ2VuZXJhdGVJRChjaGlsZHJlbiwgYXR0cmlidXRlcykge1xuICBpZiAoYXR0cmlidXRlcy5pZCAmJiB0eXBlb2YgYXR0cmlidXRlcy5pZCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYXR0cmlidXRlcy5pZDtcbiAgfVxuICByZXR1cm4gY2hpbGRyZW5cbiAgICAuZmlsdGVyKChjaGlsZCkgPT4gdHlwZW9mIGNoaWxkID09PSAnc3RyaW5nJylcbiAgICAuam9pbignICcpXG4gICAgLnJlcGxhY2UoL1s/XS9nLCAnJylcbiAgICAucmVwbGFjZSgvXFxzKy9nLCAnLScpXG4gICAgLnRvTG93ZXJDYXNlKCk7XG59XG5cbmV4cG9ydCBjb25zdCBoZWFkaW5nID0ge1xuICByZW5kZXI6IEhlYWRpbmcsXG4gIGNoaWxkcmVuOiBbJ2lubGluZSddLFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgaWQ6IHt0eXBlOiBTdHJpbmd9LFxuICAgIGxldmVsOiB7dHlwZTogTnVtYmVyLCByZXF1aXJlZDogdHJ1ZSwgZGVmYXVsdDogMX0sXG4gICAgY2xhc3NOYW1lOiB7dHlwZTogU3RyaW5nfSxcbiAgfSxcbiAgdHJhbnNmb3JtKG5vZGUsIGNvbmZpZykge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBub2RlLnRyYW5zZm9ybUF0dHJpYnV0ZXMoY29uZmlnKTtcbiAgICBjb25zdCBjaGlsZHJlbiA9IG5vZGUudHJhbnNmb3JtQ2hpbGRyZW4oY29uZmlnKTtcbiAgICBjb25zdCBpZCA9IGdlbmVyYXRlSUQoY2hpbGRyZW4sIGF0dHJpYnV0ZXMpO1xuXG4gICAgcmV0dXJuIG5ldyBUYWcodGhpcy5yZW5kZXIsIHsuLi5hdHRyaWJ1dGVzLCBpZH0sIGNoaWxkcmVuKTtcbiAgfSxcbn07XG4iXSwibmFtZXMiOlsiVGFnIiwiSGVhZGluZyIsImdlbmVyYXRlSUQiLCJjaGlsZHJlbiIsImF0dHJpYnV0ZXMiLCJpZCIsImZpbHRlciIsImNoaWxkIiwiam9pbiIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsImhlYWRpbmciLCJyZW5kZXIiLCJ0eXBlIiwiU3RyaW5nIiwibGV2ZWwiLCJOdW1iZXIiLCJyZXF1aXJlZCIsImRlZmF1bHQiLCJjbGFzc05hbWUiLCJ0cmFuc2Zvcm0iLCJub2RlIiwiY29uZmlnIiwidHJhbnNmb3JtQXR0cmlidXRlcyIsInRyYW5zZm9ybUNoaWxkcmVuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./markdoc/nodes/heading.markdoc.ts\n"));

/***/ }),

/***/ "./markdoc/nodes/index.ts":
/*!********************************!*\
  !*** ./markdoc/nodes/index.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _fence_markdoc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fence.markdoc */ \"./markdoc/nodes/fence.markdoc.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _fence_markdoc__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _fence_markdoc__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _heading_markdoc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./heading.markdoc */ \"./markdoc/nodes/heading.markdoc.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _heading_markdoc__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _heading_markdoc__WEBPACK_IMPORTED_MODULE_1__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* Use this file to export your markdoc nodes */ \n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9tYXJrZG9jL25vZGVzL2luZGV4LnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLDhDQUE4QyxHQUNkO0FBQ0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbWFya2RvYy9ub2Rlcy9pbmRleC50cz9hZjg1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIFVzZSB0aGlzIGZpbGUgdG8gZXhwb3J0IHlvdXIgbWFya2RvYyBub2RlcyAqL1xuZXhwb3J0ICogZnJvbSAnLi9mZW5jZS5tYXJrZG9jJztcbmV4cG9ydCAqIGZyb20gJy4vaGVhZGluZy5tYXJrZG9jJztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./markdoc/nodes/index.ts\n"));

/***/ }),

/***/ "./markdoc/tags/callout.markdoc.ts":
/*!*****************************************!*\
  !*** ./markdoc/tags/callout.markdoc.ts ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"callout\": function() { return /* binding */ callout; }\n/* harmony export */ });\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../components */ \"./components/index.js\");\n\nconst callout = {\n    render: _components__WEBPACK_IMPORTED_MODULE_0__.Callout,\n    children: [\n        \"paragraph\",\n        \"tag\",\n        \"list\"\n    ],\n    attributes: {\n        title: {\n            type: String\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9tYXJrZG9jL3RhZ3MvY2FsbG91dC5tYXJrZG9jLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBRWxDLE1BQU1DLFVBQVU7SUFDckJDLFFBQVFGLGdEQUFPQTtJQUNmRyxVQUFVO1FBQUM7UUFBYTtRQUFPO0tBQU87SUFDdENDLFlBQVk7UUFDVkMsT0FBTztZQUNMQyxNQUFNQztRQUNSO0lBQ0Y7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL21hcmtkb2MvdGFncy9jYWxsb3V0Lm1hcmtkb2MudHM/NmJlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NhbGxvdXR9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMnO1xuXG5leHBvcnQgY29uc3QgY2FsbG91dCA9IHtcbiAgcmVuZGVyOiBDYWxsb3V0LFxuICBjaGlsZHJlbjogWydwYXJhZ3JhcGgnLCAndGFnJywgJ2xpc3QnXSxcbiAgYXR0cmlidXRlczoge1xuICAgIHRpdGxlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgfSxcbiAgfSxcbn07XG4iXSwibmFtZXMiOlsiQ2FsbG91dCIsImNhbGxvdXQiLCJyZW5kZXIiLCJjaGlsZHJlbiIsImF0dHJpYnV0ZXMiLCJ0aXRsZSIsInR5cGUiLCJTdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./markdoc/tags/callout.markdoc.ts\n"));

/***/ }),

/***/ "./markdoc/tags/index.ts":
/*!*******************************!*\
  !*** ./markdoc/tags/index.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _callout_markdoc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./callout.markdoc */ \"./markdoc/tags/callout.markdoc.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _callout_markdoc__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _callout_markdoc__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _spoiler_markdoc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./spoiler.markdoc */ \"./markdoc/tags/spoiler.markdoc.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _spoiler_markdoc__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _spoiler_markdoc__WEBPACK_IMPORTED_MODULE_1__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* Use this file to export your markdoc tags */ \n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9tYXJrZG9jL3RhZ3MvaW5kZXgudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsNkNBQTZDLEdBQ1g7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9tYXJrZG9jL3RhZ3MvaW5kZXgudHM/OWY2MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBVc2UgdGhpcyBmaWxlIHRvIGV4cG9ydCB5b3VyIG1hcmtkb2MgdGFncyAqL1xuZXhwb3J0ICogZnJvbSAnLi9jYWxsb3V0Lm1hcmtkb2MnO1xuZXhwb3J0ICogZnJvbSAnLi9zcG9pbGVyLm1hcmtkb2MnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./markdoc/tags/index.ts\n"));

/***/ }),

/***/ "./markdoc/tags/spoiler.markdoc.ts":
/*!*****************************************!*\
  !*** ./markdoc/tags/spoiler.markdoc.ts ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"spoiler\": function() { return /* binding */ spoiler; }\n/* harmony export */ });\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../components */ \"./components/index.js\");\n\nconst spoiler = {\n    render: _components__WEBPACK_IMPORTED_MODULE_0__.Spoiler,\n    children: [\n        \"paragraph\",\n        \"tag\",\n        \"list\"\n    ],\n    attributes: {\n        title: {\n            type: String\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9tYXJrZG9jL3RhZ3Mvc3BvaWxlci5tYXJrZG9jLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBRWxDLE1BQU1DLFVBQVU7SUFDckJDLFFBQVFGLGdEQUFPQTtJQUNmRyxVQUFVO1FBQUM7UUFBYTtRQUFPO0tBQU87SUFDdENDLFlBQVk7UUFDVkMsT0FBTztZQUNMQyxNQUFNQztRQUNSO0lBQ0Y7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL21hcmtkb2MvdGFncy9zcG9pbGVyLm1hcmtkb2MudHM/MGQzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Nwb2lsZXJ9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMnO1xuXG5leHBvcnQgY29uc3Qgc3BvaWxlciA9IHtcbiAgcmVuZGVyOiBTcG9pbGVyLFxuICBjaGlsZHJlbjogWydwYXJhZ3JhcGgnLCAndGFnJywgJ2xpc3QnXSxcbiAgYXR0cmlidXRlczoge1xuICAgIHRpdGxlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgfSxcbiAgfSxcbn07XG4iXSwibmFtZXMiOlsiU3BvaWxlciIsInNwb2lsZXIiLCJyZW5kZXIiLCJjaGlsZHJlbiIsImF0dHJpYnV0ZXMiLCJ0aXRsZSIsInR5cGUiLCJTdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./markdoc/tags/spoiler.markdoc.ts\n"));

/***/ }),

/***/ "./pages/index.md":
/*!************************!*\
  !*** ./pages/index.md ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__N_SSG\": function() { return /* binding */ __N_SSG; },\n/* harmony export */   \"default\": function() { return /* binding */ MarkdocComponent; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @markdoc/markdoc */ \"./node_modules/@markdoc/markdoc/dist/index.mjs\");\n/* harmony import */ var _Users_ilyukinaanna_Documents_love_or_leave_node_modules_markdoc_next_js_src_runtime_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@markdoc/next.js/src/runtime.js */ \"./node_modules/@markdoc/next.js/src/runtime.js\");\n/* harmony import */ var _Users_ilyukinaanna_Documents_love_or_leave_markdoc_tags_index_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./markdoc/tags/index.ts */ \"./markdoc/tags/index.ts\");\n/* harmony import */ var _Users_ilyukinaanna_Documents_love_or_leave_markdoc_nodes_index_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./markdoc/nodes/index.ts */ \"./markdoc/nodes/index.ts\");\n/* harmony import */ var _Users_ilyukinaanna_Documents_love_or_leave_markdoc_functions_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./markdoc/functions.ts */ \"./markdoc/functions.ts\");\n\n// renderers is imported separately so Markdoc isn't sent to the client\n\n\n/**\n * Schema is imported like this so end-user's code is compiled using build-in babel/webpack configs.\n * This enables typescript/ESnext support\n */ const config = {};\n\n\n\nconst schema = {\n    tags: (0,_Users_ilyukinaanna_Documents_love_or_leave_node_modules_markdoc_next_js_src_runtime_js__WEBPACK_IMPORTED_MODULE_1__.defaultObject)(_Users_ilyukinaanna_Documents_love_or_leave_markdoc_tags_index_ts__WEBPACK_IMPORTED_MODULE_2__),\n    nodes: (0,_Users_ilyukinaanna_Documents_love_or_leave_node_modules_markdoc_next_js_src_runtime_js__WEBPACK_IMPORTED_MODULE_1__.defaultObject)(_Users_ilyukinaanna_Documents_love_or_leave_markdoc_nodes_index_ts__WEBPACK_IMPORTED_MODULE_3__),\n    functions: (0,_Users_ilyukinaanna_Documents_love_or_leave_node_modules_markdoc_next_js_src_runtime_js__WEBPACK_IMPORTED_MODULE_1__.defaultObject)(_Users_ilyukinaanna_Documents_love_or_leave_markdoc_functions_ts__WEBPACK_IMPORTED_MODULE_4__),\n    ...(0,_Users_ilyukinaanna_Documents_love_or_leave_node_modules_markdoc_next_js_src_runtime_js__WEBPACK_IMPORTED_MODULE_1__.defaultObject)(config)\n};\nconst { components  } = (0,_Users_ilyukinaanna_Documents_love_or_leave_node_modules_markdoc_next_js_src_runtime_js__WEBPACK_IMPORTED_MODULE_1__.getSchema)(schema);\nvar __N_SSG = true;\nfunction MarkdocComponent(props) {\n    // Only execute HMR code in development\n    return _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_5__.renderers.react(props.markdoc.content, (react__WEBPACK_IMPORTED_MODULE_0___default()), {\n        components: {\n            ...components,\n            // Allows users to override default components at runtime, via their _app\n            ...props.components\n        }\n    });\n}\n_c = MarkdocComponent;\nvar _c;\n$RefreshReg$(_c, \"MarkdocComponent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/index.md\n"));

/***/ }),

/***/ "./node_modules/@markdoc/markdoc/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@markdoc/markdoc/dist/index.mjs ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Ast\": function() { return /* binding */ ast_default; },\n/* harmony export */   \"Tag\": function() { return /* binding */ Tag; },\n/* harmony export */   \"Tokenizer\": function() { return /* binding */ Tokenizer; },\n/* harmony export */   \"createElement\": function() { return /* binding */ createElement; },\n/* harmony export */   \"default\": function() { return /* binding */ Markdoc; },\n/* harmony export */   \"format\": function() { return /* binding */ format; },\n/* harmony export */   \"functions\": function() { return /* binding */ functions_default; },\n/* harmony export */   \"globalAttributes\": function() { return /* binding */ globalAttributes; },\n/* harmony export */   \"nodes\": function() { return /* binding */ schema_exports; },\n/* harmony export */   \"parse\": function() { return /* binding */ parse3; },\n/* harmony export */   \"parseTags\": function() { return /* binding */ parseTags; },\n/* harmony export */   \"renderers\": function() { return /* binding */ renderers_default; },\n/* harmony export */   \"resolve\": function() { return /* binding */ resolve2; },\n/* harmony export */   \"tags\": function() { return /* binding */ tags_default; },\n/* harmony export */   \"transform\": function() { return /* binding */ transform2; },\n/* harmony export */   \"transformer\": function() { return /* binding */ transformer_default; },\n/* harmony export */   \"transforms\": function() { return /* binding */ transforms_default; },\n/* harmony export */   \"truthy\": function() { return /* binding */ truthy; },\n/* harmony export */   \"validate\": function() { return /* binding */ validate; },\n/* harmony export */   \"validator\": function() { return /* binding */ validator; }\n/* harmony export */ });\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __export = (target, all) => {\n  __markAsModule(target);\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module, desc) => {\n  if (module && typeof module === \"object\" || typeof module === \"function\") {\n    for (let key of __getOwnPropNames(module))\n      if (!__hasOwnProp.call(target, key) && key !== \"default\")\n        __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toModule = (module) => {\n  return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, \"default\", module && module.__esModule && \"default\" in module ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);\n};\n\n// src/grammar/tag.js\nvar require_tag = __commonJS({\n  \"src/grammar/tag.js\"(exports, module) {\n    \"use strict\";\n    function peg$subclass(child, parent) {\n      function C() {\n        this.constructor = child;\n      }\n      C.prototype = parent.prototype;\n      child.prototype = new C();\n    }\n    function peg$SyntaxError(message, expected, found, location) {\n      this.message = message;\n      this.expected = expected;\n      this.found = found;\n      this.location = location;\n      this.name = \"SyntaxError\";\n      if (typeof Error.captureStackTrace === \"function\") {\n        Error.captureStackTrace(this, peg$SyntaxError);\n      }\n    }\n    peg$subclass(peg$SyntaxError, Error);\n    peg$SyntaxError.buildMessage = function(expected, found, location) {\n      var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return '\"' + literalEscape(expectation.text) + '\"';\n        },\n        class: function(expectation) {\n          var escapedParts = expectation.parts.map(function(part) {\n            return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n          });\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n        any: function() {\n          return \"any character\";\n        },\n        end: function() {\n          return \"end of input\";\n        },\n        other: function(expectation) {\n          return expectation.description;\n        },\n        not: function(expectation) {\n          return \"not \" + describeExpectation(expectation.expected);\n        }\n      };\n      function hex(ch) {\n        return ch.charCodeAt(0).toString(16).toUpperCase();\n      }\n      function literalEscape(s2) {\n        return s2.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"').replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function classEscape(s2) {\n        return s2.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function describeExpectation(expectation) {\n        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n      }\n      function describeExpected(expected2) {\n        var descriptions = expected2.map(describeExpectation);\n        var i, j;\n        descriptions.sort();\n        if (descriptions.length > 0) {\n          for (i = 1, j = 1; i < descriptions.length; i++) {\n            if (descriptions[i - 1] !== descriptions[i]) {\n              descriptions[j] = descriptions[i];\n              j++;\n            }\n          }\n          descriptions.length = j;\n        }\n        switch (descriptions.length) {\n          case 1:\n            return descriptions[0];\n          case 2:\n            return descriptions[0] + \" or \" + descriptions[1];\n          default:\n            return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n        }\n      }\n      function describeFound(found2) {\n        return found2 ? '\"' + literalEscape(found2) + '\"' : \"end of input\";\n      }\n      return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    function peg$parse(input, options) {\n      options = options !== void 0 ? options : {};\n      var peg$FAILED = {};\n      var peg$startRuleFunctions = { Top: peg$parseTop };\n      var peg$startRuleFunction = peg$parseTop;\n      var peg$c0 = \"/\";\n      var peg$c1 = \".\";\n      var peg$c2 = \"#\";\n      var peg$c3 = \"=\";\n      var peg$c4 = \"(\";\n      var peg$c5 = \")\";\n      var peg$c6 = \",\";\n      var peg$c7 = \"[\";\n      var peg$c8 = \"]\";\n      var peg$c9 = \"null\";\n      var peg$c10 = \"true\";\n      var peg$c11 = \"false\";\n      var peg$c12 = \"{\";\n      var peg$c13 = \"}\";\n      var peg$c14 = \":\";\n      var peg$c15 = \"-\";\n      var peg$c16 = '\"';\n      var peg$c17 = \"\\\\\";\n      var peg$r0 = /^[$@]/;\n      var peg$r1 = /^[0-9]/;\n      var peg$r2 = /^[^\\0-\\x1F\"\\\\]/;\n      var peg$r3 = /^[a-zA-Z0-9_\\-]/;\n      var peg$r4 = /^[ \\n\\t]/;\n      var peg$e0 = peg$literalExpectation(\"/\", false);\n      var peg$e1 = peg$otherExpectation(\"tag name\");\n      var peg$e2 = peg$otherExpectation(\"class\");\n      var peg$e3 = peg$otherExpectation(\"id\");\n      var peg$e4 = peg$literalExpectation(\"=\", false);\n      var peg$e5 = peg$literalExpectation(\"(\", false);\n      var peg$e6 = peg$literalExpectation(\")\", false);\n      var peg$e7 = peg$literalExpectation(\",\", false);\n      var peg$e8 = peg$otherExpectation(\"variable\");\n      var peg$e9 = peg$otherExpectation(\"null\");\n      var peg$e10 = peg$otherExpectation(\"boolean\");\n      var peg$e11 = peg$literalExpectation(\"[\", false);\n      var peg$e12 = peg$literalExpectation(\"]\", false);\n      var peg$e13 = peg$literalExpectation(\"{\", false);\n      var peg$e14 = peg$literalExpectation(\"}\", false);\n      var peg$e15 = peg$literalExpectation(\":\", false);\n      var peg$e16 = peg$otherExpectation(\"number\");\n      var peg$e17 = peg$otherExpectation(\"string\");\n      var peg$e18 = peg$otherExpectation(\"identifier\");\n      var peg$e19 = peg$otherExpectation(\"whitespace\");\n      var peg$f0 = function(variable) {\n        return { type: \"variable\", meta: { variable } };\n      };\n      var peg$f1 = function(attributes) {\n        return { type: \"annotation\", meta: { attributes } };\n      };\n      var peg$f2 = function(tag, value) {\n        return value;\n      };\n      var peg$f3 = function(tag, primary, attributes, close) {\n        if (primary) {\n          attributes = attributes || [];\n          attributes.unshift({\n            type: \"attribute\",\n            name: \"primary\",\n            value: primary\n          });\n        }\n        const [type, nesting] = close ? [\"tag\", 0] : [\"tag_open\", 1];\n        return { type, nesting, meta: { tag, attributes } };\n      };\n      var peg$f4 = function(tag) {\n        return { type: \"tag_close\", nesting: -1, meta: { tag } };\n      };\n      var peg$f5 = function(head, tail) {\n        return !head ? [] : [head, ...tail];\n      };\n      var peg$f6 = function(item2) {\n        return item2;\n      };\n      var peg$f7 = function(ids) {\n        return ids;\n      };\n      var peg$f8 = function(classes) {\n        return classes;\n      };\n      var peg$f9 = function(attribute) {\n        return attribute;\n      };\n      var peg$f10 = function(name) {\n        return { type: \"class\", name, value: true };\n      };\n      var peg$f11 = function(value) {\n        return { type: \"attribute\", name: \"id\", value };\n      };\n      var peg$f12 = function(name, value) {\n        return { type: \"attribute\", name, value };\n      };\n      var peg$f13 = function(name, head, tail) {\n        return head ? [head, ...tail] : [];\n      };\n      var peg$f14 = function(name, params) {\n        let parameters = {};\n        for (let [index, { name: name2, value }] of params.entries())\n          parameters[name2 || index] = value;\n        return new Function3(name, parameters);\n      };\n      var peg$f15 = function(name) {\n        return name;\n      };\n      var peg$f16 = function(name, value) {\n        return { name, value };\n      };\n      var peg$f17 = function(value) {\n        return value;\n      };\n      var peg$f18 = function(prefix, head, tail) {\n        if (prefix === \"@\")\n          return [head, ...tail];\n        return new Variable2([head, ...tail]);\n      };\n      var peg$f19 = function() {\n        return null;\n      };\n      var peg$f20 = function() {\n        return true;\n      };\n      var peg$f21 = function() {\n        return false;\n      };\n      var peg$f22 = function(head, tail) {\n        return [head, ...tail];\n      };\n      var peg$f23 = function(value) {\n        return value || [];\n      };\n      var peg$f24 = function(head, tail) {\n        return Object.assign(head, ...tail);\n      };\n      var peg$f25 = function(value) {\n        return value || {};\n      };\n      var peg$f26 = function(key, value) {\n        return key === \"$$mdtype\" ? {} : { [key]: value };\n      };\n      var peg$f27 = function() {\n        return parseFloat(text2());\n      };\n      var peg$f28 = function(value) {\n        return value.join(\"\");\n      };\n      var peg$f29 = function(sequence) {\n        return sequence;\n      };\n      var peg$currPos = 0;\n      var peg$savedPos = 0;\n      var peg$posDetailsCache = [{ line: 1, column: 1 }];\n      var peg$expected = [];\n      var peg$silentFails = 0;\n      var peg$result;\n      if (\"startRule\" in options) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n          throw new Error(`Can't start parsing from rule \"` + options.startRule + '\".');\n        }\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n      }\n      function text2() {\n        return input.substring(peg$savedPos, peg$currPos);\n      }\n      function offset() {\n        return peg$savedPos;\n      }\n      function range() {\n        return [peg$savedPos, peg$currPos];\n      }\n      function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n      }\n      function expected(description, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location2);\n      }\n      function error2(message, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location2);\n      }\n      function peg$literalExpectation(text3, ignoreCase) {\n        return { type: \"literal\", text: text3, ignoreCase };\n      }\n      function peg$classExpectation(parts, inverted, ignoreCase) {\n        return {\n          type: \"class\",\n          parts,\n          inverted,\n          ignoreCase\n        };\n      }\n      function peg$anyExpectation() {\n        return { type: \"any\" };\n      }\n      function peg$endExpectation() {\n        return { type: \"end\" };\n      }\n      function peg$otherExpectation(description) {\n        return { type: \"other\", description };\n      }\n      function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n          return details;\n        } else {\n          p = pos - 1;\n          while (!peg$posDetailsCache[p]) {\n            p--;\n          }\n          details = peg$posDetailsCache[p];\n          details = {\n            line: details.line,\n            column: details.column\n          };\n          while (p < pos) {\n            if (input.charCodeAt(p) === 10) {\n              details.line++;\n              details.column = 1;\n            } else {\n              details.column++;\n            }\n            p++;\n          }\n          peg$posDetailsCache[pos] = details;\n          return details;\n        }\n      }\n      var peg$VALIDFILENAME = typeof options.filename === \"string\" && options.filename.length > 0;\n      function peg$computeLocation(startPos, endPos) {\n        var loc = {};\n        if (peg$VALIDFILENAME)\n          loc.filename = options.filename;\n        var startPosDetails = peg$computePosDetails(startPos);\n        loc.start = {\n          offset: startPos,\n          line: startPosDetails.line,\n          column: startPosDetails.column\n        };\n        var endPosDetails = peg$computePosDetails(endPos);\n        loc.end = {\n          offset: endPos,\n          line: endPosDetails.line,\n          column: endPosDetails.column\n        };\n        return loc;\n      }\n      function peg$begin() {\n        peg$expected.push({ pos: peg$currPos, variants: [] });\n      }\n      function peg$expect(expected2) {\n        var top = peg$expected[peg$expected.length - 1];\n        if (peg$currPos < top.pos) {\n          return;\n        }\n        if (peg$currPos > top.pos) {\n          top.pos = peg$currPos;\n          top.variants = [];\n        }\n        top.variants.push(expected2);\n      }\n      function peg$end(invert) {\n        var expected2 = peg$expected.pop();\n        var top = peg$expected[peg$expected.length - 1];\n        var variants = expected2.variants;\n        if (top.pos !== expected2.pos) {\n          return;\n        }\n        if (invert) {\n          variants = variants.map(function(e) {\n            return e.type === \"not\" ? e.expected : { type: \"not\", expected: e };\n          });\n        }\n        Array.prototype.push.apply(top.variants, variants);\n      }\n      function peg$buildSimpleError(message, location2) {\n        return new peg$SyntaxError(message, null, null, location2);\n      }\n      function peg$buildStructuredError(expected2, found, location2) {\n        return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found, location2), expected2, found, location2);\n      }\n      function peg$buildError() {\n        var expected2 = peg$expected[0];\n        var failPos = expected2.pos;\n        return peg$buildStructuredError(expected2.variants, failPos < input.length ? input.charAt(failPos) : null, failPos < input.length ? peg$computeLocation(failPos, failPos + 1) : peg$computeLocation(failPos, failPos));\n      }\n      function peg$parseTop() {\n        var s0;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$parseTopLevelValue();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseAnnotation();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseTagOpen();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseTagClose();\n            }\n          }\n        }\n        return s0;\n      }\n      function peg$parseTopLevelValue() {\n        var s0, s1;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = peg$parseVariable();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseFunction();\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f0(s1);\n        }\n        s0 = s1;\n        return s0;\n      }\n      function peg$parseAnnotation() {\n        var s0, s1, s2, s3;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = peg$parseTagAttributes();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parse_();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parse_();\n          }\n          peg$savedPos = s0;\n          s0 = peg$f1(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseTagOpen() {\n        var s0, s1, s2, s3, s4, s5, s6;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = peg$parseTagName();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parse_();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parse_();\n          }\n          s3 = peg$currPos;\n          s4 = peg$parseValue();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            peg$savedPos = s3;\n            s3 = peg$f2(s1, s4);\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          s4 = peg$parseTagAttributes();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          s5 = [];\n          s6 = peg$parse_();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parse_();\n          }\n          rule$expects(peg$e0);\n          if (input.charCodeAt(peg$currPos) === 47) {\n            s6 = peg$c0;\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n          }\n          if (s6 === peg$FAILED) {\n            s6 = null;\n          }\n          peg$savedPos = s0;\n          s0 = peg$f3(s1, s3, s4, s6);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseTagClose() {\n        var s0, s1, s2;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        rule$expects(peg$e0);\n        if (input.charCodeAt(peg$currPos) === 47) {\n          s1 = peg$c0;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseTagName();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f4(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseTagName() {\n        var s0;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        rule$expects(peg$e1);\n        peg$silentFails++;\n        s0 = peg$parseIdentifier();\n        peg$silentFails--;\n        return s0;\n      }\n      function peg$parseTagAttributes() {\n        var s0, s1, s2, s3;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = peg$parseTagAttributesItem();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parseTagAttributesTail();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parseTagAttributesTail();\n          }\n          peg$savedPos = s0;\n          s0 = peg$f5(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseTagAttributesTail() {\n        var s0, s1, s2;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parse_();\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseTagAttributesItem();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f6(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseTagAttributesItem() {\n        var s0, s1;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = peg$parseTagShortcutId();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f7(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseTagShortcutClass();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f8(s1);\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseTagAttribute();\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$f9(s1);\n            }\n            s0 = s1;\n          }\n        }\n        return s0;\n      }\n      function peg$parseTagShortcutClass() {\n        var s0, s1, s2;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        rule$expects(peg$e2);\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s1 = peg$c1;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseIdentifier();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f10(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        return s0;\n      }\n      function peg$parseTagShortcutId() {\n        var s0, s1, s2;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        rule$expects(peg$e3);\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 35) {\n          s1 = peg$c2;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseIdentifier();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f11(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        return s0;\n      }\n      function peg$parseTagAttribute() {\n        var s0, s1, s2, s3;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = peg$parseIdentifier();\n        if (s1 !== peg$FAILED) {\n          rule$expects(peg$e4);\n          if (input.charCodeAt(peg$currPos) === 61) {\n            s2 = peg$c3;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseValue();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f12(s1, s3);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseFunction() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = peg$parseIdentifier();\n        if (s1 !== peg$FAILED) {\n          rule$expects(peg$e5);\n          if (input.charCodeAt(peg$currPos) === 40) {\n            s2 = peg$c4;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = [];\n            s4 = peg$parse_();\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parse_();\n            }\n            s4 = peg$currPos;\n            s5 = peg$parseFunctionParameter();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            s6 = [];\n            s7 = peg$parseFunctionParameterTail();\n            while (s7 !== peg$FAILED) {\n              s6.push(s7);\n              s7 = peg$parseFunctionParameterTail();\n            }\n            peg$savedPos = s4;\n            s4 = peg$f13(s1, s5, s6);\n            rule$expects(peg$e6);\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s5 = peg$c5;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f14(s1, s4);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseFunctionParameter() {\n        var s0, s1, s2, s3;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$parseIdentifier();\n        if (s2 !== peg$FAILED) {\n          rule$expects(peg$e4);\n          if (input.charCodeAt(peg$currPos) === 61) {\n            s3 = peg$c3;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s1;\n            s1 = peg$f15(s2);\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        s2 = peg$parseValue();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f16(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseFunctionParameterTail() {\n        var s0, s1, s2, s3, s4;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parse_();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parse_();\n        }\n        rule$expects(peg$e7);\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s2 = peg$c6;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parse_();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parse_();\n          }\n          s4 = peg$parseFunctionParameter();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f17(s4);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseTrailingComma() {\n        var s0, s1, s2;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parse_();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parse_();\n        }\n        rule$expects(peg$e7);\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s2 = peg$c6;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = null;\n        }\n        return s0;\n      }\n      function peg$parseVariable() {\n        var s0, s1, s2, s3, s4;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        rule$expects(peg$e8);\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (peg$r0.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseIdentifier();\n          if (s2 !== peg$FAILED) {\n            s3 = [];\n            s4 = peg$parseVariableTail();\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parseVariableTail();\n            }\n            peg$savedPos = s0;\n            s0 = peg$f18(s1, s2, s3);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        return s0;\n      }\n      function peg$parseVariableTail() {\n        var s0, s1, s2, s3;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s1 = peg$c1;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseIdentifier();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f15(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 91) {\n            s1 = peg$c7;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parseValueNumber();\n            if (s2 === peg$FAILED) {\n              s2 = peg$parseValueString();\n            }\n            if (s2 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 93) {\n                s3 = peg$c8;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f17(s2);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n        return s0;\n      }\n      function peg$parseValue() {\n        var s0;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$parseValueNull();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseValueBoolean();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseValueString();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseValueNumber();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseValueArray();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseValueHash();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parseFunction();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseVariable();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return s0;\n      }\n      function peg$parseValueNull() {\n        var s0, s1;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        rule$expects(peg$e9);\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 4) === peg$c9) {\n          s1 = peg$c9;\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f19();\n        }\n        s0 = s1;\n        peg$silentFails--;\n        return s0;\n      }\n      function peg$parseValueBoolean() {\n        var s0, s1;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        rule$expects(peg$e10);\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 4) === peg$c10) {\n          s1 = peg$c10;\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f20();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 5) === peg$c11) {\n            s1 = peg$c11;\n            peg$currPos += 5;\n          } else {\n            s1 = peg$FAILED;\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f21();\n          }\n          s0 = s1;\n        }\n        peg$silentFails--;\n        return s0;\n      }\n      function peg$parseValueArray() {\n        var s0, s1, s2, s3, s4, s5, s6;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        rule$expects(peg$e11);\n        if (input.charCodeAt(peg$currPos) === 91) {\n          s1 = peg$c7;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parse_();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parse_();\n          }\n          s3 = peg$currPos;\n          s4 = peg$parseValue();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parseValueArrayTail();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parseValueArrayTail();\n            }\n            s6 = peg$parseTrailingComma();\n            peg$savedPos = s3;\n            s3 = peg$f22(s4, s5);\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          rule$expects(peg$e12);\n          if (input.charCodeAt(peg$currPos) === 93) {\n            s5 = peg$c8;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n          }\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f23(s3);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseValueArrayTail() {\n        var s0, s1, s2, s3, s4;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parse_();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parse_();\n        }\n        rule$expects(peg$e7);\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s2 = peg$c6;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parse_();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parse_();\n          }\n          s4 = peg$parseValue();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f17(s4);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseValueHash() {\n        var s0, s1, s2, s3, s4, s5, s6;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        rule$expects(peg$e13);\n        if (input.charCodeAt(peg$currPos) === 123) {\n          s1 = peg$c12;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parse_();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parse_();\n          }\n          s3 = peg$currPos;\n          s4 = peg$parseValueHashItem();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parseValueHashTail();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parseValueHashTail();\n            }\n            s6 = peg$parseTrailingComma();\n            peg$savedPos = s3;\n            s3 = peg$f24(s4, s5);\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          rule$expects(peg$e14);\n          if (input.charCodeAt(peg$currPos) === 125) {\n            s5 = peg$c13;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n          }\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f25(s3);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseValueHashTail() {\n        var s0, s1, s2, s3, s4;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parse_();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parse_();\n        }\n        rule$expects(peg$e7);\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s2 = peg$c6;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parse_();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parse_();\n          }\n          s4 = peg$parseValueHashItem();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f6(s4);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseValueHashItem() {\n        var s0, s1, s2, s3, s4;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = peg$parseIdentifier();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseValueString();\n        }\n        if (s1 !== peg$FAILED) {\n          rule$expects(peg$e15);\n          if (input.charCodeAt(peg$currPos) === 58) {\n            s2 = peg$c14;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = [];\n            s4 = peg$parse_();\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parse_();\n            }\n            s4 = peg$parseValue();\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f26(s1, s4);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseValueNumber() {\n        var s0, s1, s2, s3, s4, s5, s6;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        rule$expects(peg$e16);\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c15;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        s2 = [];\n        if (peg$r1.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$r1.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n            }\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 46) {\n            s4 = peg$c1;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$r1.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$r1.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          peg$savedPos = s0;\n          s0 = peg$f27();\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        return s0;\n      }\n      function peg$parseValueString() {\n        var s0, s1, s2, s3;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        rule$expects(peg$e17);\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s1 = peg$c16;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parseValueStringChars();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parseValueStringChars();\n          }\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s3 = peg$c16;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f28(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        return s0;\n      }\n      function peg$parseValueStringChars() {\n        var s0;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        if (peg$r2.test(input.charAt(peg$currPos))) {\n          s0 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseValueStringEscapes();\n        }\n        return s0;\n      }\n      function peg$parseValueStringEscapes() {\n        var s0, s1, s2;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 92) {\n          s1 = peg$c17;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s2 = peg$c16;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 92) {\n              s2 = peg$c17;\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f29(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseIdentifier() {\n        var s0, s1, s2;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        rule$expects(peg$e18);\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        if (peg$r3.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            if (peg$r3.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n        peg$silentFails--;\n        return s0;\n      }\n      function peg$parse_() {\n        var s0;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        rule$expects(peg$e19);\n        peg$silentFails++;\n        if (peg$r4.test(input.charAt(peg$currPos))) {\n          s0 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        return s0;\n      }\n      const { Variable: Variable2, Function: Function3 } = options;\n      peg$begin();\n      peg$result = peg$startRuleFunction();\n      if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n      } else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n          peg$expect(peg$endExpectation());\n        }\n        throw peg$buildError();\n      }\n    }\n    module.exports = {\n      SyntaxError: peg$SyntaxError,\n      parse: peg$parse\n    };\n  }\n});\n\n// node_modules/entities/lib/maps/entities.json\nvar require_entities = __commonJS({\n  \"node_modules/entities/lib/maps/entities.json\"(exports, module) {\n    module.exports = { Aacute: \"\\xC1\", aacute: \"\\xE1\", Abreve: \"\\u0102\", abreve: \"\\u0103\", ac: \"\\u223E\", acd: \"\\u223F\", acE: \"\\u223E\\u0333\", Acirc: \"\\xC2\", acirc: \"\\xE2\", acute: \"\\xB4\", Acy: \"\\u0410\", acy: \"\\u0430\", AElig: \"\\xC6\", aelig: \"\\xE6\", af: \"\\u2061\", Afr: \"\\u{1D504}\", afr: \"\\u{1D51E}\", Agrave: \"\\xC0\", agrave: \"\\xE0\", alefsym: \"\\u2135\", aleph: \"\\u2135\", Alpha: \"\\u0391\", alpha: \"\\u03B1\", Amacr: \"\\u0100\", amacr: \"\\u0101\", amalg: \"\\u2A3F\", amp: \"&\", AMP: \"&\", andand: \"\\u2A55\", And: \"\\u2A53\", and: \"\\u2227\", andd: \"\\u2A5C\", andslope: \"\\u2A58\", andv: \"\\u2A5A\", ang: \"\\u2220\", ange: \"\\u29A4\", angle: \"\\u2220\", angmsdaa: \"\\u29A8\", angmsdab: \"\\u29A9\", angmsdac: \"\\u29AA\", angmsdad: \"\\u29AB\", angmsdae: \"\\u29AC\", angmsdaf: \"\\u29AD\", angmsdag: \"\\u29AE\", angmsdah: \"\\u29AF\", angmsd: \"\\u2221\", angrt: \"\\u221F\", angrtvb: \"\\u22BE\", angrtvbd: \"\\u299D\", angsph: \"\\u2222\", angst: \"\\xC5\", angzarr: \"\\u237C\", Aogon: \"\\u0104\", aogon: \"\\u0105\", Aopf: \"\\u{1D538}\", aopf: \"\\u{1D552}\", apacir: \"\\u2A6F\", ap: \"\\u2248\", apE: \"\\u2A70\", ape: \"\\u224A\", apid: \"\\u224B\", apos: \"'\", ApplyFunction: \"\\u2061\", approx: \"\\u2248\", approxeq: \"\\u224A\", Aring: \"\\xC5\", aring: \"\\xE5\", Ascr: \"\\u{1D49C}\", ascr: \"\\u{1D4B6}\", Assign: \"\\u2254\", ast: \"*\", asymp: \"\\u2248\", asympeq: \"\\u224D\", Atilde: \"\\xC3\", atilde: \"\\xE3\", Auml: \"\\xC4\", auml: \"\\xE4\", awconint: \"\\u2233\", awint: \"\\u2A11\", backcong: \"\\u224C\", backepsilon: \"\\u03F6\", backprime: \"\\u2035\", backsim: \"\\u223D\", backsimeq: \"\\u22CD\", Backslash: \"\\u2216\", Barv: \"\\u2AE7\", barvee: \"\\u22BD\", barwed: \"\\u2305\", Barwed: \"\\u2306\", barwedge: \"\\u2305\", bbrk: \"\\u23B5\", bbrktbrk: \"\\u23B6\", bcong: \"\\u224C\", Bcy: \"\\u0411\", bcy: \"\\u0431\", bdquo: \"\\u201E\", becaus: \"\\u2235\", because: \"\\u2235\", Because: \"\\u2235\", bemptyv: \"\\u29B0\", bepsi: \"\\u03F6\", bernou: \"\\u212C\", Bernoullis: \"\\u212C\", Beta: \"\\u0392\", beta: \"\\u03B2\", beth: \"\\u2136\", between: \"\\u226C\", Bfr: \"\\u{1D505}\", bfr: \"\\u{1D51F}\", bigcap: \"\\u22C2\", bigcirc: \"\\u25EF\", bigcup: \"\\u22C3\", bigodot: \"\\u2A00\", bigoplus: \"\\u2A01\", bigotimes: \"\\u2A02\", bigsqcup: \"\\u2A06\", bigstar: \"\\u2605\", bigtriangledown: \"\\u25BD\", bigtriangleup: \"\\u25B3\", biguplus: \"\\u2A04\", bigvee: \"\\u22C1\", bigwedge: \"\\u22C0\", bkarow: \"\\u290D\", blacklozenge: \"\\u29EB\", blacksquare: \"\\u25AA\", blacktriangle: \"\\u25B4\", blacktriangledown: \"\\u25BE\", blacktriangleleft: \"\\u25C2\", blacktriangleright: \"\\u25B8\", blank: \"\\u2423\", blk12: \"\\u2592\", blk14: \"\\u2591\", blk34: \"\\u2593\", block: \"\\u2588\", bne: \"=\\u20E5\", bnequiv: \"\\u2261\\u20E5\", bNot: \"\\u2AED\", bnot: \"\\u2310\", Bopf: \"\\u{1D539}\", bopf: \"\\u{1D553}\", bot: \"\\u22A5\", bottom: \"\\u22A5\", bowtie: \"\\u22C8\", boxbox: \"\\u29C9\", boxdl: \"\\u2510\", boxdL: \"\\u2555\", boxDl: \"\\u2556\", boxDL: \"\\u2557\", boxdr: \"\\u250C\", boxdR: \"\\u2552\", boxDr: \"\\u2553\", boxDR: \"\\u2554\", boxh: \"\\u2500\", boxH: \"\\u2550\", boxhd: \"\\u252C\", boxHd: \"\\u2564\", boxhD: \"\\u2565\", boxHD: \"\\u2566\", boxhu: \"\\u2534\", boxHu: \"\\u2567\", boxhU: \"\\u2568\", boxHU: \"\\u2569\", boxminus: \"\\u229F\", boxplus: \"\\u229E\", boxtimes: \"\\u22A0\", boxul: \"\\u2518\", boxuL: \"\\u255B\", boxUl: \"\\u255C\", boxUL: \"\\u255D\", boxur: \"\\u2514\", boxuR: \"\\u2558\", boxUr: \"\\u2559\", boxUR: \"\\u255A\", boxv: \"\\u2502\", boxV: \"\\u2551\", boxvh: \"\\u253C\", boxvH: \"\\u256A\", boxVh: \"\\u256B\", boxVH: \"\\u256C\", boxvl: \"\\u2524\", boxvL: \"\\u2561\", boxVl: \"\\u2562\", boxVL: \"\\u2563\", boxvr: \"\\u251C\", boxvR: \"\\u255E\", boxVr: \"\\u255F\", boxVR: \"\\u2560\", bprime: \"\\u2035\", breve: \"\\u02D8\", Breve: \"\\u02D8\", brvbar: \"\\xA6\", bscr: \"\\u{1D4B7}\", Bscr: \"\\u212C\", bsemi: \"\\u204F\", bsim: \"\\u223D\", bsime: \"\\u22CD\", bsolb: \"\\u29C5\", bsol: \"\\\\\", bsolhsub: \"\\u27C8\", bull: \"\\u2022\", bullet: \"\\u2022\", bump: \"\\u224E\", bumpE: \"\\u2AAE\", bumpe: \"\\u224F\", Bumpeq: \"\\u224E\", bumpeq: \"\\u224F\", Cacute: \"\\u0106\", cacute: \"\\u0107\", capand: \"\\u2A44\", capbrcup: \"\\u2A49\", capcap: \"\\u2A4B\", cap: \"\\u2229\", Cap: \"\\u22D2\", capcup: \"\\u2A47\", capdot: \"\\u2A40\", CapitalDifferentialD: \"\\u2145\", caps: \"\\u2229\\uFE00\", caret: \"\\u2041\", caron: \"\\u02C7\", Cayleys: \"\\u212D\", ccaps: \"\\u2A4D\", Ccaron: \"\\u010C\", ccaron: \"\\u010D\", Ccedil: \"\\xC7\", ccedil: \"\\xE7\", Ccirc: \"\\u0108\", ccirc: \"\\u0109\", Cconint: \"\\u2230\", ccups: \"\\u2A4C\", ccupssm: \"\\u2A50\", Cdot: \"\\u010A\", cdot: \"\\u010B\", cedil: \"\\xB8\", Cedilla: \"\\xB8\", cemptyv: \"\\u29B2\", cent: \"\\xA2\", centerdot: \"\\xB7\", CenterDot: \"\\xB7\", cfr: \"\\u{1D520}\", Cfr: \"\\u212D\", CHcy: \"\\u0427\", chcy: \"\\u0447\", check: \"\\u2713\", checkmark: \"\\u2713\", Chi: \"\\u03A7\", chi: \"\\u03C7\", circ: \"\\u02C6\", circeq: \"\\u2257\", circlearrowleft: \"\\u21BA\", circlearrowright: \"\\u21BB\", circledast: \"\\u229B\", circledcirc: \"\\u229A\", circleddash: \"\\u229D\", CircleDot: \"\\u2299\", circledR: \"\\xAE\", circledS: \"\\u24C8\", CircleMinus: \"\\u2296\", CirclePlus: \"\\u2295\", CircleTimes: \"\\u2297\", cir: \"\\u25CB\", cirE: \"\\u29C3\", cire: \"\\u2257\", cirfnint: \"\\u2A10\", cirmid: \"\\u2AEF\", cirscir: \"\\u29C2\", ClockwiseContourIntegral: \"\\u2232\", CloseCurlyDoubleQuote: \"\\u201D\", CloseCurlyQuote: \"\\u2019\", clubs: \"\\u2663\", clubsuit: \"\\u2663\", colon: \":\", Colon: \"\\u2237\", Colone: \"\\u2A74\", colone: \"\\u2254\", coloneq: \"\\u2254\", comma: \",\", commat: \"@\", comp: \"\\u2201\", compfn: \"\\u2218\", complement: \"\\u2201\", complexes: \"\\u2102\", cong: \"\\u2245\", congdot: \"\\u2A6D\", Congruent: \"\\u2261\", conint: \"\\u222E\", Conint: \"\\u222F\", ContourIntegral: \"\\u222E\", copf: \"\\u{1D554}\", Copf: \"\\u2102\", coprod: \"\\u2210\", Coproduct: \"\\u2210\", copy: \"\\xA9\", COPY: \"\\xA9\", copysr: \"\\u2117\", CounterClockwiseContourIntegral: \"\\u2233\", crarr: \"\\u21B5\", cross: \"\\u2717\", Cross: \"\\u2A2F\", Cscr: \"\\u{1D49E}\", cscr: \"\\u{1D4B8}\", csub: \"\\u2ACF\", csube: \"\\u2AD1\", csup: \"\\u2AD0\", csupe: \"\\u2AD2\", ctdot: \"\\u22EF\", cudarrl: \"\\u2938\", cudarrr: \"\\u2935\", cuepr: \"\\u22DE\", cuesc: \"\\u22DF\", cularr: \"\\u21B6\", cularrp: \"\\u293D\", cupbrcap: \"\\u2A48\", cupcap: \"\\u2A46\", CupCap: \"\\u224D\", cup: \"\\u222A\", Cup: \"\\u22D3\", cupcup: \"\\u2A4A\", cupdot: \"\\u228D\", cupor: \"\\u2A45\", cups: \"\\u222A\\uFE00\", curarr: \"\\u21B7\", curarrm: \"\\u293C\", curlyeqprec: \"\\u22DE\", curlyeqsucc: \"\\u22DF\", curlyvee: \"\\u22CE\", curlywedge: \"\\u22CF\", curren: \"\\xA4\", curvearrowleft: \"\\u21B6\", curvearrowright: \"\\u21B7\", cuvee: \"\\u22CE\", cuwed: \"\\u22CF\", cwconint: \"\\u2232\", cwint: \"\\u2231\", cylcty: \"\\u232D\", dagger: \"\\u2020\", Dagger: \"\\u2021\", daleth: \"\\u2138\", darr: \"\\u2193\", Darr: \"\\u21A1\", dArr: \"\\u21D3\", dash: \"\\u2010\", Dashv: \"\\u2AE4\", dashv: \"\\u22A3\", dbkarow: \"\\u290F\", dblac: \"\\u02DD\", Dcaron: \"\\u010E\", dcaron: \"\\u010F\", Dcy: \"\\u0414\", dcy: \"\\u0434\", ddagger: \"\\u2021\", ddarr: \"\\u21CA\", DD: \"\\u2145\", dd: \"\\u2146\", DDotrahd: \"\\u2911\", ddotseq: \"\\u2A77\", deg: \"\\xB0\", Del: \"\\u2207\", Delta: \"\\u0394\", delta: \"\\u03B4\", demptyv: \"\\u29B1\", dfisht: \"\\u297F\", Dfr: \"\\u{1D507}\", dfr: \"\\u{1D521}\", dHar: \"\\u2965\", dharl: \"\\u21C3\", dharr: \"\\u21C2\", DiacriticalAcute: \"\\xB4\", DiacriticalDot: \"\\u02D9\", DiacriticalDoubleAcute: \"\\u02DD\", DiacriticalGrave: \"`\", DiacriticalTilde: \"\\u02DC\", diam: \"\\u22C4\", diamond: \"\\u22C4\", Diamond: \"\\u22C4\", diamondsuit: \"\\u2666\", diams: \"\\u2666\", die: \"\\xA8\", DifferentialD: \"\\u2146\", digamma: \"\\u03DD\", disin: \"\\u22F2\", div: \"\\xF7\", divide: \"\\xF7\", divideontimes: \"\\u22C7\", divonx: \"\\u22C7\", DJcy: \"\\u0402\", djcy: \"\\u0452\", dlcorn: \"\\u231E\", dlcrop: \"\\u230D\", dollar: \"$\", Dopf: \"\\u{1D53B}\", dopf: \"\\u{1D555}\", Dot: \"\\xA8\", dot: \"\\u02D9\", DotDot: \"\\u20DC\", doteq: \"\\u2250\", doteqdot: \"\\u2251\", DotEqual: \"\\u2250\", dotminus: \"\\u2238\", dotplus: \"\\u2214\", dotsquare: \"\\u22A1\", doublebarwedge: \"\\u2306\", DoubleContourIntegral: \"\\u222F\", DoubleDot: \"\\xA8\", DoubleDownArrow: \"\\u21D3\", DoubleLeftArrow: \"\\u21D0\", DoubleLeftRightArrow: \"\\u21D4\", DoubleLeftTee: \"\\u2AE4\", DoubleLongLeftArrow: \"\\u27F8\", DoubleLongLeftRightArrow: \"\\u27FA\", DoubleLongRightArrow: \"\\u27F9\", DoubleRightArrow: \"\\u21D2\", DoubleRightTee: \"\\u22A8\", DoubleUpArrow: \"\\u21D1\", DoubleUpDownArrow: \"\\u21D5\", DoubleVerticalBar: \"\\u2225\", DownArrowBar: \"\\u2913\", downarrow: \"\\u2193\", DownArrow: \"\\u2193\", Downarrow: \"\\u21D3\", DownArrowUpArrow: \"\\u21F5\", DownBreve: \"\\u0311\", downdownarrows: \"\\u21CA\", downharpoonleft: \"\\u21C3\", downharpoonright: \"\\u21C2\", DownLeftRightVector: \"\\u2950\", DownLeftTeeVector: \"\\u295E\", DownLeftVectorBar: \"\\u2956\", DownLeftVector: \"\\u21BD\", DownRightTeeVector: \"\\u295F\", DownRightVectorBar: \"\\u2957\", DownRightVector: \"\\u21C1\", DownTeeArrow: \"\\u21A7\", DownTee: \"\\u22A4\", drbkarow: \"\\u2910\", drcorn: \"\\u231F\", drcrop: \"\\u230C\", Dscr: \"\\u{1D49F}\", dscr: \"\\u{1D4B9}\", DScy: \"\\u0405\", dscy: \"\\u0455\", dsol: \"\\u29F6\", Dstrok: \"\\u0110\", dstrok: \"\\u0111\", dtdot: \"\\u22F1\", dtri: \"\\u25BF\", dtrif: \"\\u25BE\", duarr: \"\\u21F5\", duhar: \"\\u296F\", dwangle: \"\\u29A6\", DZcy: \"\\u040F\", dzcy: \"\\u045F\", dzigrarr: \"\\u27FF\", Eacute: \"\\xC9\", eacute: \"\\xE9\", easter: \"\\u2A6E\", Ecaron: \"\\u011A\", ecaron: \"\\u011B\", Ecirc: \"\\xCA\", ecirc: \"\\xEA\", ecir: \"\\u2256\", ecolon: \"\\u2255\", Ecy: \"\\u042D\", ecy: \"\\u044D\", eDDot: \"\\u2A77\", Edot: \"\\u0116\", edot: \"\\u0117\", eDot: \"\\u2251\", ee: \"\\u2147\", efDot: \"\\u2252\", Efr: \"\\u{1D508}\", efr: \"\\u{1D522}\", eg: \"\\u2A9A\", Egrave: \"\\xC8\", egrave: \"\\xE8\", egs: \"\\u2A96\", egsdot: \"\\u2A98\", el: \"\\u2A99\", Element: \"\\u2208\", elinters: \"\\u23E7\", ell: \"\\u2113\", els: \"\\u2A95\", elsdot: \"\\u2A97\", Emacr: \"\\u0112\", emacr: \"\\u0113\", empty: \"\\u2205\", emptyset: \"\\u2205\", EmptySmallSquare: \"\\u25FB\", emptyv: \"\\u2205\", EmptyVerySmallSquare: \"\\u25AB\", emsp13: \"\\u2004\", emsp14: \"\\u2005\", emsp: \"\\u2003\", ENG: \"\\u014A\", eng: \"\\u014B\", ensp: \"\\u2002\", Eogon: \"\\u0118\", eogon: \"\\u0119\", Eopf: \"\\u{1D53C}\", eopf: \"\\u{1D556}\", epar: \"\\u22D5\", eparsl: \"\\u29E3\", eplus: \"\\u2A71\", epsi: \"\\u03B5\", Epsilon: \"\\u0395\", epsilon: \"\\u03B5\", epsiv: \"\\u03F5\", eqcirc: \"\\u2256\", eqcolon: \"\\u2255\", eqsim: \"\\u2242\", eqslantgtr: \"\\u2A96\", eqslantless: \"\\u2A95\", Equal: \"\\u2A75\", equals: \"=\", EqualTilde: \"\\u2242\", equest: \"\\u225F\", Equilibrium: \"\\u21CC\", equiv: \"\\u2261\", equivDD: \"\\u2A78\", eqvparsl: \"\\u29E5\", erarr: \"\\u2971\", erDot: \"\\u2253\", escr: \"\\u212F\", Escr: \"\\u2130\", esdot: \"\\u2250\", Esim: \"\\u2A73\", esim: \"\\u2242\", Eta: \"\\u0397\", eta: \"\\u03B7\", ETH: \"\\xD0\", eth: \"\\xF0\", Euml: \"\\xCB\", euml: \"\\xEB\", euro: \"\\u20AC\", excl: \"!\", exist: \"\\u2203\", Exists: \"\\u2203\", expectation: \"\\u2130\", exponentiale: \"\\u2147\", ExponentialE: \"\\u2147\", fallingdotseq: \"\\u2252\", Fcy: \"\\u0424\", fcy: \"\\u0444\", female: \"\\u2640\", ffilig: \"\\uFB03\", fflig: \"\\uFB00\", ffllig: \"\\uFB04\", Ffr: \"\\u{1D509}\", ffr: \"\\u{1D523}\", filig: \"\\uFB01\", FilledSmallSquare: \"\\u25FC\", FilledVerySmallSquare: \"\\u25AA\", fjlig: \"fj\", flat: \"\\u266D\", fllig: \"\\uFB02\", fltns: \"\\u25B1\", fnof: \"\\u0192\", Fopf: \"\\u{1D53D}\", fopf: \"\\u{1D557}\", forall: \"\\u2200\", ForAll: \"\\u2200\", fork: \"\\u22D4\", forkv: \"\\u2AD9\", Fouriertrf: \"\\u2131\", fpartint: \"\\u2A0D\", frac12: \"\\xBD\", frac13: \"\\u2153\", frac14: \"\\xBC\", frac15: \"\\u2155\", frac16: \"\\u2159\", frac18: \"\\u215B\", frac23: \"\\u2154\", frac25: \"\\u2156\", frac34: \"\\xBE\", frac35: \"\\u2157\", frac38: \"\\u215C\", frac45: \"\\u2158\", frac56: \"\\u215A\", frac58: \"\\u215D\", frac78: \"\\u215E\", frasl: \"\\u2044\", frown: \"\\u2322\", fscr: \"\\u{1D4BB}\", Fscr: \"\\u2131\", gacute: \"\\u01F5\", Gamma: \"\\u0393\", gamma: \"\\u03B3\", Gammad: \"\\u03DC\", gammad: \"\\u03DD\", gap: \"\\u2A86\", Gbreve: \"\\u011E\", gbreve: \"\\u011F\", Gcedil: \"\\u0122\", Gcirc: \"\\u011C\", gcirc: \"\\u011D\", Gcy: \"\\u0413\", gcy: \"\\u0433\", Gdot: \"\\u0120\", gdot: \"\\u0121\", ge: \"\\u2265\", gE: \"\\u2267\", gEl: \"\\u2A8C\", gel: \"\\u22DB\", geq: \"\\u2265\", geqq: \"\\u2267\", geqslant: \"\\u2A7E\", gescc: \"\\u2AA9\", ges: \"\\u2A7E\", gesdot: \"\\u2A80\", gesdoto: \"\\u2A82\", gesdotol: \"\\u2A84\", gesl: \"\\u22DB\\uFE00\", gesles: \"\\u2A94\", Gfr: \"\\u{1D50A}\", gfr: \"\\u{1D524}\", gg: \"\\u226B\", Gg: \"\\u22D9\", ggg: \"\\u22D9\", gimel: \"\\u2137\", GJcy: \"\\u0403\", gjcy: \"\\u0453\", gla: \"\\u2AA5\", gl: \"\\u2277\", glE: \"\\u2A92\", glj: \"\\u2AA4\", gnap: \"\\u2A8A\", gnapprox: \"\\u2A8A\", gne: \"\\u2A88\", gnE: \"\\u2269\", gneq: \"\\u2A88\", gneqq: \"\\u2269\", gnsim: \"\\u22E7\", Gopf: \"\\u{1D53E}\", gopf: \"\\u{1D558}\", grave: \"`\", GreaterEqual: \"\\u2265\", GreaterEqualLess: \"\\u22DB\", GreaterFullEqual: \"\\u2267\", GreaterGreater: \"\\u2AA2\", GreaterLess: \"\\u2277\", GreaterSlantEqual: \"\\u2A7E\", GreaterTilde: \"\\u2273\", Gscr: \"\\u{1D4A2}\", gscr: \"\\u210A\", gsim: \"\\u2273\", gsime: \"\\u2A8E\", gsiml: \"\\u2A90\", gtcc: \"\\u2AA7\", gtcir: \"\\u2A7A\", gt: \">\", GT: \">\", Gt: \"\\u226B\", gtdot: \"\\u22D7\", gtlPar: \"\\u2995\", gtquest: \"\\u2A7C\", gtrapprox: \"\\u2A86\", gtrarr: \"\\u2978\", gtrdot: \"\\u22D7\", gtreqless: \"\\u22DB\", gtreqqless: \"\\u2A8C\", gtrless: \"\\u2277\", gtrsim: \"\\u2273\", gvertneqq: \"\\u2269\\uFE00\", gvnE: \"\\u2269\\uFE00\", Hacek: \"\\u02C7\", hairsp: \"\\u200A\", half: \"\\xBD\", hamilt: \"\\u210B\", HARDcy: \"\\u042A\", hardcy: \"\\u044A\", harrcir: \"\\u2948\", harr: \"\\u2194\", hArr: \"\\u21D4\", harrw: \"\\u21AD\", Hat: \"^\", hbar: \"\\u210F\", Hcirc: \"\\u0124\", hcirc: \"\\u0125\", hearts: \"\\u2665\", heartsuit: \"\\u2665\", hellip: \"\\u2026\", hercon: \"\\u22B9\", hfr: \"\\u{1D525}\", Hfr: \"\\u210C\", HilbertSpace: \"\\u210B\", hksearow: \"\\u2925\", hkswarow: \"\\u2926\", hoarr: \"\\u21FF\", homtht: \"\\u223B\", hookleftarrow: \"\\u21A9\", hookrightarrow: \"\\u21AA\", hopf: \"\\u{1D559}\", Hopf: \"\\u210D\", horbar: \"\\u2015\", HorizontalLine: \"\\u2500\", hscr: \"\\u{1D4BD}\", Hscr: \"\\u210B\", hslash: \"\\u210F\", Hstrok: \"\\u0126\", hstrok: \"\\u0127\", HumpDownHump: \"\\u224E\", HumpEqual: \"\\u224F\", hybull: \"\\u2043\", hyphen: \"\\u2010\", Iacute: \"\\xCD\", iacute: \"\\xED\", ic: \"\\u2063\", Icirc: \"\\xCE\", icirc: \"\\xEE\", Icy: \"\\u0418\", icy: \"\\u0438\", Idot: \"\\u0130\", IEcy: \"\\u0415\", iecy: \"\\u0435\", iexcl: \"\\xA1\", iff: \"\\u21D4\", ifr: \"\\u{1D526}\", Ifr: \"\\u2111\", Igrave: \"\\xCC\", igrave: \"\\xEC\", ii: \"\\u2148\", iiiint: \"\\u2A0C\", iiint: \"\\u222D\", iinfin: \"\\u29DC\", iiota: \"\\u2129\", IJlig: \"\\u0132\", ijlig: \"\\u0133\", Imacr: \"\\u012A\", imacr: \"\\u012B\", image: \"\\u2111\", ImaginaryI: \"\\u2148\", imagline: \"\\u2110\", imagpart: \"\\u2111\", imath: \"\\u0131\", Im: \"\\u2111\", imof: \"\\u22B7\", imped: \"\\u01B5\", Implies: \"\\u21D2\", incare: \"\\u2105\", in: \"\\u2208\", infin: \"\\u221E\", infintie: \"\\u29DD\", inodot: \"\\u0131\", intcal: \"\\u22BA\", int: \"\\u222B\", Int: \"\\u222C\", integers: \"\\u2124\", Integral: \"\\u222B\", intercal: \"\\u22BA\", Intersection: \"\\u22C2\", intlarhk: \"\\u2A17\", intprod: \"\\u2A3C\", InvisibleComma: \"\\u2063\", InvisibleTimes: \"\\u2062\", IOcy: \"\\u0401\", iocy: \"\\u0451\", Iogon: \"\\u012E\", iogon: \"\\u012F\", Iopf: \"\\u{1D540}\", iopf: \"\\u{1D55A}\", Iota: \"\\u0399\", iota: \"\\u03B9\", iprod: \"\\u2A3C\", iquest: \"\\xBF\", iscr: \"\\u{1D4BE}\", Iscr: \"\\u2110\", isin: \"\\u2208\", isindot: \"\\u22F5\", isinE: \"\\u22F9\", isins: \"\\u22F4\", isinsv: \"\\u22F3\", isinv: \"\\u2208\", it: \"\\u2062\", Itilde: \"\\u0128\", itilde: \"\\u0129\", Iukcy: \"\\u0406\", iukcy: \"\\u0456\", Iuml: \"\\xCF\", iuml: \"\\xEF\", Jcirc: \"\\u0134\", jcirc: \"\\u0135\", Jcy: \"\\u0419\", jcy: \"\\u0439\", Jfr: \"\\u{1D50D}\", jfr: \"\\u{1D527}\", jmath: \"\\u0237\", Jopf: \"\\u{1D541}\", jopf: \"\\u{1D55B}\", Jscr: \"\\u{1D4A5}\", jscr: \"\\u{1D4BF}\", Jsercy: \"\\u0408\", jsercy: \"\\u0458\", Jukcy: \"\\u0404\", jukcy: \"\\u0454\", Kappa: \"\\u039A\", kappa: \"\\u03BA\", kappav: \"\\u03F0\", Kcedil: \"\\u0136\", kcedil: \"\\u0137\", Kcy: \"\\u041A\", kcy: \"\\u043A\", Kfr: \"\\u{1D50E}\", kfr: \"\\u{1D528}\", kgreen: \"\\u0138\", KHcy: \"\\u0425\", khcy: \"\\u0445\", KJcy: \"\\u040C\", kjcy: \"\\u045C\", Kopf: \"\\u{1D542}\", kopf: \"\\u{1D55C}\", Kscr: \"\\u{1D4A6}\", kscr: \"\\u{1D4C0}\", lAarr: \"\\u21DA\", Lacute: \"\\u0139\", lacute: \"\\u013A\", laemptyv: \"\\u29B4\", lagran: \"\\u2112\", Lambda: \"\\u039B\", lambda: \"\\u03BB\", lang: \"\\u27E8\", Lang: \"\\u27EA\", langd: \"\\u2991\", langle: \"\\u27E8\", lap: \"\\u2A85\", Laplacetrf: \"\\u2112\", laquo: \"\\xAB\", larrb: \"\\u21E4\", larrbfs: \"\\u291F\", larr: \"\\u2190\", Larr: \"\\u219E\", lArr: \"\\u21D0\", larrfs: \"\\u291D\", larrhk: \"\\u21A9\", larrlp: \"\\u21AB\", larrpl: \"\\u2939\", larrsim: \"\\u2973\", larrtl: \"\\u21A2\", latail: \"\\u2919\", lAtail: \"\\u291B\", lat: \"\\u2AAB\", late: \"\\u2AAD\", lates: \"\\u2AAD\\uFE00\", lbarr: \"\\u290C\", lBarr: \"\\u290E\", lbbrk: \"\\u2772\", lbrace: \"{\", lbrack: \"[\", lbrke: \"\\u298B\", lbrksld: \"\\u298F\", lbrkslu: \"\\u298D\", Lcaron: \"\\u013D\", lcaron: \"\\u013E\", Lcedil: \"\\u013B\", lcedil: \"\\u013C\", lceil: \"\\u2308\", lcub: \"{\", Lcy: \"\\u041B\", lcy: \"\\u043B\", ldca: \"\\u2936\", ldquo: \"\\u201C\", ldquor: \"\\u201E\", ldrdhar: \"\\u2967\", ldrushar: \"\\u294B\", ldsh: \"\\u21B2\", le: \"\\u2264\", lE: \"\\u2266\", LeftAngleBracket: \"\\u27E8\", LeftArrowBar: \"\\u21E4\", leftarrow: \"\\u2190\", LeftArrow: \"\\u2190\", Leftarrow: \"\\u21D0\", LeftArrowRightArrow: \"\\u21C6\", leftarrowtail: \"\\u21A2\", LeftCeiling: \"\\u2308\", LeftDoubleBracket: \"\\u27E6\", LeftDownTeeVector: \"\\u2961\", LeftDownVectorBar: \"\\u2959\", LeftDownVector: \"\\u21C3\", LeftFloor: \"\\u230A\", leftharpoondown: \"\\u21BD\", leftharpoonup: \"\\u21BC\", leftleftarrows: \"\\u21C7\", leftrightarrow: \"\\u2194\", LeftRightArrow: \"\\u2194\", Leftrightarrow: \"\\u21D4\", leftrightarrows: \"\\u21C6\", leftrightharpoons: \"\\u21CB\", leftrightsquigarrow: \"\\u21AD\", LeftRightVector: \"\\u294E\", LeftTeeArrow: \"\\u21A4\", LeftTee: \"\\u22A3\", LeftTeeVector: \"\\u295A\", leftthreetimes: \"\\u22CB\", LeftTriangleBar: \"\\u29CF\", LeftTriangle: \"\\u22B2\", LeftTriangleEqual: \"\\u22B4\", LeftUpDownVector: \"\\u2951\", LeftUpTeeVector: \"\\u2960\", LeftUpVectorBar: \"\\u2958\", LeftUpVector: \"\\u21BF\", LeftVectorBar: \"\\u2952\", LeftVector: \"\\u21BC\", lEg: \"\\u2A8B\", leg: \"\\u22DA\", leq: \"\\u2264\", leqq: \"\\u2266\", leqslant: \"\\u2A7D\", lescc: \"\\u2AA8\", les: \"\\u2A7D\", lesdot: \"\\u2A7F\", lesdoto: \"\\u2A81\", lesdotor: \"\\u2A83\", lesg: \"\\u22DA\\uFE00\", lesges: \"\\u2A93\", lessapprox: \"\\u2A85\", lessdot: \"\\u22D6\", lesseqgtr: \"\\u22DA\", lesseqqgtr: \"\\u2A8B\", LessEqualGreater: \"\\u22DA\", LessFullEqual: \"\\u2266\", LessGreater: \"\\u2276\", lessgtr: \"\\u2276\", LessLess: \"\\u2AA1\", lesssim: \"\\u2272\", LessSlantEqual: \"\\u2A7D\", LessTilde: \"\\u2272\", lfisht: \"\\u297C\", lfloor: \"\\u230A\", Lfr: \"\\u{1D50F}\", lfr: \"\\u{1D529}\", lg: \"\\u2276\", lgE: \"\\u2A91\", lHar: \"\\u2962\", lhard: \"\\u21BD\", lharu: \"\\u21BC\", lharul: \"\\u296A\", lhblk: \"\\u2584\", LJcy: \"\\u0409\", ljcy: \"\\u0459\", llarr: \"\\u21C7\", ll: \"\\u226A\", Ll: \"\\u22D8\", llcorner: \"\\u231E\", Lleftarrow: \"\\u21DA\", llhard: \"\\u296B\", lltri: \"\\u25FA\", Lmidot: \"\\u013F\", lmidot: \"\\u0140\", lmoustache: \"\\u23B0\", lmoust: \"\\u23B0\", lnap: \"\\u2A89\", lnapprox: \"\\u2A89\", lne: \"\\u2A87\", lnE: \"\\u2268\", lneq: \"\\u2A87\", lneqq: \"\\u2268\", lnsim: \"\\u22E6\", loang: \"\\u27EC\", loarr: \"\\u21FD\", lobrk: \"\\u27E6\", longleftarrow: \"\\u27F5\", LongLeftArrow: \"\\u27F5\", Longleftarrow: \"\\u27F8\", longleftrightarrow: \"\\u27F7\", LongLeftRightArrow: \"\\u27F7\", Longleftrightarrow: \"\\u27FA\", longmapsto: \"\\u27FC\", longrightarrow: \"\\u27F6\", LongRightArrow: \"\\u27F6\", Longrightarrow: \"\\u27F9\", looparrowleft: \"\\u21AB\", looparrowright: \"\\u21AC\", lopar: \"\\u2985\", Lopf: \"\\u{1D543}\", lopf: \"\\u{1D55D}\", loplus: \"\\u2A2D\", lotimes: \"\\u2A34\", lowast: \"\\u2217\", lowbar: \"_\", LowerLeftArrow: \"\\u2199\", LowerRightArrow: \"\\u2198\", loz: \"\\u25CA\", lozenge: \"\\u25CA\", lozf: \"\\u29EB\", lpar: \"(\", lparlt: \"\\u2993\", lrarr: \"\\u21C6\", lrcorner: \"\\u231F\", lrhar: \"\\u21CB\", lrhard: \"\\u296D\", lrm: \"\\u200E\", lrtri: \"\\u22BF\", lsaquo: \"\\u2039\", lscr: \"\\u{1D4C1}\", Lscr: \"\\u2112\", lsh: \"\\u21B0\", Lsh: \"\\u21B0\", lsim: \"\\u2272\", lsime: \"\\u2A8D\", lsimg: \"\\u2A8F\", lsqb: \"[\", lsquo: \"\\u2018\", lsquor: \"\\u201A\", Lstrok: \"\\u0141\", lstrok: \"\\u0142\", ltcc: \"\\u2AA6\", ltcir: \"\\u2A79\", lt: \"<\", LT: \"<\", Lt: \"\\u226A\", ltdot: \"\\u22D6\", lthree: \"\\u22CB\", ltimes: \"\\u22C9\", ltlarr: \"\\u2976\", ltquest: \"\\u2A7B\", ltri: \"\\u25C3\", ltrie: \"\\u22B4\", ltrif: \"\\u25C2\", ltrPar: \"\\u2996\", lurdshar: \"\\u294A\", luruhar: \"\\u2966\", lvertneqq: \"\\u2268\\uFE00\", lvnE: \"\\u2268\\uFE00\", macr: \"\\xAF\", male: \"\\u2642\", malt: \"\\u2720\", maltese: \"\\u2720\", Map: \"\\u2905\", map: \"\\u21A6\", mapsto: \"\\u21A6\", mapstodown: \"\\u21A7\", mapstoleft: \"\\u21A4\", mapstoup: \"\\u21A5\", marker: \"\\u25AE\", mcomma: \"\\u2A29\", Mcy: \"\\u041C\", mcy: \"\\u043C\", mdash: \"\\u2014\", mDDot: \"\\u223A\", measuredangle: \"\\u2221\", MediumSpace: \"\\u205F\", Mellintrf: \"\\u2133\", Mfr: \"\\u{1D510}\", mfr: \"\\u{1D52A}\", mho: \"\\u2127\", micro: \"\\xB5\", midast: \"*\", midcir: \"\\u2AF0\", mid: \"\\u2223\", middot: \"\\xB7\", minusb: \"\\u229F\", minus: \"\\u2212\", minusd: \"\\u2238\", minusdu: \"\\u2A2A\", MinusPlus: \"\\u2213\", mlcp: \"\\u2ADB\", mldr: \"\\u2026\", mnplus: \"\\u2213\", models: \"\\u22A7\", Mopf: \"\\u{1D544}\", mopf: \"\\u{1D55E}\", mp: \"\\u2213\", mscr: \"\\u{1D4C2}\", Mscr: \"\\u2133\", mstpos: \"\\u223E\", Mu: \"\\u039C\", mu: \"\\u03BC\", multimap: \"\\u22B8\", mumap: \"\\u22B8\", nabla: \"\\u2207\", Nacute: \"\\u0143\", nacute: \"\\u0144\", nang: \"\\u2220\\u20D2\", nap: \"\\u2249\", napE: \"\\u2A70\\u0338\", napid: \"\\u224B\\u0338\", napos: \"\\u0149\", napprox: \"\\u2249\", natural: \"\\u266E\", naturals: \"\\u2115\", natur: \"\\u266E\", nbsp: \"\\xA0\", nbump: \"\\u224E\\u0338\", nbumpe: \"\\u224F\\u0338\", ncap: \"\\u2A43\", Ncaron: \"\\u0147\", ncaron: \"\\u0148\", Ncedil: \"\\u0145\", ncedil: \"\\u0146\", ncong: \"\\u2247\", ncongdot: \"\\u2A6D\\u0338\", ncup: \"\\u2A42\", Ncy: \"\\u041D\", ncy: \"\\u043D\", ndash: \"\\u2013\", nearhk: \"\\u2924\", nearr: \"\\u2197\", neArr: \"\\u21D7\", nearrow: \"\\u2197\", ne: \"\\u2260\", nedot: \"\\u2250\\u0338\", NegativeMediumSpace: \"\\u200B\", NegativeThickSpace: \"\\u200B\", NegativeThinSpace: \"\\u200B\", NegativeVeryThinSpace: \"\\u200B\", nequiv: \"\\u2262\", nesear: \"\\u2928\", nesim: \"\\u2242\\u0338\", NestedGreaterGreater: \"\\u226B\", NestedLessLess: \"\\u226A\", NewLine: \"\\n\", nexist: \"\\u2204\", nexists: \"\\u2204\", Nfr: \"\\u{1D511}\", nfr: \"\\u{1D52B}\", ngE: \"\\u2267\\u0338\", nge: \"\\u2271\", ngeq: \"\\u2271\", ngeqq: \"\\u2267\\u0338\", ngeqslant: \"\\u2A7E\\u0338\", nges: \"\\u2A7E\\u0338\", nGg: \"\\u22D9\\u0338\", ngsim: \"\\u2275\", nGt: \"\\u226B\\u20D2\", ngt: \"\\u226F\", ngtr: \"\\u226F\", nGtv: \"\\u226B\\u0338\", nharr: \"\\u21AE\", nhArr: \"\\u21CE\", nhpar: \"\\u2AF2\", ni: \"\\u220B\", nis: \"\\u22FC\", nisd: \"\\u22FA\", niv: \"\\u220B\", NJcy: \"\\u040A\", njcy: \"\\u045A\", nlarr: \"\\u219A\", nlArr: \"\\u21CD\", nldr: \"\\u2025\", nlE: \"\\u2266\\u0338\", nle: \"\\u2270\", nleftarrow: \"\\u219A\", nLeftarrow: \"\\u21CD\", nleftrightarrow: \"\\u21AE\", nLeftrightarrow: \"\\u21CE\", nleq: \"\\u2270\", nleqq: \"\\u2266\\u0338\", nleqslant: \"\\u2A7D\\u0338\", nles: \"\\u2A7D\\u0338\", nless: \"\\u226E\", nLl: \"\\u22D8\\u0338\", nlsim: \"\\u2274\", nLt: \"\\u226A\\u20D2\", nlt: \"\\u226E\", nltri: \"\\u22EA\", nltrie: \"\\u22EC\", nLtv: \"\\u226A\\u0338\", nmid: \"\\u2224\", NoBreak: \"\\u2060\", NonBreakingSpace: \"\\xA0\", nopf: \"\\u{1D55F}\", Nopf: \"\\u2115\", Not: \"\\u2AEC\", not: \"\\xAC\", NotCongruent: \"\\u2262\", NotCupCap: \"\\u226D\", NotDoubleVerticalBar: \"\\u2226\", NotElement: \"\\u2209\", NotEqual: \"\\u2260\", NotEqualTilde: \"\\u2242\\u0338\", NotExists: \"\\u2204\", NotGreater: \"\\u226F\", NotGreaterEqual: \"\\u2271\", NotGreaterFullEqual: \"\\u2267\\u0338\", NotGreaterGreater: \"\\u226B\\u0338\", NotGreaterLess: \"\\u2279\", NotGreaterSlantEqual: \"\\u2A7E\\u0338\", NotGreaterTilde: \"\\u2275\", NotHumpDownHump: \"\\u224E\\u0338\", NotHumpEqual: \"\\u224F\\u0338\", notin: \"\\u2209\", notindot: \"\\u22F5\\u0338\", notinE: \"\\u22F9\\u0338\", notinva: \"\\u2209\", notinvb: \"\\u22F7\", notinvc: \"\\u22F6\", NotLeftTriangleBar: \"\\u29CF\\u0338\", NotLeftTriangle: \"\\u22EA\", NotLeftTriangleEqual: \"\\u22EC\", NotLess: \"\\u226E\", NotLessEqual: \"\\u2270\", NotLessGreater: \"\\u2278\", NotLessLess: \"\\u226A\\u0338\", NotLessSlantEqual: \"\\u2A7D\\u0338\", NotLessTilde: \"\\u2274\", NotNestedGreaterGreater: \"\\u2AA2\\u0338\", NotNestedLessLess: \"\\u2AA1\\u0338\", notni: \"\\u220C\", notniva: \"\\u220C\", notnivb: \"\\u22FE\", notnivc: \"\\u22FD\", NotPrecedes: \"\\u2280\", NotPrecedesEqual: \"\\u2AAF\\u0338\", NotPrecedesSlantEqual: \"\\u22E0\", NotReverseElement: \"\\u220C\", NotRightTriangleBar: \"\\u29D0\\u0338\", NotRightTriangle: \"\\u22EB\", NotRightTriangleEqual: \"\\u22ED\", NotSquareSubset: \"\\u228F\\u0338\", NotSquareSubsetEqual: \"\\u22E2\", NotSquareSuperset: \"\\u2290\\u0338\", NotSquareSupersetEqual: \"\\u22E3\", NotSubset: \"\\u2282\\u20D2\", NotSubsetEqual: \"\\u2288\", NotSucceeds: \"\\u2281\", NotSucceedsEqual: \"\\u2AB0\\u0338\", NotSucceedsSlantEqual: \"\\u22E1\", NotSucceedsTilde: \"\\u227F\\u0338\", NotSuperset: \"\\u2283\\u20D2\", NotSupersetEqual: \"\\u2289\", NotTilde: \"\\u2241\", NotTildeEqual: \"\\u2244\", NotTildeFullEqual: \"\\u2247\", NotTildeTilde: \"\\u2249\", NotVerticalBar: \"\\u2224\", nparallel: \"\\u2226\", npar: \"\\u2226\", nparsl: \"\\u2AFD\\u20E5\", npart: \"\\u2202\\u0338\", npolint: \"\\u2A14\", npr: \"\\u2280\", nprcue: \"\\u22E0\", nprec: \"\\u2280\", npreceq: \"\\u2AAF\\u0338\", npre: \"\\u2AAF\\u0338\", nrarrc: \"\\u2933\\u0338\", nrarr: \"\\u219B\", nrArr: \"\\u21CF\", nrarrw: \"\\u219D\\u0338\", nrightarrow: \"\\u219B\", nRightarrow: \"\\u21CF\", nrtri: \"\\u22EB\", nrtrie: \"\\u22ED\", nsc: \"\\u2281\", nsccue: \"\\u22E1\", nsce: \"\\u2AB0\\u0338\", Nscr: \"\\u{1D4A9}\", nscr: \"\\u{1D4C3}\", nshortmid: \"\\u2224\", nshortparallel: \"\\u2226\", nsim: \"\\u2241\", nsime: \"\\u2244\", nsimeq: \"\\u2244\", nsmid: \"\\u2224\", nspar: \"\\u2226\", nsqsube: \"\\u22E2\", nsqsupe: \"\\u22E3\", nsub: \"\\u2284\", nsubE: \"\\u2AC5\\u0338\", nsube: \"\\u2288\", nsubset: \"\\u2282\\u20D2\", nsubseteq: \"\\u2288\", nsubseteqq: \"\\u2AC5\\u0338\", nsucc: \"\\u2281\", nsucceq: \"\\u2AB0\\u0338\", nsup: \"\\u2285\", nsupE: \"\\u2AC6\\u0338\", nsupe: \"\\u2289\", nsupset: \"\\u2283\\u20D2\", nsupseteq: \"\\u2289\", nsupseteqq: \"\\u2AC6\\u0338\", ntgl: \"\\u2279\", Ntilde: \"\\xD1\", ntilde: \"\\xF1\", ntlg: \"\\u2278\", ntriangleleft: \"\\u22EA\", ntrianglelefteq: \"\\u22EC\", ntriangleright: \"\\u22EB\", ntrianglerighteq: \"\\u22ED\", Nu: \"\\u039D\", nu: \"\\u03BD\", num: \"#\", numero: \"\\u2116\", numsp: \"\\u2007\", nvap: \"\\u224D\\u20D2\", nvdash: \"\\u22AC\", nvDash: \"\\u22AD\", nVdash: \"\\u22AE\", nVDash: \"\\u22AF\", nvge: \"\\u2265\\u20D2\", nvgt: \">\\u20D2\", nvHarr: \"\\u2904\", nvinfin: \"\\u29DE\", nvlArr: \"\\u2902\", nvle: \"\\u2264\\u20D2\", nvlt: \"<\\u20D2\", nvltrie: \"\\u22B4\\u20D2\", nvrArr: \"\\u2903\", nvrtrie: \"\\u22B5\\u20D2\", nvsim: \"\\u223C\\u20D2\", nwarhk: \"\\u2923\", nwarr: \"\\u2196\", nwArr: \"\\u21D6\", nwarrow: \"\\u2196\", nwnear: \"\\u2927\", Oacute: \"\\xD3\", oacute: \"\\xF3\", oast: \"\\u229B\", Ocirc: \"\\xD4\", ocirc: \"\\xF4\", ocir: \"\\u229A\", Ocy: \"\\u041E\", ocy: \"\\u043E\", odash: \"\\u229D\", Odblac: \"\\u0150\", odblac: \"\\u0151\", odiv: \"\\u2A38\", odot: \"\\u2299\", odsold: \"\\u29BC\", OElig: \"\\u0152\", oelig: \"\\u0153\", ofcir: \"\\u29BF\", Ofr: \"\\u{1D512}\", ofr: \"\\u{1D52C}\", ogon: \"\\u02DB\", Ograve: \"\\xD2\", ograve: \"\\xF2\", ogt: \"\\u29C1\", ohbar: \"\\u29B5\", ohm: \"\\u03A9\", oint: \"\\u222E\", olarr: \"\\u21BA\", olcir: \"\\u29BE\", olcross: \"\\u29BB\", oline: \"\\u203E\", olt: \"\\u29C0\", Omacr: \"\\u014C\", omacr: \"\\u014D\", Omega: \"\\u03A9\", omega: \"\\u03C9\", Omicron: \"\\u039F\", omicron: \"\\u03BF\", omid: \"\\u29B6\", ominus: \"\\u2296\", Oopf: \"\\u{1D546}\", oopf: \"\\u{1D560}\", opar: \"\\u29B7\", OpenCurlyDoubleQuote: \"\\u201C\", OpenCurlyQuote: \"\\u2018\", operp: \"\\u29B9\", oplus: \"\\u2295\", orarr: \"\\u21BB\", Or: \"\\u2A54\", or: \"\\u2228\", ord: \"\\u2A5D\", order: \"\\u2134\", orderof: \"\\u2134\", ordf: \"\\xAA\", ordm: \"\\xBA\", origof: \"\\u22B6\", oror: \"\\u2A56\", orslope: \"\\u2A57\", orv: \"\\u2A5B\", oS: \"\\u24C8\", Oscr: \"\\u{1D4AA}\", oscr: \"\\u2134\", Oslash: \"\\xD8\", oslash: \"\\xF8\", osol: \"\\u2298\", Otilde: \"\\xD5\", otilde: \"\\xF5\", otimesas: \"\\u2A36\", Otimes: \"\\u2A37\", otimes: \"\\u2297\", Ouml: \"\\xD6\", ouml: \"\\xF6\", ovbar: \"\\u233D\", OverBar: \"\\u203E\", OverBrace: \"\\u23DE\", OverBracket: \"\\u23B4\", OverParenthesis: \"\\u23DC\", para: \"\\xB6\", parallel: \"\\u2225\", par: \"\\u2225\", parsim: \"\\u2AF3\", parsl: \"\\u2AFD\", part: \"\\u2202\", PartialD: \"\\u2202\", Pcy: \"\\u041F\", pcy: \"\\u043F\", percnt: \"%\", period: \".\", permil: \"\\u2030\", perp: \"\\u22A5\", pertenk: \"\\u2031\", Pfr: \"\\u{1D513}\", pfr: \"\\u{1D52D}\", Phi: \"\\u03A6\", phi: \"\\u03C6\", phiv: \"\\u03D5\", phmmat: \"\\u2133\", phone: \"\\u260E\", Pi: \"\\u03A0\", pi: \"\\u03C0\", pitchfork: \"\\u22D4\", piv: \"\\u03D6\", planck: \"\\u210F\", planckh: \"\\u210E\", plankv: \"\\u210F\", plusacir: \"\\u2A23\", plusb: \"\\u229E\", pluscir: \"\\u2A22\", plus: \"+\", plusdo: \"\\u2214\", plusdu: \"\\u2A25\", pluse: \"\\u2A72\", PlusMinus: \"\\xB1\", plusmn: \"\\xB1\", plussim: \"\\u2A26\", plustwo: \"\\u2A27\", pm: \"\\xB1\", Poincareplane: \"\\u210C\", pointint: \"\\u2A15\", popf: \"\\u{1D561}\", Popf: \"\\u2119\", pound: \"\\xA3\", prap: \"\\u2AB7\", Pr: \"\\u2ABB\", pr: \"\\u227A\", prcue: \"\\u227C\", precapprox: \"\\u2AB7\", prec: \"\\u227A\", preccurlyeq: \"\\u227C\", Precedes: \"\\u227A\", PrecedesEqual: \"\\u2AAF\", PrecedesSlantEqual: \"\\u227C\", PrecedesTilde: \"\\u227E\", preceq: \"\\u2AAF\", precnapprox: \"\\u2AB9\", precneqq: \"\\u2AB5\", precnsim: \"\\u22E8\", pre: \"\\u2AAF\", prE: \"\\u2AB3\", precsim: \"\\u227E\", prime: \"\\u2032\", Prime: \"\\u2033\", primes: \"\\u2119\", prnap: \"\\u2AB9\", prnE: \"\\u2AB5\", prnsim: \"\\u22E8\", prod: \"\\u220F\", Product: \"\\u220F\", profalar: \"\\u232E\", profline: \"\\u2312\", profsurf: \"\\u2313\", prop: \"\\u221D\", Proportional: \"\\u221D\", Proportion: \"\\u2237\", propto: \"\\u221D\", prsim: \"\\u227E\", prurel: \"\\u22B0\", Pscr: \"\\u{1D4AB}\", pscr: \"\\u{1D4C5}\", Psi: \"\\u03A8\", psi: \"\\u03C8\", puncsp: \"\\u2008\", Qfr: \"\\u{1D514}\", qfr: \"\\u{1D52E}\", qint: \"\\u2A0C\", qopf: \"\\u{1D562}\", Qopf: \"\\u211A\", qprime: \"\\u2057\", Qscr: \"\\u{1D4AC}\", qscr: \"\\u{1D4C6}\", quaternions: \"\\u210D\", quatint: \"\\u2A16\", quest: \"?\", questeq: \"\\u225F\", quot: '\"', QUOT: '\"', rAarr: \"\\u21DB\", race: \"\\u223D\\u0331\", Racute: \"\\u0154\", racute: \"\\u0155\", radic: \"\\u221A\", raemptyv: \"\\u29B3\", rang: \"\\u27E9\", Rang: \"\\u27EB\", rangd: \"\\u2992\", range: \"\\u29A5\", rangle: \"\\u27E9\", raquo: \"\\xBB\", rarrap: \"\\u2975\", rarrb: \"\\u21E5\", rarrbfs: \"\\u2920\", rarrc: \"\\u2933\", rarr: \"\\u2192\", Rarr: \"\\u21A0\", rArr: \"\\u21D2\", rarrfs: \"\\u291E\", rarrhk: \"\\u21AA\", rarrlp: \"\\u21AC\", rarrpl: \"\\u2945\", rarrsim: \"\\u2974\", Rarrtl: \"\\u2916\", rarrtl: \"\\u21A3\", rarrw: \"\\u219D\", ratail: \"\\u291A\", rAtail: \"\\u291C\", ratio: \"\\u2236\", rationals: \"\\u211A\", rbarr: \"\\u290D\", rBarr: \"\\u290F\", RBarr: \"\\u2910\", rbbrk: \"\\u2773\", rbrace: \"}\", rbrack: \"]\", rbrke: \"\\u298C\", rbrksld: \"\\u298E\", rbrkslu: \"\\u2990\", Rcaron: \"\\u0158\", rcaron: \"\\u0159\", Rcedil: \"\\u0156\", rcedil: \"\\u0157\", rceil: \"\\u2309\", rcub: \"}\", Rcy: \"\\u0420\", rcy: \"\\u0440\", rdca: \"\\u2937\", rdldhar: \"\\u2969\", rdquo: \"\\u201D\", rdquor: \"\\u201D\", rdsh: \"\\u21B3\", real: \"\\u211C\", realine: \"\\u211B\", realpart: \"\\u211C\", reals: \"\\u211D\", Re: \"\\u211C\", rect: \"\\u25AD\", reg: \"\\xAE\", REG: \"\\xAE\", ReverseElement: \"\\u220B\", ReverseEquilibrium: \"\\u21CB\", ReverseUpEquilibrium: \"\\u296F\", rfisht: \"\\u297D\", rfloor: \"\\u230B\", rfr: \"\\u{1D52F}\", Rfr: \"\\u211C\", rHar: \"\\u2964\", rhard: \"\\u21C1\", rharu: \"\\u21C0\", rharul: \"\\u296C\", Rho: \"\\u03A1\", rho: \"\\u03C1\", rhov: \"\\u03F1\", RightAngleBracket: \"\\u27E9\", RightArrowBar: \"\\u21E5\", rightarrow: \"\\u2192\", RightArrow: \"\\u2192\", Rightarrow: \"\\u21D2\", RightArrowLeftArrow: \"\\u21C4\", rightarrowtail: \"\\u21A3\", RightCeiling: \"\\u2309\", RightDoubleBracket: \"\\u27E7\", RightDownTeeVector: \"\\u295D\", RightDownVectorBar: \"\\u2955\", RightDownVector: \"\\u21C2\", RightFloor: \"\\u230B\", rightharpoondown: \"\\u21C1\", rightharpoonup: \"\\u21C0\", rightleftarrows: \"\\u21C4\", rightleftharpoons: \"\\u21CC\", rightrightarrows: \"\\u21C9\", rightsquigarrow: \"\\u219D\", RightTeeArrow: \"\\u21A6\", RightTee: \"\\u22A2\", RightTeeVector: \"\\u295B\", rightthreetimes: \"\\u22CC\", RightTriangleBar: \"\\u29D0\", RightTriangle: \"\\u22B3\", RightTriangleEqual: \"\\u22B5\", RightUpDownVector: \"\\u294F\", RightUpTeeVector: \"\\u295C\", RightUpVectorBar: \"\\u2954\", RightUpVector: \"\\u21BE\", RightVectorBar: \"\\u2953\", RightVector: \"\\u21C0\", ring: \"\\u02DA\", risingdotseq: \"\\u2253\", rlarr: \"\\u21C4\", rlhar: \"\\u21CC\", rlm: \"\\u200F\", rmoustache: \"\\u23B1\", rmoust: \"\\u23B1\", rnmid: \"\\u2AEE\", roang: \"\\u27ED\", roarr: \"\\u21FE\", robrk: \"\\u27E7\", ropar: \"\\u2986\", ropf: \"\\u{1D563}\", Ropf: \"\\u211D\", roplus: \"\\u2A2E\", rotimes: \"\\u2A35\", RoundImplies: \"\\u2970\", rpar: \")\", rpargt: \"\\u2994\", rppolint: \"\\u2A12\", rrarr: \"\\u21C9\", Rrightarrow: \"\\u21DB\", rsaquo: \"\\u203A\", rscr: \"\\u{1D4C7}\", Rscr: \"\\u211B\", rsh: \"\\u21B1\", Rsh: \"\\u21B1\", rsqb: \"]\", rsquo: \"\\u2019\", rsquor: \"\\u2019\", rthree: \"\\u22CC\", rtimes: \"\\u22CA\", rtri: \"\\u25B9\", rtrie: \"\\u22B5\", rtrif: \"\\u25B8\", rtriltri: \"\\u29CE\", RuleDelayed: \"\\u29F4\", ruluhar: \"\\u2968\", rx: \"\\u211E\", Sacute: \"\\u015A\", sacute: \"\\u015B\", sbquo: \"\\u201A\", scap: \"\\u2AB8\", Scaron: \"\\u0160\", scaron: \"\\u0161\", Sc: \"\\u2ABC\", sc: \"\\u227B\", sccue: \"\\u227D\", sce: \"\\u2AB0\", scE: \"\\u2AB4\", Scedil: \"\\u015E\", scedil: \"\\u015F\", Scirc: \"\\u015C\", scirc: \"\\u015D\", scnap: \"\\u2ABA\", scnE: \"\\u2AB6\", scnsim: \"\\u22E9\", scpolint: \"\\u2A13\", scsim: \"\\u227F\", Scy: \"\\u0421\", scy: \"\\u0441\", sdotb: \"\\u22A1\", sdot: \"\\u22C5\", sdote: \"\\u2A66\", searhk: \"\\u2925\", searr: \"\\u2198\", seArr: \"\\u21D8\", searrow: \"\\u2198\", sect: \"\\xA7\", semi: \";\", seswar: \"\\u2929\", setminus: \"\\u2216\", setmn: \"\\u2216\", sext: \"\\u2736\", Sfr: \"\\u{1D516}\", sfr: \"\\u{1D530}\", sfrown: \"\\u2322\", sharp: \"\\u266F\", SHCHcy: \"\\u0429\", shchcy: \"\\u0449\", SHcy: \"\\u0428\", shcy: \"\\u0448\", ShortDownArrow: \"\\u2193\", ShortLeftArrow: \"\\u2190\", shortmid: \"\\u2223\", shortparallel: \"\\u2225\", ShortRightArrow: \"\\u2192\", ShortUpArrow: \"\\u2191\", shy: \"\\xAD\", Sigma: \"\\u03A3\", sigma: \"\\u03C3\", sigmaf: \"\\u03C2\", sigmav: \"\\u03C2\", sim: \"\\u223C\", simdot: \"\\u2A6A\", sime: \"\\u2243\", simeq: \"\\u2243\", simg: \"\\u2A9E\", simgE: \"\\u2AA0\", siml: \"\\u2A9D\", simlE: \"\\u2A9F\", simne: \"\\u2246\", simplus: \"\\u2A24\", simrarr: \"\\u2972\", slarr: \"\\u2190\", SmallCircle: \"\\u2218\", smallsetminus: \"\\u2216\", smashp: \"\\u2A33\", smeparsl: \"\\u29E4\", smid: \"\\u2223\", smile: \"\\u2323\", smt: \"\\u2AAA\", smte: \"\\u2AAC\", smtes: \"\\u2AAC\\uFE00\", SOFTcy: \"\\u042C\", softcy: \"\\u044C\", solbar: \"\\u233F\", solb: \"\\u29C4\", sol: \"/\", Sopf: \"\\u{1D54A}\", sopf: \"\\u{1D564}\", spades: \"\\u2660\", spadesuit: \"\\u2660\", spar: \"\\u2225\", sqcap: \"\\u2293\", sqcaps: \"\\u2293\\uFE00\", sqcup: \"\\u2294\", sqcups: \"\\u2294\\uFE00\", Sqrt: \"\\u221A\", sqsub: \"\\u228F\", sqsube: \"\\u2291\", sqsubset: \"\\u228F\", sqsubseteq: \"\\u2291\", sqsup: \"\\u2290\", sqsupe: \"\\u2292\", sqsupset: \"\\u2290\", sqsupseteq: \"\\u2292\", square: \"\\u25A1\", Square: \"\\u25A1\", SquareIntersection: \"\\u2293\", SquareSubset: \"\\u228F\", SquareSubsetEqual: \"\\u2291\", SquareSuperset: \"\\u2290\", SquareSupersetEqual: \"\\u2292\", SquareUnion: \"\\u2294\", squarf: \"\\u25AA\", squ: \"\\u25A1\", squf: \"\\u25AA\", srarr: \"\\u2192\", Sscr: \"\\u{1D4AE}\", sscr: \"\\u{1D4C8}\", ssetmn: \"\\u2216\", ssmile: \"\\u2323\", sstarf: \"\\u22C6\", Star: \"\\u22C6\", star: \"\\u2606\", starf: \"\\u2605\", straightepsilon: \"\\u03F5\", straightphi: \"\\u03D5\", strns: \"\\xAF\", sub: \"\\u2282\", Sub: \"\\u22D0\", subdot: \"\\u2ABD\", subE: \"\\u2AC5\", sube: \"\\u2286\", subedot: \"\\u2AC3\", submult: \"\\u2AC1\", subnE: \"\\u2ACB\", subne: \"\\u228A\", subplus: \"\\u2ABF\", subrarr: \"\\u2979\", subset: \"\\u2282\", Subset: \"\\u22D0\", subseteq: \"\\u2286\", subseteqq: \"\\u2AC5\", SubsetEqual: \"\\u2286\", subsetneq: \"\\u228A\", subsetneqq: \"\\u2ACB\", subsim: \"\\u2AC7\", subsub: \"\\u2AD5\", subsup: \"\\u2AD3\", succapprox: \"\\u2AB8\", succ: \"\\u227B\", succcurlyeq: \"\\u227D\", Succeeds: \"\\u227B\", SucceedsEqual: \"\\u2AB0\", SucceedsSlantEqual: \"\\u227D\", SucceedsTilde: \"\\u227F\", succeq: \"\\u2AB0\", succnapprox: \"\\u2ABA\", succneqq: \"\\u2AB6\", succnsim: \"\\u22E9\", succsim: \"\\u227F\", SuchThat: \"\\u220B\", sum: \"\\u2211\", Sum: \"\\u2211\", sung: \"\\u266A\", sup1: \"\\xB9\", sup2: \"\\xB2\", sup3: \"\\xB3\", sup: \"\\u2283\", Sup: \"\\u22D1\", supdot: \"\\u2ABE\", supdsub: \"\\u2AD8\", supE: \"\\u2AC6\", supe: \"\\u2287\", supedot: \"\\u2AC4\", Superset: \"\\u2283\", SupersetEqual: \"\\u2287\", suphsol: \"\\u27C9\", suphsub: \"\\u2AD7\", suplarr: \"\\u297B\", supmult: \"\\u2AC2\", supnE: \"\\u2ACC\", supne: \"\\u228B\", supplus: \"\\u2AC0\", supset: \"\\u2283\", Supset: \"\\u22D1\", supseteq: \"\\u2287\", supseteqq: \"\\u2AC6\", supsetneq: \"\\u228B\", supsetneqq: \"\\u2ACC\", supsim: \"\\u2AC8\", supsub: \"\\u2AD4\", supsup: \"\\u2AD6\", swarhk: \"\\u2926\", swarr: \"\\u2199\", swArr: \"\\u21D9\", swarrow: \"\\u2199\", swnwar: \"\\u292A\", szlig: \"\\xDF\", Tab: \"\t\", target: \"\\u2316\", Tau: \"\\u03A4\", tau: \"\\u03C4\", tbrk: \"\\u23B4\", Tcaron: \"\\u0164\", tcaron: \"\\u0165\", Tcedil: \"\\u0162\", tcedil: \"\\u0163\", Tcy: \"\\u0422\", tcy: \"\\u0442\", tdot: \"\\u20DB\", telrec: \"\\u2315\", Tfr: \"\\u{1D517}\", tfr: \"\\u{1D531}\", there4: \"\\u2234\", therefore: \"\\u2234\", Therefore: \"\\u2234\", Theta: \"\\u0398\", theta: \"\\u03B8\", thetasym: \"\\u03D1\", thetav: \"\\u03D1\", thickapprox: \"\\u2248\", thicksim: \"\\u223C\", ThickSpace: \"\\u205F\\u200A\", ThinSpace: \"\\u2009\", thinsp: \"\\u2009\", thkap: \"\\u2248\", thksim: \"\\u223C\", THORN: \"\\xDE\", thorn: \"\\xFE\", tilde: \"\\u02DC\", Tilde: \"\\u223C\", TildeEqual: \"\\u2243\", TildeFullEqual: \"\\u2245\", TildeTilde: \"\\u2248\", timesbar: \"\\u2A31\", timesb: \"\\u22A0\", times: \"\\xD7\", timesd: \"\\u2A30\", tint: \"\\u222D\", toea: \"\\u2928\", topbot: \"\\u2336\", topcir: \"\\u2AF1\", top: \"\\u22A4\", Topf: \"\\u{1D54B}\", topf: \"\\u{1D565}\", topfork: \"\\u2ADA\", tosa: \"\\u2929\", tprime: \"\\u2034\", trade: \"\\u2122\", TRADE: \"\\u2122\", triangle: \"\\u25B5\", triangledown: \"\\u25BF\", triangleleft: \"\\u25C3\", trianglelefteq: \"\\u22B4\", triangleq: \"\\u225C\", triangleright: \"\\u25B9\", trianglerighteq: \"\\u22B5\", tridot: \"\\u25EC\", trie: \"\\u225C\", triminus: \"\\u2A3A\", TripleDot: \"\\u20DB\", triplus: \"\\u2A39\", trisb: \"\\u29CD\", tritime: \"\\u2A3B\", trpezium: \"\\u23E2\", Tscr: \"\\u{1D4AF}\", tscr: \"\\u{1D4C9}\", TScy: \"\\u0426\", tscy: \"\\u0446\", TSHcy: \"\\u040B\", tshcy: \"\\u045B\", Tstrok: \"\\u0166\", tstrok: \"\\u0167\", twixt: \"\\u226C\", twoheadleftarrow: \"\\u219E\", twoheadrightarrow: \"\\u21A0\", Uacute: \"\\xDA\", uacute: \"\\xFA\", uarr: \"\\u2191\", Uarr: \"\\u219F\", uArr: \"\\u21D1\", Uarrocir: \"\\u2949\", Ubrcy: \"\\u040E\", ubrcy: \"\\u045E\", Ubreve: \"\\u016C\", ubreve: \"\\u016D\", Ucirc: \"\\xDB\", ucirc: \"\\xFB\", Ucy: \"\\u0423\", ucy: \"\\u0443\", udarr: \"\\u21C5\", Udblac: \"\\u0170\", udblac: \"\\u0171\", udhar: \"\\u296E\", ufisht: \"\\u297E\", Ufr: \"\\u{1D518}\", ufr: \"\\u{1D532}\", Ugrave: \"\\xD9\", ugrave: \"\\xF9\", uHar: \"\\u2963\", uharl: \"\\u21BF\", uharr: \"\\u21BE\", uhblk: \"\\u2580\", ulcorn: \"\\u231C\", ulcorner: \"\\u231C\", ulcrop: \"\\u230F\", ultri: \"\\u25F8\", Umacr: \"\\u016A\", umacr: \"\\u016B\", uml: \"\\xA8\", UnderBar: \"_\", UnderBrace: \"\\u23DF\", UnderBracket: \"\\u23B5\", UnderParenthesis: \"\\u23DD\", Union: \"\\u22C3\", UnionPlus: \"\\u228E\", Uogon: \"\\u0172\", uogon: \"\\u0173\", Uopf: \"\\u{1D54C}\", uopf: \"\\u{1D566}\", UpArrowBar: \"\\u2912\", uparrow: \"\\u2191\", UpArrow: \"\\u2191\", Uparrow: \"\\u21D1\", UpArrowDownArrow: \"\\u21C5\", updownarrow: \"\\u2195\", UpDownArrow: \"\\u2195\", Updownarrow: \"\\u21D5\", UpEquilibrium: \"\\u296E\", upharpoonleft: \"\\u21BF\", upharpoonright: \"\\u21BE\", uplus: \"\\u228E\", UpperLeftArrow: \"\\u2196\", UpperRightArrow: \"\\u2197\", upsi: \"\\u03C5\", Upsi: \"\\u03D2\", upsih: \"\\u03D2\", Upsilon: \"\\u03A5\", upsilon: \"\\u03C5\", UpTeeArrow: \"\\u21A5\", UpTee: \"\\u22A5\", upuparrows: \"\\u21C8\", urcorn: \"\\u231D\", urcorner: \"\\u231D\", urcrop: \"\\u230E\", Uring: \"\\u016E\", uring: \"\\u016F\", urtri: \"\\u25F9\", Uscr: \"\\u{1D4B0}\", uscr: \"\\u{1D4CA}\", utdot: \"\\u22F0\", Utilde: \"\\u0168\", utilde: \"\\u0169\", utri: \"\\u25B5\", utrif: \"\\u25B4\", uuarr: \"\\u21C8\", Uuml: \"\\xDC\", uuml: \"\\xFC\", uwangle: \"\\u29A7\", vangrt: \"\\u299C\", varepsilon: \"\\u03F5\", varkappa: \"\\u03F0\", varnothing: \"\\u2205\", varphi: \"\\u03D5\", varpi: \"\\u03D6\", varpropto: \"\\u221D\", varr: \"\\u2195\", vArr: \"\\u21D5\", varrho: \"\\u03F1\", varsigma: \"\\u03C2\", varsubsetneq: \"\\u228A\\uFE00\", varsubsetneqq: \"\\u2ACB\\uFE00\", varsupsetneq: \"\\u228B\\uFE00\", varsupsetneqq: \"\\u2ACC\\uFE00\", vartheta: \"\\u03D1\", vartriangleleft: \"\\u22B2\", vartriangleright: \"\\u22B3\", vBar: \"\\u2AE8\", Vbar: \"\\u2AEB\", vBarv: \"\\u2AE9\", Vcy: \"\\u0412\", vcy: \"\\u0432\", vdash: \"\\u22A2\", vDash: \"\\u22A8\", Vdash: \"\\u22A9\", VDash: \"\\u22AB\", Vdashl: \"\\u2AE6\", veebar: \"\\u22BB\", vee: \"\\u2228\", Vee: \"\\u22C1\", veeeq: \"\\u225A\", vellip: \"\\u22EE\", verbar: \"|\", Verbar: \"\\u2016\", vert: \"|\", Vert: \"\\u2016\", VerticalBar: \"\\u2223\", VerticalLine: \"|\", VerticalSeparator: \"\\u2758\", VerticalTilde: \"\\u2240\", VeryThinSpace: \"\\u200A\", Vfr: \"\\u{1D519}\", vfr: \"\\u{1D533}\", vltri: \"\\u22B2\", vnsub: \"\\u2282\\u20D2\", vnsup: \"\\u2283\\u20D2\", Vopf: \"\\u{1D54D}\", vopf: \"\\u{1D567}\", vprop: \"\\u221D\", vrtri: \"\\u22B3\", Vscr: \"\\u{1D4B1}\", vscr: \"\\u{1D4CB}\", vsubnE: \"\\u2ACB\\uFE00\", vsubne: \"\\u228A\\uFE00\", vsupnE: \"\\u2ACC\\uFE00\", vsupne: \"\\u228B\\uFE00\", Vvdash: \"\\u22AA\", vzigzag: \"\\u299A\", Wcirc: \"\\u0174\", wcirc: \"\\u0175\", wedbar: \"\\u2A5F\", wedge: \"\\u2227\", Wedge: \"\\u22C0\", wedgeq: \"\\u2259\", weierp: \"\\u2118\", Wfr: \"\\u{1D51A}\", wfr: \"\\u{1D534}\", Wopf: \"\\u{1D54E}\", wopf: \"\\u{1D568}\", wp: \"\\u2118\", wr: \"\\u2240\", wreath: \"\\u2240\", Wscr: \"\\u{1D4B2}\", wscr: \"\\u{1D4CC}\", xcap: \"\\u22C2\", xcirc: \"\\u25EF\", xcup: \"\\u22C3\", xdtri: \"\\u25BD\", Xfr: \"\\u{1D51B}\", xfr: \"\\u{1D535}\", xharr: \"\\u27F7\", xhArr: \"\\u27FA\", Xi: \"\\u039E\", xi: \"\\u03BE\", xlarr: \"\\u27F5\", xlArr: \"\\u27F8\", xmap: \"\\u27FC\", xnis: \"\\u22FB\", xodot: \"\\u2A00\", Xopf: \"\\u{1D54F}\", xopf: \"\\u{1D569}\", xoplus: \"\\u2A01\", xotime: \"\\u2A02\", xrarr: \"\\u27F6\", xrArr: \"\\u27F9\", Xscr: \"\\u{1D4B3}\", xscr: \"\\u{1D4CD}\", xsqcup: \"\\u2A06\", xuplus: \"\\u2A04\", xutri: \"\\u25B3\", xvee: \"\\u22C1\", xwedge: \"\\u22C0\", Yacute: \"\\xDD\", yacute: \"\\xFD\", YAcy: \"\\u042F\", yacy: \"\\u044F\", Ycirc: \"\\u0176\", ycirc: \"\\u0177\", Ycy: \"\\u042B\", ycy: \"\\u044B\", yen: \"\\xA5\", Yfr: \"\\u{1D51C}\", yfr: \"\\u{1D536}\", YIcy: \"\\u0407\", yicy: \"\\u0457\", Yopf: \"\\u{1D550}\", yopf: \"\\u{1D56A}\", Yscr: \"\\u{1D4B4}\", yscr: \"\\u{1D4CE}\", YUcy: \"\\u042E\", yucy: \"\\u044E\", yuml: \"\\xFF\", Yuml: \"\\u0178\", Zacute: \"\\u0179\", zacute: \"\\u017A\", Zcaron: \"\\u017D\", zcaron: \"\\u017E\", Zcy: \"\\u0417\", zcy: \"\\u0437\", Zdot: \"\\u017B\", zdot: \"\\u017C\", zeetrf: \"\\u2128\", ZeroWidthSpace: \"\\u200B\", Zeta: \"\\u0396\", zeta: \"\\u03B6\", zfr: \"\\u{1D537}\", Zfr: \"\\u2128\", ZHcy: \"\\u0416\", zhcy: \"\\u0436\", zigrarr: \"\\u21DD\", zopf: \"\\u{1D56B}\", Zopf: \"\\u2124\", Zscr: \"\\u{1D4B5}\", zscr: \"\\u{1D4CF}\", zwj: \"\\u200D\", zwnj: \"\\u200C\" };\n  }\n});\n\n// node_modules/markdown-it/lib/common/entities.js\nvar require_entities2 = __commonJS({\n  \"node_modules/markdown-it/lib/common/entities.js\"(exports, module) {\n    \"use strict\";\n    module.exports = require_entities();\n  }\n});\n\n// node_modules/uc.micro/categories/P/regex.js\nvar require_regex = __commonJS({\n  \"node_modules/uc.micro/categories/P/regex.js\"(exports, module) {\n    module.exports = /[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4E\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDF55-\\uDF59]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/;\n  }\n});\n\n// node_modules/mdurl/encode.js\nvar require_encode = __commonJS({\n  \"node_modules/mdurl/encode.js\"(exports, module) {\n    \"use strict\";\n    var encodeCache = {};\n    function getEncodeCache(exclude) {\n      var i, ch, cache = encodeCache[exclude];\n      if (cache) {\n        return cache;\n      }\n      cache = encodeCache[exclude] = [];\n      for (i = 0; i < 128; i++) {\n        ch = String.fromCharCode(i);\n        if (/^[0-9a-z]$/i.test(ch)) {\n          cache.push(ch);\n        } else {\n          cache.push(\"%\" + (\"0\" + i.toString(16).toUpperCase()).slice(-2));\n        }\n      }\n      for (i = 0; i < exclude.length; i++) {\n        cache[exclude.charCodeAt(i)] = exclude[i];\n      }\n      return cache;\n    }\n    function encode(string, exclude, keepEscaped) {\n      var i, l, code2, nextCode, cache, result = \"\";\n      if (typeof exclude !== \"string\") {\n        keepEscaped = exclude;\n        exclude = encode.defaultChars;\n      }\n      if (typeof keepEscaped === \"undefined\") {\n        keepEscaped = true;\n      }\n      cache = getEncodeCache(exclude);\n      for (i = 0, l = string.length; i < l; i++) {\n        code2 = string.charCodeAt(i);\n        if (keepEscaped && code2 === 37 && i + 2 < l) {\n          if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n            result += string.slice(i, i + 3);\n            i += 2;\n            continue;\n          }\n        }\n        if (code2 < 128) {\n          result += cache[code2];\n          continue;\n        }\n        if (code2 >= 55296 && code2 <= 57343) {\n          if (code2 >= 55296 && code2 <= 56319 && i + 1 < l) {\n            nextCode = string.charCodeAt(i + 1);\n            if (nextCode >= 56320 && nextCode <= 57343) {\n              result += encodeURIComponent(string[i] + string[i + 1]);\n              i++;\n              continue;\n            }\n          }\n          result += \"%EF%BF%BD\";\n          continue;\n        }\n        result += encodeURIComponent(string[i]);\n      }\n      return result;\n    }\n    encode.defaultChars = \";/?:@&=+$,-_.!~*'()#\";\n    encode.componentChars = \"-_.!~*'()\";\n    module.exports = encode;\n  }\n});\n\n// node_modules/mdurl/decode.js\nvar require_decode = __commonJS({\n  \"node_modules/mdurl/decode.js\"(exports, module) {\n    \"use strict\";\n    var decodeCache = {};\n    function getDecodeCache(exclude) {\n      var i, ch, cache = decodeCache[exclude];\n      if (cache) {\n        return cache;\n      }\n      cache = decodeCache[exclude] = [];\n      for (i = 0; i < 128; i++) {\n        ch = String.fromCharCode(i);\n        cache.push(ch);\n      }\n      for (i = 0; i < exclude.length; i++) {\n        ch = exclude.charCodeAt(i);\n        cache[ch] = \"%\" + (\"0\" + ch.toString(16).toUpperCase()).slice(-2);\n      }\n      return cache;\n    }\n    function decode(string, exclude) {\n      var cache;\n      if (typeof exclude !== \"string\") {\n        exclude = decode.defaultChars;\n      }\n      cache = getDecodeCache(exclude);\n      return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n        var i, l, b1, b2, b3, b4, chr, result = \"\";\n        for (i = 0, l = seq.length; i < l; i += 3) {\n          b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n          if (b1 < 128) {\n            result += cache[b1];\n            continue;\n          }\n          if ((b1 & 224) === 192 && i + 3 < l) {\n            b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n            if ((b2 & 192) === 128) {\n              chr = b1 << 6 & 1984 | b2 & 63;\n              if (chr < 128) {\n                result += \"\\uFFFD\\uFFFD\";\n              } else {\n                result += String.fromCharCode(chr);\n              }\n              i += 3;\n              continue;\n            }\n          }\n          if ((b1 & 240) === 224 && i + 6 < l) {\n            b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n            b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n            if ((b2 & 192) === 128 && (b3 & 192) === 128) {\n              chr = b1 << 12 & 61440 | b2 << 6 & 4032 | b3 & 63;\n              if (chr < 2048 || chr >= 55296 && chr <= 57343) {\n                result += \"\\uFFFD\\uFFFD\\uFFFD\";\n              } else {\n                result += String.fromCharCode(chr);\n              }\n              i += 6;\n              continue;\n            }\n          }\n          if ((b1 & 248) === 240 && i + 9 < l) {\n            b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n            b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n            b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n            if ((b2 & 192) === 128 && (b3 & 192) === 128 && (b4 & 192) === 128) {\n              chr = b1 << 18 & 1835008 | b2 << 12 & 258048 | b3 << 6 & 4032 | b4 & 63;\n              if (chr < 65536 || chr > 1114111) {\n                result += \"\\uFFFD\\uFFFD\\uFFFD\\uFFFD\";\n              } else {\n                chr -= 65536;\n                result += String.fromCharCode(55296 + (chr >> 10), 56320 + (chr & 1023));\n              }\n              i += 9;\n              continue;\n            }\n          }\n          result += \"\\uFFFD\";\n        }\n        return result;\n      });\n    }\n    decode.defaultChars = \";/?:@&=+$,#\";\n    decode.componentChars = \"\";\n    module.exports = decode;\n  }\n});\n\n// node_modules/mdurl/format.js\nvar require_format = __commonJS({\n  \"node_modules/mdurl/format.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function format2(url) {\n      var result = \"\";\n      result += url.protocol || \"\";\n      result += url.slashes ? \"//\" : \"\";\n      result += url.auth ? url.auth + \"@\" : \"\";\n      if (url.hostname && url.hostname.indexOf(\":\") !== -1) {\n        result += \"[\" + url.hostname + \"]\";\n      } else {\n        result += url.hostname || \"\";\n      }\n      result += url.port ? \":\" + url.port : \"\";\n      result += url.pathname || \"\";\n      result += url.search || \"\";\n      result += url.hash || \"\";\n      return result;\n    };\n  }\n});\n\n// node_modules/mdurl/parse.js\nvar require_parse = __commonJS({\n  \"node_modules/mdurl/parse.js\"(exports, module) {\n    \"use strict\";\n    function Url() {\n      this.protocol = null;\n      this.slashes = null;\n      this.auth = null;\n      this.port = null;\n      this.hostname = null;\n      this.hash = null;\n      this.search = null;\n      this.pathname = null;\n    }\n    var protocolPattern = /^([a-z0-9.+-]+:)/i;\n    var portPattern = /:[0-9]*$/;\n    var simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/;\n    var delims = [\"<\", \">\", '\"', \"`\", \" \", \"\\r\", \"\\n\", \"\t\"];\n    var unwise = [\"{\", \"}\", \"|\", \"\\\\\", \"^\", \"`\"].concat(delims);\n    var autoEscape = [\"'\"].concat(unwise);\n    var nonHostChars = [\"%\", \"/\", \"?\", \";\", \"#\"].concat(autoEscape);\n    var hostEndingChars = [\"/\", \"?\", \"#\"];\n    var hostnameMaxLen = 255;\n    var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;\n    var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;\n    var hostlessProtocol = {\n      \"javascript\": true,\n      \"javascript:\": true\n    };\n    var slashedProtocol = {\n      \"http\": true,\n      \"https\": true,\n      \"ftp\": true,\n      \"gopher\": true,\n      \"file\": true,\n      \"http:\": true,\n      \"https:\": true,\n      \"ftp:\": true,\n      \"gopher:\": true,\n      \"file:\": true\n    };\n    function urlParse(url, slashesDenoteHost) {\n      if (url && url instanceof Url) {\n        return url;\n      }\n      var u = new Url();\n      u.parse(url, slashesDenoteHost);\n      return u;\n    }\n    Url.prototype.parse = function(url, slashesDenoteHost) {\n      var i, l, lowerProto, hec, slashes, rest = url;\n      rest = rest.trim();\n      if (!slashesDenoteHost && url.split(\"#\").length === 1) {\n        var simplePath = simplePathPattern.exec(rest);\n        if (simplePath) {\n          this.pathname = simplePath[1];\n          if (simplePath[2]) {\n            this.search = simplePath[2];\n          }\n          return this;\n        }\n      }\n      var proto = protocolPattern.exec(rest);\n      if (proto) {\n        proto = proto[0];\n        lowerProto = proto.toLowerCase();\n        this.protocol = proto;\n        rest = rest.substr(proto.length);\n      }\n      if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n        slashes = rest.substr(0, 2) === \"//\";\n        if (slashes && !(proto && hostlessProtocol[proto])) {\n          rest = rest.substr(2);\n          this.slashes = true;\n        }\n      }\n      if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {\n        var hostEnd = -1;\n        for (i = 0; i < hostEndingChars.length; i++) {\n          hec = rest.indexOf(hostEndingChars[i]);\n          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n            hostEnd = hec;\n          }\n        }\n        var auth, atSign;\n        if (hostEnd === -1) {\n          atSign = rest.lastIndexOf(\"@\");\n        } else {\n          atSign = rest.lastIndexOf(\"@\", hostEnd);\n        }\n        if (atSign !== -1) {\n          auth = rest.slice(0, atSign);\n          rest = rest.slice(atSign + 1);\n          this.auth = auth;\n        }\n        hostEnd = -1;\n        for (i = 0; i < nonHostChars.length; i++) {\n          hec = rest.indexOf(nonHostChars[i]);\n          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n            hostEnd = hec;\n          }\n        }\n        if (hostEnd === -1) {\n          hostEnd = rest.length;\n        }\n        if (rest[hostEnd - 1] === \":\") {\n          hostEnd--;\n        }\n        var host = rest.slice(0, hostEnd);\n        rest = rest.slice(hostEnd);\n        this.parseHost(host);\n        this.hostname = this.hostname || \"\";\n        var ipv6Hostname = this.hostname[0] === \"[\" && this.hostname[this.hostname.length - 1] === \"]\";\n        if (!ipv6Hostname) {\n          var hostparts = this.hostname.split(/\\./);\n          for (i = 0, l = hostparts.length; i < l; i++) {\n            var part = hostparts[i];\n            if (!part) {\n              continue;\n            }\n            if (!part.match(hostnamePartPattern)) {\n              var newpart = \"\";\n              for (var j = 0, k = part.length; j < k; j++) {\n                if (part.charCodeAt(j) > 127) {\n                  newpart += \"x\";\n                } else {\n                  newpart += part[j];\n                }\n              }\n              if (!newpart.match(hostnamePartPattern)) {\n                var validParts = hostparts.slice(0, i);\n                var notHost = hostparts.slice(i + 1);\n                var bit = part.match(hostnamePartStart);\n                if (bit) {\n                  validParts.push(bit[1]);\n                  notHost.unshift(bit[2]);\n                }\n                if (notHost.length) {\n                  rest = notHost.join(\".\") + rest;\n                }\n                this.hostname = validParts.join(\".\");\n                break;\n              }\n            }\n          }\n        }\n        if (this.hostname.length > hostnameMaxLen) {\n          this.hostname = \"\";\n        }\n        if (ipv6Hostname) {\n          this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n        }\n      }\n      var hash = rest.indexOf(\"#\");\n      if (hash !== -1) {\n        this.hash = rest.substr(hash);\n        rest = rest.slice(0, hash);\n      }\n      var qm = rest.indexOf(\"?\");\n      if (qm !== -1) {\n        this.search = rest.substr(qm);\n        rest = rest.slice(0, qm);\n      }\n      if (rest) {\n        this.pathname = rest;\n      }\n      if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\n        this.pathname = \"\";\n      }\n      return this;\n    };\n    Url.prototype.parseHost = function(host) {\n      var port = portPattern.exec(host);\n      if (port) {\n        port = port[0];\n        if (port !== \":\") {\n          this.port = port.substr(1);\n        }\n        host = host.substr(0, host.length - port.length);\n      }\n      if (host) {\n        this.hostname = host;\n      }\n    };\n    module.exports = urlParse;\n  }\n});\n\n// node_modules/mdurl/index.js\nvar require_mdurl = __commonJS({\n  \"node_modules/mdurl/index.js\"(exports, module) {\n    \"use strict\";\n    module.exports.encode = require_encode();\n    module.exports.decode = require_decode();\n    module.exports.format = require_format();\n    module.exports.parse = require_parse();\n  }\n});\n\n// node_modules/uc.micro/properties/Any/regex.js\nvar require_regex2 = __commonJS({\n  \"node_modules/uc.micro/properties/Any/regex.js\"(exports, module) {\n    module.exports = /[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n  }\n});\n\n// node_modules/uc.micro/categories/Cc/regex.js\nvar require_regex3 = __commonJS({\n  \"node_modules/uc.micro/categories/Cc/regex.js\"(exports, module) {\n    module.exports = /[\\0-\\x1F\\x7F-\\x9F]/;\n  }\n});\n\n// node_modules/uc.micro/categories/Cf/regex.js\nvar require_regex4 = __commonJS({\n  \"node_modules/uc.micro/categories/Cf/regex.js\"(exports, module) {\n    module.exports = /[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/;\n  }\n});\n\n// node_modules/uc.micro/categories/Z/regex.js\nvar require_regex5 = __commonJS({\n  \"node_modules/uc.micro/categories/Z/regex.js\"(exports, module) {\n    module.exports = /[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/;\n  }\n});\n\n// node_modules/uc.micro/index.js\nvar require_uc = __commonJS({\n  \"node_modules/uc.micro/index.js\"(exports) {\n    \"use strict\";\n    exports.Any = require_regex2();\n    exports.Cc = require_regex3();\n    exports.Cf = require_regex4();\n    exports.P = require_regex();\n    exports.Z = require_regex5();\n  }\n});\n\n// node_modules/markdown-it/lib/common/utils.js\nvar require_utils = __commonJS({\n  \"node_modules/markdown-it/lib/common/utils.js\"(exports) {\n    \"use strict\";\n    function _class(obj) {\n      return Object.prototype.toString.call(obj);\n    }\n    function isString(obj) {\n      return _class(obj) === \"[object String]\";\n    }\n    var _hasOwnProperty = Object.prototype.hasOwnProperty;\n    function has(object, key) {\n      return _hasOwnProperty.call(object, key);\n    }\n    function assign(obj) {\n      var sources = Array.prototype.slice.call(arguments, 1);\n      sources.forEach(function(source) {\n        if (!source) {\n          return;\n        }\n        if (typeof source !== \"object\") {\n          throw new TypeError(source + \"must be object\");\n        }\n        Object.keys(source).forEach(function(key) {\n          obj[key] = source[key];\n        });\n      });\n      return obj;\n    }\n    function arrayReplaceAt(src, pos, newElements) {\n      return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n    }\n    function isValidEntityCode(c) {\n      if (c >= 55296 && c <= 57343) {\n        return false;\n      }\n      if (c >= 64976 && c <= 65007) {\n        return false;\n      }\n      if ((c & 65535) === 65535 || (c & 65535) === 65534) {\n        return false;\n      }\n      if (c >= 0 && c <= 8) {\n        return false;\n      }\n      if (c === 11) {\n        return false;\n      }\n      if (c >= 14 && c <= 31) {\n        return false;\n      }\n      if (c >= 127 && c <= 159) {\n        return false;\n      }\n      if (c > 1114111) {\n        return false;\n      }\n      return true;\n    }\n    function fromCodePoint(c) {\n      if (c > 65535) {\n        c -= 65536;\n        var surrogate1 = 55296 + (c >> 10), surrogate2 = 56320 + (c & 1023);\n        return String.fromCharCode(surrogate1, surrogate2);\n      }\n      return String.fromCharCode(c);\n    }\n    var UNESCAPE_MD_RE = /\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~])/g;\n    var ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;\n    var UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + \"|\" + ENTITY_RE.source, \"gi\");\n    var DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;\n    var entities = require_entities2();\n    function replaceEntityPattern(match, name) {\n      var code2 = 0;\n      if (has(entities, name)) {\n        return entities[name];\n      }\n      if (name.charCodeAt(0) === 35 && DIGITAL_ENTITY_TEST_RE.test(name)) {\n        code2 = name[1].toLowerCase() === \"x\" ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n        if (isValidEntityCode(code2)) {\n          return fromCodePoint(code2);\n        }\n      }\n      return match;\n    }\n    function unescapeMd(str) {\n      if (str.indexOf(\"\\\\\") < 0) {\n        return str;\n      }\n      return str.replace(UNESCAPE_MD_RE, \"$1\");\n    }\n    function unescapeAll(str) {\n      if (str.indexOf(\"\\\\\") < 0 && str.indexOf(\"&\") < 0) {\n        return str;\n      }\n      return str.replace(UNESCAPE_ALL_RE, function(match, escaped, entity) {\n        if (escaped) {\n          return escaped;\n        }\n        return replaceEntityPattern(match, entity);\n      });\n    }\n    var HTML_ESCAPE_TEST_RE = /[&<>\"]/;\n    var HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\n    var HTML_REPLACEMENTS = {\n      \"&\": \"&amp;\",\n      \"<\": \"&lt;\",\n      \">\": \"&gt;\",\n      '\"': \"&quot;\"\n    };\n    function replaceUnsafeChar(ch) {\n      return HTML_REPLACEMENTS[ch];\n    }\n    function escapeHtml2(str) {\n      if (HTML_ESCAPE_TEST_RE.test(str)) {\n        return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n      }\n      return str;\n    }\n    var REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\n    function escapeRE(str) {\n      return str.replace(REGEXP_ESCAPE_RE, \"\\\\$&\");\n    }\n    function isSpace(code2) {\n      switch (code2) {\n        case 9:\n        case 32:\n          return true;\n      }\n      return false;\n    }\n    function isWhiteSpace(code2) {\n      if (code2 >= 8192 && code2 <= 8202) {\n        return true;\n      }\n      switch (code2) {\n        case 9:\n        case 10:\n        case 11:\n        case 12:\n        case 13:\n        case 32:\n        case 160:\n        case 5760:\n        case 8239:\n        case 8287:\n        case 12288:\n          return true;\n      }\n      return false;\n    }\n    var UNICODE_PUNCT_RE = require_regex();\n    function isPunctChar(ch) {\n      return UNICODE_PUNCT_RE.test(ch);\n    }\n    function isMdAsciiPunct(ch) {\n      switch (ch) {\n        case 33:\n        case 34:\n        case 35:\n        case 36:\n        case 37:\n        case 38:\n        case 39:\n        case 40:\n        case 41:\n        case 42:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 58:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 63:\n        case 64:\n        case 91:\n        case 92:\n        case 93:\n        case 94:\n        case 95:\n        case 96:\n        case 123:\n        case 124:\n        case 125:\n        case 126:\n          return true;\n        default:\n          return false;\n      }\n    }\n    function normalizeReference(str) {\n      str = str.trim().replace(/\\s+/g, \" \");\n      if (\"\\u1E9E\".toLowerCase() === \"\\u1E7E\") {\n        str = str.replace(/ẞ/g, \"\\xDF\");\n      }\n      return str.toLowerCase().toUpperCase();\n    }\n    exports.lib = {};\n    exports.lib.mdurl = require_mdurl();\n    exports.lib.ucmicro = require_uc();\n    exports.assign = assign;\n    exports.isString = isString;\n    exports.has = has;\n    exports.unescapeMd = unescapeMd;\n    exports.unescapeAll = unescapeAll;\n    exports.isValidEntityCode = isValidEntityCode;\n    exports.fromCodePoint = fromCodePoint;\n    exports.escapeHtml = escapeHtml2;\n    exports.arrayReplaceAt = arrayReplaceAt;\n    exports.isSpace = isSpace;\n    exports.isWhiteSpace = isWhiteSpace;\n    exports.isMdAsciiPunct = isMdAsciiPunct;\n    exports.isPunctChar = isPunctChar;\n    exports.escapeRE = escapeRE;\n    exports.normalizeReference = normalizeReference;\n  }\n});\n\n// node_modules/markdown-it/lib/helpers/parse_link_label.js\nvar require_parse_link_label = __commonJS({\n  \"node_modules/markdown-it/lib/helpers/parse_link_label.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function parseLinkLabel(state, start, disableNested) {\n      var level, found, marker, prevPos, labelEnd = -1, max2 = state.posMax, oldPos = state.pos;\n      state.pos = start + 1;\n      level = 1;\n      while (state.pos < max2) {\n        marker = state.src.charCodeAt(state.pos);\n        if (marker === 93) {\n          level--;\n          if (level === 0) {\n            found = true;\n            break;\n          }\n        }\n        prevPos = state.pos;\n        state.md.inline.skipToken(state);\n        if (marker === 91) {\n          if (prevPos === state.pos - 1) {\n            level++;\n          } else if (disableNested) {\n            state.pos = oldPos;\n            return -1;\n          }\n        }\n      }\n      if (found) {\n        labelEnd = state.pos;\n      }\n      state.pos = oldPos;\n      return labelEnd;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/helpers/parse_link_destination.js\nvar require_parse_link_destination = __commonJS({\n  \"node_modules/markdown-it/lib/helpers/parse_link_destination.js\"(exports, module) {\n    \"use strict\";\n    var unescapeAll = require_utils().unescapeAll;\n    module.exports = function parseLinkDestination(str, pos, max2) {\n      var code2, level, lines = 0, start = pos, result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: \"\"\n      };\n      if (str.charCodeAt(pos) === 60) {\n        pos++;\n        while (pos < max2) {\n          code2 = str.charCodeAt(pos);\n          if (code2 === 10) {\n            return result;\n          }\n          if (code2 === 60) {\n            return result;\n          }\n          if (code2 === 62) {\n            result.pos = pos + 1;\n            result.str = unescapeAll(str.slice(start + 1, pos));\n            result.ok = true;\n            return result;\n          }\n          if (code2 === 92 && pos + 1 < max2) {\n            pos += 2;\n            continue;\n          }\n          pos++;\n        }\n        return result;\n      }\n      level = 0;\n      while (pos < max2) {\n        code2 = str.charCodeAt(pos);\n        if (code2 === 32) {\n          break;\n        }\n        if (code2 < 32 || code2 === 127) {\n          break;\n        }\n        if (code2 === 92 && pos + 1 < max2) {\n          if (str.charCodeAt(pos + 1) === 32) {\n            break;\n          }\n          pos += 2;\n          continue;\n        }\n        if (code2 === 40) {\n          level++;\n          if (level > 32) {\n            return result;\n          }\n        }\n        if (code2 === 41) {\n          if (level === 0) {\n            break;\n          }\n          level--;\n        }\n        pos++;\n      }\n      if (start === pos) {\n        return result;\n      }\n      if (level !== 0) {\n        return result;\n      }\n      result.str = unescapeAll(str.slice(start, pos));\n      result.lines = lines;\n      result.pos = pos;\n      result.ok = true;\n      return result;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/helpers/parse_link_title.js\nvar require_parse_link_title = __commonJS({\n  \"node_modules/markdown-it/lib/helpers/parse_link_title.js\"(exports, module) {\n    \"use strict\";\n    var unescapeAll = require_utils().unescapeAll;\n    module.exports = function parseLinkTitle(str, pos, max2) {\n      var code2, marker, lines = 0, start = pos, result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: \"\"\n      };\n      if (pos >= max2) {\n        return result;\n      }\n      marker = str.charCodeAt(pos);\n      if (marker !== 34 && marker !== 39 && marker !== 40) {\n        return result;\n      }\n      pos++;\n      if (marker === 40) {\n        marker = 41;\n      }\n      while (pos < max2) {\n        code2 = str.charCodeAt(pos);\n        if (code2 === marker) {\n          result.pos = pos + 1;\n          result.lines = lines;\n          result.str = unescapeAll(str.slice(start + 1, pos));\n          result.ok = true;\n          return result;\n        } else if (code2 === 40 && marker === 41) {\n          return result;\n        } else if (code2 === 10) {\n          lines++;\n        } else if (code2 === 92 && pos + 1 < max2) {\n          pos++;\n          if (str.charCodeAt(pos) === 10) {\n            lines++;\n          }\n        }\n        pos++;\n      }\n      return result;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/helpers/index.js\nvar require_helpers = __commonJS({\n  \"node_modules/markdown-it/lib/helpers/index.js\"(exports) {\n    \"use strict\";\n    exports.parseLinkLabel = require_parse_link_label();\n    exports.parseLinkDestination = require_parse_link_destination();\n    exports.parseLinkTitle = require_parse_link_title();\n  }\n});\n\n// node_modules/markdown-it/lib/renderer.js\nvar require_renderer = __commonJS({\n  \"node_modules/markdown-it/lib/renderer.js\"(exports, module) {\n    \"use strict\";\n    var assign = require_utils().assign;\n    var unescapeAll = require_utils().unescapeAll;\n    var escapeHtml2 = require_utils().escapeHtml;\n    var default_rules = {};\n    default_rules.code_inline = function(tokens, idx, options, env, slf) {\n      var token = tokens[idx];\n      return \"<code\" + slf.renderAttrs(token) + \">\" + escapeHtml2(tokens[idx].content) + \"</code>\";\n    };\n    default_rules.code_block = function(tokens, idx, options, env, slf) {\n      var token = tokens[idx];\n      return \"<pre\" + slf.renderAttrs(token) + \"><code>\" + escapeHtml2(tokens[idx].content) + \"</code></pre>\\n\";\n    };\n    default_rules.fence = function(tokens, idx, options, env, slf) {\n      var token = tokens[idx], info = token.info ? unescapeAll(token.info).trim() : \"\", langName = \"\", langAttrs = \"\", highlighted, i, arr, tmpAttrs, tmpToken;\n      if (info) {\n        arr = info.split(/(\\s+)/g);\n        langName = arr[0];\n        langAttrs = arr.slice(2).join(\"\");\n      }\n      if (options.highlight) {\n        highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml2(token.content);\n      } else {\n        highlighted = escapeHtml2(token.content);\n      }\n      if (highlighted.indexOf(\"<pre\") === 0) {\n        return highlighted + \"\\n\";\n      }\n      if (info) {\n        i = token.attrIndex(\"class\");\n        tmpAttrs = token.attrs ? token.attrs.slice() : [];\n        if (i < 0) {\n          tmpAttrs.push([\"class\", options.langPrefix + langName]);\n        } else {\n          tmpAttrs[i] = tmpAttrs[i].slice();\n          tmpAttrs[i][1] += \" \" + options.langPrefix + langName;\n        }\n        tmpToken = {\n          attrs: tmpAttrs\n        };\n        return \"<pre><code\" + slf.renderAttrs(tmpToken) + \">\" + highlighted + \"</code></pre>\\n\";\n      }\n      return \"<pre><code\" + slf.renderAttrs(token) + \">\" + highlighted + \"</code></pre>\\n\";\n    };\n    default_rules.image = function(tokens, idx, options, env, slf) {\n      var token = tokens[idx];\n      token.attrs[token.attrIndex(\"alt\")][1] = slf.renderInlineAsText(token.children, options, env);\n      return slf.renderToken(tokens, idx, options);\n    };\n    default_rules.hardbreak = function(tokens, idx, options) {\n      return options.xhtmlOut ? \"<br />\\n\" : \"<br>\\n\";\n    };\n    default_rules.softbreak = function(tokens, idx, options) {\n      return options.breaks ? options.xhtmlOut ? \"<br />\\n\" : \"<br>\\n\" : \"\\n\";\n    };\n    default_rules.text = function(tokens, idx) {\n      return escapeHtml2(tokens[idx].content);\n    };\n    default_rules.html_block = function(tokens, idx) {\n      return tokens[idx].content;\n    };\n    default_rules.html_inline = function(tokens, idx) {\n      return tokens[idx].content;\n    };\n    function Renderer() {\n      this.rules = assign({}, default_rules);\n    }\n    Renderer.prototype.renderAttrs = function renderAttrs(token) {\n      var i, l, result;\n      if (!token.attrs) {\n        return \"\";\n      }\n      result = \"\";\n      for (i = 0, l = token.attrs.length; i < l; i++) {\n        result += \" \" + escapeHtml2(token.attrs[i][0]) + '=\"' + escapeHtml2(token.attrs[i][1]) + '\"';\n      }\n      return result;\n    };\n    Renderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n      var nextToken, result = \"\", needLf = false, token = tokens[idx];\n      if (token.hidden) {\n        return \"\";\n      }\n      if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n        result += \"\\n\";\n      }\n      result += (token.nesting === -1 ? \"</\" : \"<\") + token.tag;\n      result += this.renderAttrs(token);\n      if (token.nesting === 0 && options.xhtmlOut) {\n        result += \" /\";\n      }\n      if (token.block) {\n        needLf = true;\n        if (token.nesting === 1) {\n          if (idx + 1 < tokens.length) {\n            nextToken = tokens[idx + 1];\n            if (nextToken.type === \"inline\" || nextToken.hidden) {\n              needLf = false;\n            } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n              needLf = false;\n            }\n          }\n        }\n      }\n      result += needLf ? \">\\n\" : \">\";\n      return result;\n    };\n    Renderer.prototype.renderInline = function(tokens, options, env) {\n      var type, result = \"\", rules = this.rules;\n      for (var i = 0, len = tokens.length; i < len; i++) {\n        type = tokens[i].type;\n        if (typeof rules[type] !== \"undefined\") {\n          result += rules[type](tokens, i, options, env, this);\n        } else {\n          result += this.renderToken(tokens, i, options);\n        }\n      }\n      return result;\n    };\n    Renderer.prototype.renderInlineAsText = function(tokens, options, env) {\n      var result = \"\";\n      for (var i = 0, len = tokens.length; i < len; i++) {\n        if (tokens[i].type === \"text\") {\n          result += tokens[i].content;\n        } else if (tokens[i].type === \"image\") {\n          result += this.renderInlineAsText(tokens[i].children, options, env);\n        } else if (tokens[i].type === \"softbreak\") {\n          result += \"\\n\";\n        }\n      }\n      return result;\n    };\n    Renderer.prototype.render = function(tokens, options, env) {\n      var i, len, type, result = \"\", rules = this.rules;\n      for (i = 0, len = tokens.length; i < len; i++) {\n        type = tokens[i].type;\n        if (type === \"inline\") {\n          result += this.renderInline(tokens[i].children, options, env);\n        } else if (typeof rules[type] !== \"undefined\") {\n          result += rules[tokens[i].type](tokens, i, options, env, this);\n        } else {\n          result += this.renderToken(tokens, i, options, env);\n        }\n      }\n      return result;\n    };\n    module.exports = Renderer;\n  }\n});\n\n// node_modules/markdown-it/lib/ruler.js\nvar require_ruler = __commonJS({\n  \"node_modules/markdown-it/lib/ruler.js\"(exports, module) {\n    \"use strict\";\n    function Ruler() {\n      this.__rules__ = [];\n      this.__cache__ = null;\n    }\n    Ruler.prototype.__find__ = function(name) {\n      for (var i = 0; i < this.__rules__.length; i++) {\n        if (this.__rules__[i].name === name) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    Ruler.prototype.__compile__ = function() {\n      var self = this;\n      var chains = [\"\"];\n      self.__rules__.forEach(function(rule) {\n        if (!rule.enabled) {\n          return;\n        }\n        rule.alt.forEach(function(altName) {\n          if (chains.indexOf(altName) < 0) {\n            chains.push(altName);\n          }\n        });\n      });\n      self.__cache__ = {};\n      chains.forEach(function(chain) {\n        self.__cache__[chain] = [];\n        self.__rules__.forEach(function(rule) {\n          if (!rule.enabled) {\n            return;\n          }\n          if (chain && rule.alt.indexOf(chain) < 0) {\n            return;\n          }\n          self.__cache__[chain].push(rule.fn);\n        });\n      });\n    };\n    Ruler.prototype.at = function(name, fn, options) {\n      var index = this.__find__(name);\n      var opt = options || {};\n      if (index === -1) {\n        throw new Error(\"Parser rule not found: \" + name);\n      }\n      this.__rules__[index].fn = fn;\n      this.__rules__[index].alt = opt.alt || [];\n      this.__cache__ = null;\n    };\n    Ruler.prototype.before = function(beforeName, ruleName, fn, options) {\n      var index = this.__find__(beforeName);\n      var opt = options || {};\n      if (index === -1) {\n        throw new Error(\"Parser rule not found: \" + beforeName);\n      }\n      this.__rules__.splice(index, 0, {\n        name: ruleName,\n        enabled: true,\n        fn,\n        alt: opt.alt || []\n      });\n      this.__cache__ = null;\n    };\n    Ruler.prototype.after = function(afterName, ruleName, fn, options) {\n      var index = this.__find__(afterName);\n      var opt = options || {};\n      if (index === -1) {\n        throw new Error(\"Parser rule not found: \" + afterName);\n      }\n      this.__rules__.splice(index + 1, 0, {\n        name: ruleName,\n        enabled: true,\n        fn,\n        alt: opt.alt || []\n      });\n      this.__cache__ = null;\n    };\n    Ruler.prototype.push = function(ruleName, fn, options) {\n      var opt = options || {};\n      this.__rules__.push({\n        name: ruleName,\n        enabled: true,\n        fn,\n        alt: opt.alt || []\n      });\n      this.__cache__ = null;\n    };\n    Ruler.prototype.enable = function(list2, ignoreInvalid) {\n      if (!Array.isArray(list2)) {\n        list2 = [list2];\n      }\n      var result = [];\n      list2.forEach(function(name) {\n        var idx = this.__find__(name);\n        if (idx < 0) {\n          if (ignoreInvalid) {\n            return;\n          }\n          throw new Error(\"Rules manager: invalid rule name \" + name);\n        }\n        this.__rules__[idx].enabled = true;\n        result.push(name);\n      }, this);\n      this.__cache__ = null;\n      return result;\n    };\n    Ruler.prototype.enableOnly = function(list2, ignoreInvalid) {\n      if (!Array.isArray(list2)) {\n        list2 = [list2];\n      }\n      this.__rules__.forEach(function(rule) {\n        rule.enabled = false;\n      });\n      this.enable(list2, ignoreInvalid);\n    };\n    Ruler.prototype.disable = function(list2, ignoreInvalid) {\n      if (!Array.isArray(list2)) {\n        list2 = [list2];\n      }\n      var result = [];\n      list2.forEach(function(name) {\n        var idx = this.__find__(name);\n        if (idx < 0) {\n          if (ignoreInvalid) {\n            return;\n          }\n          throw new Error(\"Rules manager: invalid rule name \" + name);\n        }\n        this.__rules__[idx].enabled = false;\n        result.push(name);\n      }, this);\n      this.__cache__ = null;\n      return result;\n    };\n    Ruler.prototype.getRules = function(chainName) {\n      if (this.__cache__ === null) {\n        this.__compile__();\n      }\n      return this.__cache__[chainName] || [];\n    };\n    module.exports = Ruler;\n  }\n});\n\n// node_modules/markdown-it/lib/rules_core/normalize.js\nvar require_normalize = __commonJS({\n  \"node_modules/markdown-it/lib/rules_core/normalize.js\"(exports, module) {\n    \"use strict\";\n    var NEWLINES_RE = /\\r\\n?|\\n/g;\n    var NULL_RE = /\\0/g;\n    module.exports = function normalize(state) {\n      var str;\n      str = state.src.replace(NEWLINES_RE, \"\\n\");\n      str = str.replace(NULL_RE, \"\\uFFFD\");\n      state.src = str;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_core/block.js\nvar require_block = __commonJS({\n  \"node_modules/markdown-it/lib/rules_core/block.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function block4(state) {\n      var token;\n      if (state.inlineMode) {\n        token = new state.Token(\"inline\", \"\", 0);\n        token.content = state.src;\n        token.map = [0, 1];\n        token.children = [];\n        state.tokens.push(token);\n      } else {\n        state.md.block.parse(state.src, state.md, state.env, state.tokens);\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_core/inline.js\nvar require_inline = __commonJS({\n  \"node_modules/markdown-it/lib/rules_core/inline.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function inline4(state) {\n      var tokens = state.tokens, tok, i, l;\n      for (i = 0, l = tokens.length; i < l; i++) {\n        tok = tokens[i];\n        if (tok.type === \"inline\") {\n          state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n        }\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_core/linkify.js\nvar require_linkify = __commonJS({\n  \"node_modules/markdown-it/lib/rules_core/linkify.js\"(exports, module) {\n    \"use strict\";\n    var arrayReplaceAt = require_utils().arrayReplaceAt;\n    function isLinkOpen(str) {\n      return /^<a[>\\s]/i.test(str);\n    }\n    function isLinkClose(str) {\n      return /^<\\/a\\s*>/i.test(str);\n    }\n    module.exports = function linkify(state) {\n      var i, j, l, tokens, token, currentToken, nodes, ln, text2, pos, lastPos, level, htmlLinkLevel, url, fullUrl, urlText, blockTokens = state.tokens, links;\n      if (!state.md.options.linkify) {\n        return;\n      }\n      for (j = 0, l = blockTokens.length; j < l; j++) {\n        if (blockTokens[j].type !== \"inline\" || !state.md.linkify.pretest(blockTokens[j].content)) {\n          continue;\n        }\n        tokens = blockTokens[j].children;\n        htmlLinkLevel = 0;\n        for (i = tokens.length - 1; i >= 0; i--) {\n          currentToken = tokens[i];\n          if (currentToken.type === \"link_close\") {\n            i--;\n            while (tokens[i].level !== currentToken.level && tokens[i].type !== \"link_open\") {\n              i--;\n            }\n            continue;\n          }\n          if (currentToken.type === \"html_inline\") {\n            if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n              htmlLinkLevel--;\n            }\n            if (isLinkClose(currentToken.content)) {\n              htmlLinkLevel++;\n            }\n          }\n          if (htmlLinkLevel > 0) {\n            continue;\n          }\n          if (currentToken.type === \"text\" && state.md.linkify.test(currentToken.content)) {\n            text2 = currentToken.content;\n            links = state.md.linkify.match(text2);\n            nodes = [];\n            level = currentToken.level;\n            lastPos = 0;\n            for (ln = 0; ln < links.length; ln++) {\n              url = links[ln].url;\n              fullUrl = state.md.normalizeLink(url);\n              if (!state.md.validateLink(fullUrl)) {\n                continue;\n              }\n              urlText = links[ln].text;\n              if (!links[ln].schema) {\n                urlText = state.md.normalizeLinkText(\"http://\" + urlText).replace(/^http:\\/\\//, \"\");\n              } else if (links[ln].schema === \"mailto:\" && !/^mailto:/i.test(urlText)) {\n                urlText = state.md.normalizeLinkText(\"mailto:\" + urlText).replace(/^mailto:/, \"\");\n              } else {\n                urlText = state.md.normalizeLinkText(urlText);\n              }\n              pos = links[ln].index;\n              if (pos > lastPos) {\n                token = new state.Token(\"text\", \"\", 0);\n                token.content = text2.slice(lastPos, pos);\n                token.level = level;\n                nodes.push(token);\n              }\n              token = new state.Token(\"link_open\", \"a\", 1);\n              token.attrs = [[\"href\", fullUrl]];\n              token.level = level++;\n              token.markup = \"linkify\";\n              token.info = \"auto\";\n              nodes.push(token);\n              token = new state.Token(\"text\", \"\", 0);\n              token.content = urlText;\n              token.level = level;\n              nodes.push(token);\n              token = new state.Token(\"link_close\", \"a\", -1);\n              token.level = --level;\n              token.markup = \"linkify\";\n              token.info = \"auto\";\n              nodes.push(token);\n              lastPos = links[ln].lastIndex;\n            }\n            if (lastPos < text2.length) {\n              token = new state.Token(\"text\", \"\", 0);\n              token.content = text2.slice(lastPos);\n              token.level = level;\n              nodes.push(token);\n            }\n            blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n          }\n        }\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_core/replacements.js\nvar require_replacements = __commonJS({\n  \"node_modules/markdown-it/lib/rules_core/replacements.js\"(exports, module) {\n    \"use strict\";\n    var RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n    var SCOPED_ABBR_TEST_RE = /\\((c|tm|r|p)\\)/i;\n    var SCOPED_ABBR_RE = /\\((c|tm|r|p)\\)/ig;\n    var SCOPED_ABBR = {\n      c: \"\\xA9\",\n      r: \"\\xAE\",\n      p: \"\\xA7\",\n      tm: \"\\u2122\"\n    };\n    function replaceFn(match, name) {\n      return SCOPED_ABBR[name.toLowerCase()];\n    }\n    function replace_scoped(inlineTokens) {\n      var i, token, inside_autolink = 0;\n      for (i = inlineTokens.length - 1; i >= 0; i--) {\n        token = inlineTokens[i];\n        if (token.type === \"text\" && !inside_autolink) {\n          token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n        }\n        if (token.type === \"link_open\" && token.info === \"auto\") {\n          inside_autolink--;\n        }\n        if (token.type === \"link_close\" && token.info === \"auto\") {\n          inside_autolink++;\n        }\n      }\n    }\n    function replace_rare(inlineTokens) {\n      var i, token, inside_autolink = 0;\n      for (i = inlineTokens.length - 1; i >= 0; i--) {\n        token = inlineTokens[i];\n        if (token.type === \"text\" && !inside_autolink) {\n          if (RARE_RE.test(token.content)) {\n            token.content = token.content.replace(/\\+-/g, \"\\xB1\").replace(/\\.{2,}/g, \"\\u2026\").replace(/([?!])…/g, \"$1..\").replace(/([?!]){4,}/g, \"$1$1$1\").replace(/,{2,}/g, \",\").replace(/(^|[^-])---(?=[^-]|$)/mg, \"$1\\u2014\").replace(/(^|\\s)--(?=\\s|$)/mg, \"$1\\u2013\").replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, \"$1\\u2013\");\n          }\n        }\n        if (token.type === \"link_open\" && token.info === \"auto\") {\n          inside_autolink--;\n        }\n        if (token.type === \"link_close\" && token.info === \"auto\") {\n          inside_autolink++;\n        }\n      }\n    }\n    module.exports = function replace(state) {\n      var blkIdx;\n      if (!state.md.options.typographer) {\n        return;\n      }\n      for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n        if (state.tokens[blkIdx].type !== \"inline\") {\n          continue;\n        }\n        if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n          replace_scoped(state.tokens[blkIdx].children);\n        }\n        if (RARE_RE.test(state.tokens[blkIdx].content)) {\n          replace_rare(state.tokens[blkIdx].children);\n        }\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_core/smartquotes.js\nvar require_smartquotes = __commonJS({\n  \"node_modules/markdown-it/lib/rules_core/smartquotes.js\"(exports, module) {\n    \"use strict\";\n    var isWhiteSpace = require_utils().isWhiteSpace;\n    var isPunctChar = require_utils().isPunctChar;\n    var isMdAsciiPunct = require_utils().isMdAsciiPunct;\n    var QUOTE_TEST_RE = /['\"]/;\n    var QUOTE_RE = /['\"]/g;\n    var APOSTROPHE = \"\\u2019\";\n    function replaceAt(str, index, ch) {\n      return str.substr(0, index) + ch + str.substr(index + 1);\n    }\n    function process_inlines(tokens, state) {\n      var i, token, text2, t, pos, max2, thisLevel, item2, lastChar, nextChar, isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace, canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;\n      stack = [];\n      for (i = 0; i < tokens.length; i++) {\n        token = tokens[i];\n        thisLevel = tokens[i].level;\n        for (j = stack.length - 1; j >= 0; j--) {\n          if (stack[j].level <= thisLevel) {\n            break;\n          }\n        }\n        stack.length = j + 1;\n        if (token.type !== \"text\") {\n          continue;\n        }\n        text2 = token.content;\n        pos = 0;\n        max2 = text2.length;\n        OUTER:\n          while (pos < max2) {\n            QUOTE_RE.lastIndex = pos;\n            t = QUOTE_RE.exec(text2);\n            if (!t) {\n              break;\n            }\n            canOpen = canClose = true;\n            pos = t.index + 1;\n            isSingle = t[0] === \"'\";\n            lastChar = 32;\n            if (t.index - 1 >= 0) {\n              lastChar = text2.charCodeAt(t.index - 1);\n            } else {\n              for (j = i - 1; j >= 0; j--) {\n                if (tokens[j].type === \"softbreak\" || tokens[j].type === \"hardbreak\")\n                  break;\n                if (!tokens[j].content)\n                  continue;\n                lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n                break;\n              }\n            }\n            nextChar = 32;\n            if (pos < max2) {\n              nextChar = text2.charCodeAt(pos);\n            } else {\n              for (j = i + 1; j < tokens.length; j++) {\n                if (tokens[j].type === \"softbreak\" || tokens[j].type === \"hardbreak\")\n                  break;\n                if (!tokens[j].content)\n                  continue;\n                nextChar = tokens[j].content.charCodeAt(0);\n                break;\n              }\n            }\n            isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n            isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n            isLastWhiteSpace = isWhiteSpace(lastChar);\n            isNextWhiteSpace = isWhiteSpace(nextChar);\n            if (isNextWhiteSpace) {\n              canOpen = false;\n            } else if (isNextPunctChar) {\n              if (!(isLastWhiteSpace || isLastPunctChar)) {\n                canOpen = false;\n              }\n            }\n            if (isLastWhiteSpace) {\n              canClose = false;\n            } else if (isLastPunctChar) {\n              if (!(isNextWhiteSpace || isNextPunctChar)) {\n                canClose = false;\n              }\n            }\n            if (nextChar === 34 && t[0] === '\"') {\n              if (lastChar >= 48 && lastChar <= 57) {\n                canClose = canOpen = false;\n              }\n            }\n            if (canOpen && canClose) {\n              canOpen = isLastPunctChar;\n              canClose = isNextPunctChar;\n            }\n            if (!canOpen && !canClose) {\n              if (isSingle) {\n                token.content = replaceAt(token.content, t.index, APOSTROPHE);\n              }\n              continue;\n            }\n            if (canClose) {\n              for (j = stack.length - 1; j >= 0; j--) {\n                item2 = stack[j];\n                if (stack[j].level < thisLevel) {\n                  break;\n                }\n                if (item2.single === isSingle && stack[j].level === thisLevel) {\n                  item2 = stack[j];\n                  if (isSingle) {\n                    openQuote = state.md.options.quotes[2];\n                    closeQuote = state.md.options.quotes[3];\n                  } else {\n                    openQuote = state.md.options.quotes[0];\n                    closeQuote = state.md.options.quotes[1];\n                  }\n                  token.content = replaceAt(token.content, t.index, closeQuote);\n                  tokens[item2.token].content = replaceAt(tokens[item2.token].content, item2.pos, openQuote);\n                  pos += closeQuote.length - 1;\n                  if (item2.token === i) {\n                    pos += openQuote.length - 1;\n                  }\n                  text2 = token.content;\n                  max2 = text2.length;\n                  stack.length = j;\n                  continue OUTER;\n                }\n              }\n            }\n            if (canOpen) {\n              stack.push({\n                token: i,\n                pos: t.index,\n                single: isSingle,\n                level: thisLevel\n              });\n            } else if (canClose && isSingle) {\n              token.content = replaceAt(token.content, t.index, APOSTROPHE);\n            }\n          }\n      }\n    }\n    module.exports = function smartquotes(state) {\n      var blkIdx;\n      if (!state.md.options.typographer) {\n        return;\n      }\n      for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n        if (state.tokens[blkIdx].type !== \"inline\" || !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n          continue;\n        }\n        process_inlines(state.tokens[blkIdx].children, state);\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/token.js\nvar require_token = __commonJS({\n  \"node_modules/markdown-it/lib/token.js\"(exports, module) {\n    \"use strict\";\n    function Token(type, tag, nesting) {\n      this.type = type;\n      this.tag = tag;\n      this.attrs = null;\n      this.map = null;\n      this.nesting = nesting;\n      this.level = 0;\n      this.children = null;\n      this.content = \"\";\n      this.markup = \"\";\n      this.info = \"\";\n      this.meta = null;\n      this.block = false;\n      this.hidden = false;\n    }\n    Token.prototype.attrIndex = function attrIndex(name) {\n      var attrs, i, len;\n      if (!this.attrs) {\n        return -1;\n      }\n      attrs = this.attrs;\n      for (i = 0, len = attrs.length; i < len; i++) {\n        if (attrs[i][0] === name) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    Token.prototype.attrPush = function attrPush(attrData) {\n      if (this.attrs) {\n        this.attrs.push(attrData);\n      } else {\n        this.attrs = [attrData];\n      }\n    };\n    Token.prototype.attrSet = function attrSet(name, value) {\n      var idx = this.attrIndex(name), attrData = [name, value];\n      if (idx < 0) {\n        this.attrPush(attrData);\n      } else {\n        this.attrs[idx] = attrData;\n      }\n    };\n    Token.prototype.attrGet = function attrGet(name) {\n      var idx = this.attrIndex(name), value = null;\n      if (idx >= 0) {\n        value = this.attrs[idx][1];\n      }\n      return value;\n    };\n    Token.prototype.attrJoin = function attrJoin(name, value) {\n      var idx = this.attrIndex(name);\n      if (idx < 0) {\n        this.attrPush([name, value]);\n      } else {\n        this.attrs[idx][1] = this.attrs[idx][1] + \" \" + value;\n      }\n    };\n    module.exports = Token;\n  }\n});\n\n// node_modules/markdown-it/lib/rules_core/state_core.js\nvar require_state_core = __commonJS({\n  \"node_modules/markdown-it/lib/rules_core/state_core.js\"(exports, module) {\n    \"use strict\";\n    var Token = require_token();\n    function StateCore(src, md, env) {\n      this.src = src;\n      this.env = env;\n      this.tokens = [];\n      this.inlineMode = false;\n      this.md = md;\n    }\n    StateCore.prototype.Token = Token;\n    module.exports = StateCore;\n  }\n});\n\n// node_modules/markdown-it/lib/parser_core.js\nvar require_parser_core = __commonJS({\n  \"node_modules/markdown-it/lib/parser_core.js\"(exports, module) {\n    \"use strict\";\n    var Ruler = require_ruler();\n    var _rules = [\n      [\"normalize\", require_normalize()],\n      [\"block\", require_block()],\n      [\"inline\", require_inline()],\n      [\"linkify\", require_linkify()],\n      [\"replacements\", require_replacements()],\n      [\"smartquotes\", require_smartquotes()]\n    ];\n    function Core() {\n      this.ruler = new Ruler();\n      for (var i = 0; i < _rules.length; i++) {\n        this.ruler.push(_rules[i][0], _rules[i][1]);\n      }\n    }\n    Core.prototype.process = function(state) {\n      var i, l, rules;\n      rules = this.ruler.getRules(\"\");\n      for (i = 0, l = rules.length; i < l; i++) {\n        rules[i](state);\n      }\n    };\n    Core.prototype.State = require_state_core();\n    module.exports = Core;\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/table.js\nvar require_table = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/table.js\"(exports, module) {\n    \"use strict\";\n    var isSpace = require_utils().isSpace;\n    function getLine2(state, line) {\n      var pos = state.bMarks[line] + state.tShift[line], max2 = state.eMarks[line];\n      return state.src.substr(pos, max2 - pos);\n    }\n    function escapedSplit(str) {\n      var result = [], pos = 0, max2 = str.length, ch, isEscaped = false, lastPos = 0, current = \"\";\n      ch = str.charCodeAt(pos);\n      while (pos < max2) {\n        if (ch === 124) {\n          if (!isEscaped) {\n            result.push(current + str.substring(lastPos, pos));\n            current = \"\";\n            lastPos = pos + 1;\n          } else {\n            current += str.substring(lastPos, pos - 1);\n            lastPos = pos;\n          }\n        }\n        isEscaped = ch === 92;\n        pos++;\n        ch = str.charCodeAt(pos);\n      }\n      result.push(current + str.substring(lastPos));\n      return result;\n    }\n    module.exports = function table3(state, startLine, endLine, silent) {\n      var ch, lineText, pos, i, l, nextLine, columns, columnCount, token, aligns, t, tableLines, tbodyLines, oldParentType, terminate, terminatorRules, firstCh, secondCh;\n      if (startLine + 2 > endLine) {\n        return false;\n      }\n      nextLine = startLine + 1;\n      if (state.sCount[nextLine] < state.blkIndent) {\n        return false;\n      }\n      if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {\n        return false;\n      }\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      if (pos >= state.eMarks[nextLine]) {\n        return false;\n      }\n      firstCh = state.src.charCodeAt(pos++);\n      if (firstCh !== 124 && firstCh !== 45 && firstCh !== 58) {\n        return false;\n      }\n      if (pos >= state.eMarks[nextLine]) {\n        return false;\n      }\n      secondCh = state.src.charCodeAt(pos++);\n      if (secondCh !== 124 && secondCh !== 45 && secondCh !== 58 && !isSpace(secondCh)) {\n        return false;\n      }\n      if (firstCh === 45 && isSpace(secondCh)) {\n        return false;\n      }\n      while (pos < state.eMarks[nextLine]) {\n        ch = state.src.charCodeAt(pos);\n        if (ch !== 124 && ch !== 45 && ch !== 58 && !isSpace(ch)) {\n          return false;\n        }\n        pos++;\n      }\n      lineText = getLine2(state, startLine + 1);\n      columns = lineText.split(\"|\");\n      aligns = [];\n      for (i = 0; i < columns.length; i++) {\n        t = columns[i].trim();\n        if (!t) {\n          if (i === 0 || i === columns.length - 1) {\n            continue;\n          } else {\n            return false;\n          }\n        }\n        if (!/^:?-+:?$/.test(t)) {\n          return false;\n        }\n        if (t.charCodeAt(t.length - 1) === 58) {\n          aligns.push(t.charCodeAt(0) === 58 ? \"center\" : \"right\");\n        } else if (t.charCodeAt(0) === 58) {\n          aligns.push(\"left\");\n        } else {\n          aligns.push(\"\");\n        }\n      }\n      lineText = getLine2(state, startLine).trim();\n      if (lineText.indexOf(\"|\") === -1) {\n        return false;\n      }\n      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n      }\n      columns = escapedSplit(lineText);\n      if (columns.length && columns[0] === \"\")\n        columns.shift();\n      if (columns.length && columns[columns.length - 1] === \"\")\n        columns.pop();\n      columnCount = columns.length;\n      if (columnCount === 0 || columnCount !== aligns.length) {\n        return false;\n      }\n      if (silent) {\n        return true;\n      }\n      oldParentType = state.parentType;\n      state.parentType = \"table\";\n      terminatorRules = state.md.block.ruler.getRules(\"blockquote\");\n      token = state.push(\"table_open\", \"table\", 1);\n      token.map = tableLines = [startLine, 0];\n      token = state.push(\"thead_open\", \"thead\", 1);\n      token.map = [startLine, startLine + 1];\n      token = state.push(\"tr_open\", \"tr\", 1);\n      token.map = [startLine, startLine + 1];\n      for (i = 0; i < columns.length; i++) {\n        token = state.push(\"th_open\", \"th\", 1);\n        if (aligns[i]) {\n          token.attrs = [[\"style\", \"text-align:\" + aligns[i]]];\n        }\n        token = state.push(\"inline\", \"\", 0);\n        token.content = columns[i].trim();\n        token.children = [];\n        token = state.push(\"th_close\", \"th\", -1);\n      }\n      token = state.push(\"tr_close\", \"tr\", -1);\n      token = state.push(\"thead_close\", \"thead\", -1);\n      for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n        if (state.sCount[nextLine] < state.blkIndent) {\n          break;\n        }\n        terminate = false;\n        for (i = 0, l = terminatorRules.length; i < l; i++) {\n          if (terminatorRules[i](state, nextLine, endLine, true)) {\n            terminate = true;\n            break;\n          }\n        }\n        if (terminate) {\n          break;\n        }\n        lineText = getLine2(state, nextLine).trim();\n        if (!lineText) {\n          break;\n        }\n        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {\n          break;\n        }\n        columns = escapedSplit(lineText);\n        if (columns.length && columns[0] === \"\")\n          columns.shift();\n        if (columns.length && columns[columns.length - 1] === \"\")\n          columns.pop();\n        if (nextLine === startLine + 2) {\n          token = state.push(\"tbody_open\", \"tbody\", 1);\n          token.map = tbodyLines = [startLine + 2, 0];\n        }\n        token = state.push(\"tr_open\", \"tr\", 1);\n        token.map = [nextLine, nextLine + 1];\n        for (i = 0; i < columnCount; i++) {\n          token = state.push(\"td_open\", \"td\", 1);\n          if (aligns[i]) {\n            token.attrs = [[\"style\", \"text-align:\" + aligns[i]]];\n          }\n          token = state.push(\"inline\", \"\", 0);\n          token.content = columns[i] ? columns[i].trim() : \"\";\n          token.children = [];\n          token = state.push(\"td_close\", \"td\", -1);\n        }\n        token = state.push(\"tr_close\", \"tr\", -1);\n      }\n      if (tbodyLines) {\n        token = state.push(\"tbody_close\", \"tbody\", -1);\n        tbodyLines[1] = nextLine;\n      }\n      token = state.push(\"table_close\", \"table\", -1);\n      tableLines[1] = nextLine;\n      state.parentType = oldParentType;\n      state.line = nextLine;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/code.js\nvar require_code = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/code.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function code2(state, startLine, endLine) {\n      if (state.md.options.allowIndentation) {\n        return false;\n      }\n      var nextLine, last, token;\n      if (state.sCount[startLine] - state.blkIndent < 4) {\n        return false;\n      }\n      last = nextLine = startLine + 1;\n      while (nextLine < endLine) {\n        if (state.isEmpty(nextLine)) {\n          nextLine++;\n          continue;\n        }\n        if (state.sCount[nextLine] - state.blkIndent >= 4) {\n          nextLine++;\n          last = nextLine;\n          continue;\n        }\n        break;\n      }\n      state.line = last;\n      token = state.push(\"code_block\", \"code\", 0);\n      token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + \"\\n\";\n      token.map = [startLine, state.line];\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/fence.js\nvar require_fence = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/fence.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function fence3(state, startLine, endLine, silent) {\n      var marker, len, params, nextLine, mem, token, markup, haveEndMarker = false, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];\n      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n      }\n      if (pos + 3 > max2) {\n        return false;\n      }\n      marker = state.src.charCodeAt(pos);\n      if (marker !== 126 && marker !== 96) {\n        return false;\n      }\n      mem = pos;\n      pos = state.skipChars(pos, marker);\n      len = pos - mem;\n      if (len < 3) {\n        return false;\n      }\n      markup = state.src.slice(mem, pos);\n      params = state.src.slice(pos, max2);\n      if (marker === 96) {\n        if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n          return false;\n        }\n      }\n      if (silent) {\n        return true;\n      }\n      nextLine = startLine;\n      for (; ; ) {\n        nextLine++;\n        if (nextLine >= endLine) {\n          break;\n        }\n        pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n        max2 = state.eMarks[nextLine];\n        if (pos < max2 && state.sCount[nextLine] < state.blkIndent) {\n          break;\n        }\n        if (state.src.charCodeAt(pos) !== marker) {\n          continue;\n        }\n        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {\n          continue;\n        }\n        pos = state.skipChars(pos, marker);\n        if (pos - mem < len) {\n          continue;\n        }\n        pos = state.skipSpaces(pos);\n        if (pos < max2) {\n          continue;\n        }\n        haveEndMarker = true;\n        break;\n      }\n      len = state.sCount[startLine];\n      state.line = nextLine + (haveEndMarker ? 1 : 0);\n      token = state.push(\"fence\", \"code\", 0);\n      token.info = params;\n      token.content = state.getLines(startLine + 1, nextLine, len, true);\n      token.markup = markup;\n      token.map = [startLine, state.line];\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/blockquote.js\nvar require_blockquote = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/blockquote.js\"(exports, module) {\n    \"use strict\";\n    var isSpace = require_utils().isSpace;\n    module.exports = function blockquote2(state, startLine, endLine, silent) {\n      var adjustTab, ch, i, initial, l, lastLineEmpty, lines, nextLine, offset, oldBMarks, oldBSCount, oldIndent, oldParentType, oldSCount, oldTShift, spaceAfterMarker, terminate, terminatorRules, token, isOutdented, oldLineMax = state.lineMax, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];\n      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n      }\n      if (state.src.charCodeAt(pos++) !== 62) {\n        return false;\n      }\n      if (silent) {\n        return true;\n      }\n      initial = offset = state.sCount[startLine] + 1;\n      if (state.src.charCodeAt(pos) === 32) {\n        pos++;\n        initial++;\n        offset++;\n        adjustTab = false;\n        spaceAfterMarker = true;\n      } else if (state.src.charCodeAt(pos) === 9) {\n        spaceAfterMarker = true;\n        if ((state.bsCount[startLine] + offset) % 4 === 3) {\n          pos++;\n          initial++;\n          offset++;\n          adjustTab = false;\n        } else {\n          adjustTab = true;\n        }\n      } else {\n        spaceAfterMarker = false;\n      }\n      oldBMarks = [state.bMarks[startLine]];\n      state.bMarks[startLine] = pos;\n      while (pos < max2) {\n        ch = state.src.charCodeAt(pos);\n        if (isSpace(ch)) {\n          if (ch === 9) {\n            offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;\n          } else {\n            offset++;\n          }\n        } else {\n          break;\n        }\n        pos++;\n      }\n      oldBSCount = [state.bsCount[startLine]];\n      state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);\n      lastLineEmpty = pos >= max2;\n      oldSCount = [state.sCount[startLine]];\n      state.sCount[startLine] = offset - initial;\n      oldTShift = [state.tShift[startLine]];\n      state.tShift[startLine] = pos - state.bMarks[startLine];\n      terminatorRules = state.md.block.ruler.getRules(\"blockquote\");\n      oldParentType = state.parentType;\n      state.parentType = \"blockquote\";\n      for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {\n        isOutdented = state.sCount[nextLine] < state.blkIndent;\n        pos = state.bMarks[nextLine] + state.tShift[nextLine];\n        max2 = state.eMarks[nextLine];\n        if (pos >= max2) {\n          break;\n        }\n        if (state.src.charCodeAt(pos++) === 62 && !isOutdented) {\n          initial = offset = state.sCount[nextLine] + 1;\n          if (state.src.charCodeAt(pos) === 32) {\n            pos++;\n            initial++;\n            offset++;\n            adjustTab = false;\n            spaceAfterMarker = true;\n          } else if (state.src.charCodeAt(pos) === 9) {\n            spaceAfterMarker = true;\n            if ((state.bsCount[nextLine] + offset) % 4 === 3) {\n              pos++;\n              initial++;\n              offset++;\n              adjustTab = false;\n            } else {\n              adjustTab = true;\n            }\n          } else {\n            spaceAfterMarker = false;\n          }\n          oldBMarks.push(state.bMarks[nextLine]);\n          state.bMarks[nextLine] = pos;\n          while (pos < max2) {\n            ch = state.src.charCodeAt(pos);\n            if (isSpace(ch)) {\n              if (ch === 9) {\n                offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n              } else {\n                offset++;\n              }\n            } else {\n              break;\n            }\n            pos++;\n          }\n          lastLineEmpty = pos >= max2;\n          oldBSCount.push(state.bsCount[nextLine]);\n          state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n          oldSCount.push(state.sCount[nextLine]);\n          state.sCount[nextLine] = offset - initial;\n          oldTShift.push(state.tShift[nextLine]);\n          state.tShift[nextLine] = pos - state.bMarks[nextLine];\n          continue;\n        }\n        if (lastLineEmpty) {\n          break;\n        }\n        terminate = false;\n        for (i = 0, l = terminatorRules.length; i < l; i++) {\n          if (terminatorRules[i](state, nextLine, endLine, true)) {\n            terminate = true;\n            break;\n          }\n        }\n        if (terminate) {\n          state.lineMax = nextLine;\n          if (state.blkIndent !== 0) {\n            oldBMarks.push(state.bMarks[nextLine]);\n            oldBSCount.push(state.bsCount[nextLine]);\n            oldTShift.push(state.tShift[nextLine]);\n            oldSCount.push(state.sCount[nextLine]);\n            state.sCount[nextLine] -= state.blkIndent;\n          }\n          break;\n        }\n        oldBMarks.push(state.bMarks[nextLine]);\n        oldBSCount.push(state.bsCount[nextLine]);\n        oldTShift.push(state.tShift[nextLine]);\n        oldSCount.push(state.sCount[nextLine]);\n        state.sCount[nextLine] = -1;\n      }\n      oldIndent = state.blkIndent;\n      state.blkIndent = 0;\n      token = state.push(\"blockquote_open\", \"blockquote\", 1);\n      token.markup = \">\";\n      token.map = lines = [startLine, 0];\n      state.md.block.tokenize(state, startLine, nextLine);\n      token = state.push(\"blockquote_close\", \"blockquote\", -1);\n      token.markup = \">\";\n      state.lineMax = oldLineMax;\n      state.parentType = oldParentType;\n      lines[1] = state.line;\n      for (i = 0; i < oldTShift.length; i++) {\n        state.bMarks[i + startLine] = oldBMarks[i];\n        state.tShift[i + startLine] = oldTShift[i];\n        state.sCount[i + startLine] = oldSCount[i];\n        state.bsCount[i + startLine] = oldBSCount[i];\n      }\n      state.blkIndent = oldIndent;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/hr.js\nvar require_hr = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/hr.js\"(exports, module) {\n    \"use strict\";\n    var isSpace = require_utils().isSpace;\n    module.exports = function hr2(state, startLine, endLine, silent) {\n      var marker, cnt, ch, token, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];\n      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n      }\n      marker = state.src.charCodeAt(pos++);\n      if (marker !== 42 && marker !== 45 && marker !== 95) {\n        return false;\n      }\n      cnt = 1;\n      while (pos < max2) {\n        ch = state.src.charCodeAt(pos++);\n        if (ch !== marker && !isSpace(ch)) {\n          return false;\n        }\n        if (ch === marker) {\n          cnt++;\n        }\n      }\n      if (cnt < 3) {\n        return false;\n      }\n      if (silent) {\n        return true;\n      }\n      state.line = startLine + 1;\n      token = state.push(\"hr\", \"hr\", 0);\n      token.map = [startLine, state.line];\n      token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/list.js\nvar require_list = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/list.js\"(exports, module) {\n    \"use strict\";\n    var isSpace = require_utils().isSpace;\n    function skipBulletListMarker(state, startLine) {\n      var marker, pos, max2, ch;\n      pos = state.bMarks[startLine] + state.tShift[startLine];\n      max2 = state.eMarks[startLine];\n      marker = state.src.charCodeAt(pos++);\n      if (marker !== 42 && marker !== 45 && marker !== 43) {\n        return -1;\n      }\n      if (pos < max2) {\n        ch = state.src.charCodeAt(pos);\n        if (!isSpace(ch)) {\n          return -1;\n        }\n      }\n      return pos;\n    }\n    function skipOrderedListMarker(state, startLine) {\n      var ch, start = state.bMarks[startLine] + state.tShift[startLine], pos = start, max2 = state.eMarks[startLine];\n      if (pos + 1 >= max2) {\n        return -1;\n      }\n      ch = state.src.charCodeAt(pos++);\n      if (ch < 48 || ch > 57) {\n        return -1;\n      }\n      for (; ; ) {\n        if (pos >= max2) {\n          return -1;\n        }\n        ch = state.src.charCodeAt(pos++);\n        if (ch >= 48 && ch <= 57) {\n          if (pos - start >= 10) {\n            return -1;\n          }\n          continue;\n        }\n        if (ch === 41 || ch === 46) {\n          break;\n        }\n        return -1;\n      }\n      if (pos < max2) {\n        ch = state.src.charCodeAt(pos);\n        if (!isSpace(ch)) {\n          return -1;\n        }\n      }\n      return pos;\n    }\n    function markTightParagraphs(state, idx) {\n      var i, l, level = state.level + 2;\n      for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n        if (state.tokens[i].level === level && state.tokens[i].type === \"paragraph_open\") {\n          state.tokens[i + 2].hidden = true;\n          state.tokens[i].hidden = true;\n          i += 2;\n        }\n      }\n    }\n    module.exports = function list2(state, startLine, endLine, silent) {\n      var ch, contentStart, i, indent, indentAfterMarker, initial, isOrdered, itemLines, l, listLines, listTokIdx, markerCharCode, markerValue, max2, nextLine, offset, oldListIndent, oldParentType, oldSCount, oldTShift, oldTight, pos, posAfterMarker, prevEmptyEnd, start, terminate, terminatorRules, token, isTerminatingParagraph = false, tight = true;\n      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n      }\n      if (!state.md.options.allowIndentation && state.listIndent >= 0 && state.sCount[startLine] - state.listIndent >= 4 && state.sCount[startLine] < state.blkIndent) {\n        return false;\n      }\n      if (silent && state.parentType === \"paragraph\") {\n        if (state.sCount[startLine] >= state.blkIndent) {\n          isTerminatingParagraph = true;\n        }\n      }\n      if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {\n        isOrdered = true;\n        start = state.bMarks[startLine] + state.tShift[startLine];\n        markerValue = Number(state.src.slice(start, posAfterMarker - 1));\n        if (isTerminatingParagraph && markerValue !== 1)\n          return false;\n      } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {\n        isOrdered = false;\n      } else {\n        return false;\n      }\n      if (isTerminatingParagraph) {\n        if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine])\n          return false;\n      }\n      markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n      if (silent) {\n        return true;\n      }\n      listTokIdx = state.tokens.length;\n      if (isOrdered) {\n        token = state.push(\"ordered_list_open\", \"ol\", 1);\n        if (markerValue !== 1) {\n          token.attrs = [[\"start\", markerValue]];\n        }\n      } else {\n        token = state.push(\"bullet_list_open\", \"ul\", 1);\n      }\n      token.map = listLines = [startLine, 0];\n      token.markup = String.fromCharCode(markerCharCode);\n      nextLine = startLine;\n      prevEmptyEnd = false;\n      terminatorRules = state.md.block.ruler.getRules(\"list\");\n      oldParentType = state.parentType;\n      state.parentType = \"list\";\n      while (nextLine < endLine) {\n        pos = posAfterMarker;\n        max2 = state.eMarks[nextLine];\n        initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);\n        while (pos < max2) {\n          ch = state.src.charCodeAt(pos);\n          if (ch === 9) {\n            offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n          } else if (ch === 32) {\n            offset++;\n          } else {\n            break;\n          }\n          pos++;\n        }\n        contentStart = pos;\n        if (contentStart >= max2) {\n          indentAfterMarker = 1;\n        } else {\n          indentAfterMarker = offset - initial;\n        }\n        if (!state.md.options.allowIndentation && indentAfterMarker > 4) {\n          indentAfterMarker = 1;\n        }\n        indent = initial + indentAfterMarker;\n        token = state.push(\"list_item_open\", \"li\", 1);\n        token.markup = String.fromCharCode(markerCharCode);\n        token.map = itemLines = [startLine, 0];\n        if (isOrdered) {\n          token.info = state.src.slice(start, posAfterMarker - 1);\n        }\n        oldTight = state.tight;\n        oldTShift = state.tShift[startLine];\n        oldSCount = state.sCount[startLine];\n        oldListIndent = state.listIndent;\n        state.listIndent = state.blkIndent;\n        state.blkIndent = indent;\n        state.tight = true;\n        state.tShift[startLine] = contentStart - state.bMarks[startLine];\n        state.sCount[startLine] = offset;\n        if (contentStart >= max2 && state.isEmpty(startLine + 1)) {\n          state.line = Math.min(state.line + 2, endLine);\n        } else {\n          state.md.block.tokenize(state, startLine, endLine, true);\n        }\n        if (!state.tight || prevEmptyEnd) {\n          tight = false;\n        }\n        prevEmptyEnd = state.line - startLine > 1 && state.isEmpty(state.line - 1);\n        state.blkIndent = state.listIndent;\n        state.listIndent = oldListIndent;\n        state.tShift[startLine] = oldTShift;\n        state.sCount[startLine] = oldSCount;\n        state.tight = oldTight;\n        token = state.push(\"list_item_close\", \"li\", -1);\n        token.markup = String.fromCharCode(markerCharCode);\n        nextLine = startLine = state.line;\n        itemLines[1] = nextLine;\n        contentStart = state.bMarks[startLine];\n        if (nextLine >= endLine) {\n          break;\n        }\n        if (state.sCount[nextLine] < state.blkIndent) {\n          break;\n        }\n        if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n          break;\n        }\n        terminate = false;\n        for (i = 0, l = terminatorRules.length; i < l; i++) {\n          if (terminatorRules[i](state, nextLine, endLine, true)) {\n            terminate = true;\n            break;\n          }\n        }\n        if (terminate) {\n          break;\n        }\n        if (isOrdered) {\n          posAfterMarker = skipOrderedListMarker(state, nextLine);\n          if (posAfterMarker < 0) {\n            break;\n          }\n          start = state.bMarks[nextLine] + state.tShift[nextLine];\n        } else {\n          posAfterMarker = skipBulletListMarker(state, nextLine);\n          if (posAfterMarker < 0) {\n            break;\n          }\n        }\n        if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {\n          break;\n        }\n      }\n      if (isOrdered) {\n        token = state.push(\"ordered_list_close\", \"ol\", -1);\n      } else {\n        token = state.push(\"bullet_list_close\", \"ul\", -1);\n      }\n      token.markup = String.fromCharCode(markerCharCode);\n      listLines[1] = nextLine;\n      state.line = nextLine;\n      state.parentType = oldParentType;\n      if (tight) {\n        markTightParagraphs(state, listTokIdx);\n      }\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/reference.js\nvar require_reference = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/reference.js\"(exports, module) {\n    \"use strict\";\n    var normalizeReference = require_utils().normalizeReference;\n    var isSpace = require_utils().isSpace;\n    module.exports = function reference(state, startLine, _endLine, silent) {\n      var ch, destEndPos, destEndLineNo, endLine, href, i, l, label, labelEnd, oldParentType, res, start, str, terminate, terminatorRules, title, lines = 0, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine], nextLine = startLine + 1;\n      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n      }\n      if (state.src.charCodeAt(pos) !== 91) {\n        return false;\n      }\n      while (++pos < max2) {\n        if (state.src.charCodeAt(pos) === 93 && state.src.charCodeAt(pos - 1) !== 92) {\n          if (pos + 1 === max2) {\n            return false;\n          }\n          if (state.src.charCodeAt(pos + 1) !== 58) {\n            return false;\n          }\n          break;\n        }\n      }\n      endLine = state.lineMax;\n      terminatorRules = state.md.block.ruler.getRules(\"reference\");\n      oldParentType = state.parentType;\n      state.parentType = \"reference\";\n      for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {\n          continue;\n        }\n        if (state.sCount[nextLine] < 0) {\n          continue;\n        }\n        terminate = false;\n        for (i = 0, l = terminatorRules.length; i < l; i++) {\n          if (terminatorRules[i](state, nextLine, endLine, true)) {\n            terminate = true;\n            break;\n          }\n        }\n        if (terminate) {\n          break;\n        }\n      }\n      str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n      max2 = str.length;\n      for (pos = 1; pos < max2; pos++) {\n        ch = str.charCodeAt(pos);\n        if (ch === 91) {\n          return false;\n        } else if (ch === 93) {\n          labelEnd = pos;\n          break;\n        } else if (ch === 10) {\n          lines++;\n        } else if (ch === 92) {\n          pos++;\n          if (pos < max2 && str.charCodeAt(pos) === 10) {\n            lines++;\n          }\n        }\n      }\n      if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 58) {\n        return false;\n      }\n      for (pos = labelEnd + 2; pos < max2; pos++) {\n        ch = str.charCodeAt(pos);\n        if (ch === 10) {\n          lines++;\n        } else if (isSpace(ch)) {\n        } else {\n          break;\n        }\n      }\n      res = state.md.helpers.parseLinkDestination(str, pos, max2);\n      if (!res.ok) {\n        return false;\n      }\n      href = state.md.normalizeLink(res.str);\n      if (!state.md.validateLink(href)) {\n        return false;\n      }\n      pos = res.pos;\n      lines += res.lines;\n      destEndPos = pos;\n      destEndLineNo = lines;\n      start = pos;\n      for (; pos < max2; pos++) {\n        ch = str.charCodeAt(pos);\n        if (ch === 10) {\n          lines++;\n        } else if (isSpace(ch)) {\n        } else {\n          break;\n        }\n      }\n      res = state.md.helpers.parseLinkTitle(str, pos, max2);\n      if (pos < max2 && start !== pos && res.ok) {\n        title = res.str;\n        pos = res.pos;\n        lines += res.lines;\n      } else {\n        title = \"\";\n        pos = destEndPos;\n        lines = destEndLineNo;\n      }\n      while (pos < max2) {\n        ch = str.charCodeAt(pos);\n        if (!isSpace(ch)) {\n          break;\n        }\n        pos++;\n      }\n      if (pos < max2 && str.charCodeAt(pos) !== 10) {\n        if (title) {\n          title = \"\";\n          pos = destEndPos;\n          lines = destEndLineNo;\n          while (pos < max2) {\n            ch = str.charCodeAt(pos);\n            if (!isSpace(ch)) {\n              break;\n            }\n            pos++;\n          }\n        }\n      }\n      if (pos < max2 && str.charCodeAt(pos) !== 10) {\n        return false;\n      }\n      label = normalizeReference(str.slice(1, labelEnd));\n      if (!label) {\n        return false;\n      }\n      if (silent) {\n        return true;\n      }\n      if (typeof state.env.references === \"undefined\") {\n        state.env.references = {};\n      }\n      if (typeof state.env.references[label] === \"undefined\") {\n        state.env.references[label] = { title, href };\n      }\n      state.parentType = oldParentType;\n      state.line = startLine + lines + 1;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/common/html_blocks.js\nvar require_html_blocks = __commonJS({\n  \"node_modules/markdown-it/lib/common/html_blocks.js\"(exports, module) {\n    \"use strict\";\n    module.exports = [\n      \"address\",\n      \"article\",\n      \"aside\",\n      \"base\",\n      \"basefont\",\n      \"blockquote\",\n      \"body\",\n      \"caption\",\n      \"center\",\n      \"col\",\n      \"colgroup\",\n      \"dd\",\n      \"details\",\n      \"dialog\",\n      \"dir\",\n      \"div\",\n      \"dl\",\n      \"dt\",\n      \"fieldset\",\n      \"figcaption\",\n      \"figure\",\n      \"footer\",\n      \"form\",\n      \"frame\",\n      \"frameset\",\n      \"h1\",\n      \"h2\",\n      \"h3\",\n      \"h4\",\n      \"h5\",\n      \"h6\",\n      \"head\",\n      \"header\",\n      \"hr\",\n      \"html\",\n      \"iframe\",\n      \"legend\",\n      \"li\",\n      \"link\",\n      \"main\",\n      \"menu\",\n      \"menuitem\",\n      \"nav\",\n      \"noframes\",\n      \"ol\",\n      \"optgroup\",\n      \"option\",\n      \"p\",\n      \"param\",\n      \"section\",\n      \"source\",\n      \"summary\",\n      \"table\",\n      \"tbody\",\n      \"td\",\n      \"tfoot\",\n      \"th\",\n      \"thead\",\n      \"title\",\n      \"tr\",\n      \"track\",\n      \"ul\"\n    ];\n  }\n});\n\n// node_modules/markdown-it/lib/common/html_re.js\nvar require_html_re = __commonJS({\n  \"node_modules/markdown-it/lib/common/html_re.js\"(exports, module) {\n    \"use strict\";\n    var attr_name = \"[a-zA-Z_:][a-zA-Z0-9:._-]*\";\n    var unquoted = \"[^\\\"'=<>`\\\\x00-\\\\x20]+\";\n    var single_quoted = \"'[^']*'\";\n    var double_quoted = '\"[^\"]*\"';\n    var attr_value = \"(?:\" + unquoted + \"|\" + single_quoted + \"|\" + double_quoted + \")\";\n    var attribute = \"(?:\\\\s+\" + attr_name + \"(?:\\\\s*=\\\\s*\" + attr_value + \")?)\";\n    var open_tag = \"<[A-Za-z][A-Za-z0-9\\\\-]*\" + attribute + \"*\\\\s*\\\\/?>\";\n    var close_tag = \"<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>\";\n    var comment2 = \"<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->\";\n    var processing = \"<[?][\\\\s\\\\S]*?[?]>\";\n    var declaration = \"<![A-Z]+\\\\s+[^>]*>\";\n    var cdata = \"<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\";\n    var HTML_TAG_RE = new RegExp(\"^(?:\" + open_tag + \"|\" + close_tag + \"|\" + comment2 + \"|\" + processing + \"|\" + declaration + \"|\" + cdata + \")\");\n    var HTML_OPEN_CLOSE_TAG_RE = new RegExp(\"^(?:\" + open_tag + \"|\" + close_tag + \")\");\n    module.exports.HTML_TAG_RE = HTML_TAG_RE;\n    module.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/html_block.js\nvar require_html_block = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/html_block.js\"(exports, module) {\n    \"use strict\";\n    var block_names = require_html_blocks();\n    var HTML_OPEN_CLOSE_TAG_RE = require_html_re().HTML_OPEN_CLOSE_TAG_RE;\n    var HTML_SEQUENCES = [\n      [/^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true],\n      [/^<!--/, /-->/, true],\n      [/^<\\?/, /\\?>/, true],\n      [/^<![A-Z]/, />/, true],\n      [/^<!\\[CDATA\\[/, /\\]\\]>/, true],\n      [new RegExp(\"^</?(\" + block_names.join(\"|\") + \")(?=(\\\\s|/?>|$))\", \"i\"), /^$/, true],\n      [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + \"\\\\s*$\"), /^$/, false]\n    ];\n    module.exports = function html_block(state, startLine, endLine, silent) {\n      var i, nextLine, token, lineText, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];\n      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n      }\n      if (!state.md.options.html) {\n        return false;\n      }\n      if (state.src.charCodeAt(pos) !== 60) {\n        return false;\n      }\n      lineText = state.src.slice(pos, max2);\n      for (i = 0; i < HTML_SEQUENCES.length; i++) {\n        if (HTML_SEQUENCES[i][0].test(lineText)) {\n          break;\n        }\n      }\n      if (i === HTML_SEQUENCES.length) {\n        return false;\n      }\n      if (silent) {\n        return HTML_SEQUENCES[i][2];\n      }\n      nextLine = startLine + 1;\n      if (!HTML_SEQUENCES[i][1].test(lineText)) {\n        for (; nextLine < endLine; nextLine++) {\n          if (state.sCount[nextLine] < state.blkIndent) {\n            break;\n          }\n          pos = state.bMarks[nextLine] + state.tShift[nextLine];\n          max2 = state.eMarks[nextLine];\n          lineText = state.src.slice(pos, max2);\n          if (HTML_SEQUENCES[i][1].test(lineText)) {\n            if (lineText.length !== 0) {\n              nextLine++;\n            }\n            break;\n          }\n        }\n      }\n      state.line = nextLine;\n      token = state.push(\"html_block\", \"\", 0);\n      token.map = [startLine, nextLine];\n      token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/heading.js\nvar require_heading = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/heading.js\"(exports, module) {\n    \"use strict\";\n    var isSpace = require_utils().isSpace;\n    module.exports = function heading2(state, startLine, endLine, silent) {\n      var ch, level, tmp, token, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];\n      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n      }\n      ch = state.src.charCodeAt(pos);\n      if (ch !== 35 || pos >= max2) {\n        return false;\n      }\n      level = 1;\n      ch = state.src.charCodeAt(++pos);\n      while (ch === 35 && pos < max2 && level <= 6) {\n        level++;\n        ch = state.src.charCodeAt(++pos);\n      }\n      if (level > 6 || pos < max2 && !isSpace(ch)) {\n        return false;\n      }\n      if (silent) {\n        return true;\n      }\n      max2 = state.skipSpacesBack(max2, pos);\n      tmp = state.skipCharsBack(max2, 35, pos);\n      if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n        max2 = tmp;\n      }\n      state.line = startLine + 1;\n      token = state.push(\"heading_open\", \"h\" + String(level), 1);\n      token.markup = \"########\".slice(0, level);\n      token.map = [startLine, state.line];\n      token = state.push(\"inline\", \"\", 0);\n      token.content = state.src.slice(pos, max2).trim();\n      token.map = [startLine, state.line];\n      token.children = [];\n      token = state.push(\"heading_close\", \"h\" + String(level), -1);\n      token.markup = \"########\".slice(0, level);\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/lheading.js\nvar require_lheading = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/lheading.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function lheading(state, startLine, endLine) {\n      var content, terminate, i, l, token, pos, max2, level, marker, nextLine = startLine + 1, oldParentType, terminatorRules = state.md.block.ruler.getRules(\"paragraph\");\n      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n      }\n      oldParentType = state.parentType;\n      state.parentType = \"paragraph\";\n      for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {\n          continue;\n        }\n        if (state.sCount[nextLine] >= state.blkIndent) {\n          pos = state.bMarks[nextLine] + state.tShift[nextLine];\n          max2 = state.eMarks[nextLine];\n          if (pos < max2) {\n            marker = state.src.charCodeAt(pos);\n            if (marker === 45 || marker === 61) {\n              pos = state.skipChars(pos, marker);\n              pos = state.skipSpaces(pos);\n              if (pos >= max2) {\n                level = marker === 61 ? 1 : 2;\n                break;\n              }\n            }\n          }\n        }\n        if (state.sCount[nextLine] < 0) {\n          continue;\n        }\n        terminate = false;\n        for (i = 0, l = terminatorRules.length; i < l; i++) {\n          if (terminatorRules[i](state, nextLine, endLine, true)) {\n            terminate = true;\n            break;\n          }\n        }\n        if (terminate) {\n          break;\n        }\n      }\n      if (!level) {\n        return false;\n      }\n      content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n      state.line = nextLine + 1;\n      token = state.push(\"heading_open\", \"h\" + String(level), 1);\n      token.markup = String.fromCharCode(marker);\n      token.map = [startLine, state.line];\n      token = state.push(\"inline\", \"\", 0);\n      token.content = content;\n      token.map = [startLine, state.line - 1];\n      token.children = [];\n      token = state.push(\"heading_close\", \"h\" + String(level), -1);\n      token.markup = String.fromCharCode(marker);\n      state.parentType = oldParentType;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/paragraph.js\nvar require_paragraph = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/paragraph.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function paragraph2(state, startLine) {\n      var content, terminate, i, l, token, oldParentType, nextLine = startLine + 1, terminatorRules = state.md.block.ruler.getRules(\"paragraph\"), endLine = state.lineMax;\n      oldParentType = state.parentType;\n      state.parentType = \"paragraph\";\n      for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {\n          continue;\n        }\n        if (state.sCount[nextLine] < 0) {\n          continue;\n        }\n        terminate = false;\n        for (i = 0, l = terminatorRules.length; i < l; i++) {\n          if (terminatorRules[i](state, nextLine, endLine, true)) {\n            terminate = true;\n            break;\n          }\n        }\n        if (terminate) {\n          break;\n        }\n      }\n      content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n      state.line = nextLine;\n      token = state.push(\"paragraph_open\", \"p\", 1);\n      token.map = [startLine, state.line];\n      token = state.push(\"inline\", \"\", 0);\n      token.content = content;\n      token.map = [startLine, state.line];\n      token.children = [];\n      token = state.push(\"paragraph_close\", \"p\", -1);\n      state.parentType = oldParentType;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/state_block.js\nvar require_state_block = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/state_block.js\"(exports, module) {\n    \"use strict\";\n    var Token = require_token();\n    var isSpace = require_utils().isSpace;\n    function StateBlock(src, md, env, tokens) {\n      var ch, s2, start, pos, len, indent, offset, indent_found;\n      this.src = src;\n      this.md = md;\n      this.env = env;\n      this.tokens = tokens;\n      this.bMarks = [];\n      this.eMarks = [];\n      this.tShift = [];\n      this.sCount = [];\n      this.bsCount = [];\n      this.blkIndent = 0;\n      this.line = 0;\n      this.lineMax = 0;\n      this.tight = false;\n      this.ddIndent = -1;\n      this.listIndent = -1;\n      this.parentType = \"root\";\n      this.level = 0;\n      this.result = \"\";\n      s2 = this.src;\n      indent_found = false;\n      for (start = pos = indent = offset = 0, len = s2.length; pos < len; pos++) {\n        ch = s2.charCodeAt(pos);\n        if (!indent_found) {\n          if (isSpace(ch)) {\n            indent++;\n            if (ch === 9) {\n              offset += 4 - offset % 4;\n            } else {\n              offset++;\n            }\n            continue;\n          } else {\n            indent_found = true;\n          }\n        }\n        if (ch === 10 || pos === len - 1) {\n          if (ch !== 10) {\n            pos++;\n          }\n          this.bMarks.push(start);\n          this.eMarks.push(pos);\n          this.tShift.push(indent);\n          this.sCount.push(offset);\n          this.bsCount.push(0);\n          indent_found = false;\n          indent = 0;\n          offset = 0;\n          start = pos + 1;\n        }\n      }\n      this.bMarks.push(s2.length);\n      this.eMarks.push(s2.length);\n      this.tShift.push(0);\n      this.sCount.push(0);\n      this.bsCount.push(0);\n      this.lineMax = this.bMarks.length - 1;\n    }\n    StateBlock.prototype.push = function(type, tag, nesting) {\n      var token = new Token(type, tag, nesting);\n      token.block = true;\n      if (nesting < 0)\n        this.level--;\n      token.level = this.level;\n      if (nesting > 0)\n        this.level++;\n      this.tokens.push(token);\n      return token;\n    };\n    StateBlock.prototype.isEmpty = function isEmpty(line) {\n      return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n    };\n    StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n      for (var max2 = this.lineMax; from < max2; from++) {\n        if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n          break;\n        }\n      }\n      return from;\n    };\n    StateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n      var ch;\n      for (var max2 = this.src.length; pos < max2; pos++) {\n        ch = this.src.charCodeAt(pos);\n        if (!isSpace(ch)) {\n          break;\n        }\n      }\n      return pos;\n    };\n    StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n      if (pos <= min) {\n        return pos;\n      }\n      while (pos > min) {\n        if (!isSpace(this.src.charCodeAt(--pos))) {\n          return pos + 1;\n        }\n      }\n      return pos;\n    };\n    StateBlock.prototype.skipChars = function skipChars(pos, code2) {\n      for (var max2 = this.src.length; pos < max2; pos++) {\n        if (this.src.charCodeAt(pos) !== code2) {\n          break;\n        }\n      }\n      return pos;\n    };\n    StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code2, min) {\n      if (pos <= min) {\n        return pos;\n      }\n      while (pos > min) {\n        if (code2 !== this.src.charCodeAt(--pos)) {\n          return pos + 1;\n        }\n      }\n      return pos;\n    };\n    StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n      var i, lineIndent, ch, first, last, queue, lineStart, line = begin;\n      if (begin >= end) {\n        return \"\";\n      }\n      queue = new Array(end - begin);\n      for (i = 0; line < end; line++, i++) {\n        lineIndent = 0;\n        lineStart = first = this.bMarks[line];\n        if (line + 1 < end || keepLastLF) {\n          last = this.eMarks[line] + 1;\n        } else {\n          last = this.eMarks[line];\n        }\n        while (first < last && lineIndent < indent) {\n          ch = this.src.charCodeAt(first);\n          if (isSpace(ch)) {\n            if (ch === 9) {\n              lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n            } else {\n              lineIndent++;\n            }\n          } else if (first - lineStart < this.tShift[line]) {\n            lineIndent++;\n          } else {\n            break;\n          }\n          first++;\n        }\n        if (lineIndent > indent) {\n          queue[i] = new Array(lineIndent - indent + 1).join(\" \") + this.src.slice(first, last);\n        } else {\n          queue[i] = this.src.slice(first, last);\n        }\n      }\n      return queue.join(\"\");\n    };\n    StateBlock.prototype.Token = Token;\n    module.exports = StateBlock;\n  }\n});\n\n// node_modules/markdown-it/lib/parser_block.js\nvar require_parser_block = __commonJS({\n  \"node_modules/markdown-it/lib/parser_block.js\"(exports, module) {\n    \"use strict\";\n    var Ruler = require_ruler();\n    var _rules = [\n      [\"table\", require_table(), [\"paragraph\", \"reference\"]],\n      [\"code\", require_code()],\n      [\"fence\", require_fence(), [\"paragraph\", \"reference\", \"blockquote\", \"list\"]],\n      [\"blockquote\", require_blockquote(), [\"paragraph\", \"reference\", \"blockquote\", \"list\"]],\n      [\"hr\", require_hr(), [\"paragraph\", \"reference\", \"blockquote\", \"list\"]],\n      [\"list\", require_list(), [\"paragraph\", \"reference\", \"blockquote\"]],\n      [\"reference\", require_reference()],\n      [\"html_block\", require_html_block(), [\"paragraph\", \"reference\", \"blockquote\"]],\n      [\"heading\", require_heading(), [\"paragraph\", \"reference\", \"blockquote\"]],\n      [\"lheading\", require_lheading()],\n      [\"paragraph\", require_paragraph()]\n    ];\n    function ParserBlock() {\n      this.ruler = new Ruler();\n      for (var i = 0; i < _rules.length; i++) {\n        this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });\n      }\n    }\n    ParserBlock.prototype.tokenize = function(state, startLine, endLine) {\n      var ok, i, rules = this.ruler.getRules(\"\"), len = rules.length, line = startLine, hasEmptyLines = false, maxNesting = state.md.options.maxNesting;\n      while (line < endLine) {\n        state.line = line = state.skipEmptyLines(line);\n        if (line >= endLine) {\n          break;\n        }\n        if (state.sCount[line] < state.blkIndent) {\n          break;\n        }\n        if (state.level >= maxNesting) {\n          state.line = endLine;\n          break;\n        }\n        for (i = 0; i < len; i++) {\n          ok = rules[i](state, line, endLine, false);\n          if (ok) {\n            break;\n          }\n        }\n        state.tight = !hasEmptyLines;\n        if (state.isEmpty(state.line - 1)) {\n          hasEmptyLines = true;\n        }\n        line = state.line;\n        if (line < endLine && state.isEmpty(line)) {\n          hasEmptyLines = true;\n          line++;\n          state.line = line;\n        }\n      }\n    };\n    ParserBlock.prototype.parse = function(src, md, env, outTokens) {\n      var state;\n      if (!src) {\n        return;\n      }\n      state = new this.State(src, md, env, outTokens);\n      this.tokenize(state, state.line, state.lineMax);\n    };\n    ParserBlock.prototype.State = require_state_block();\n    module.exports = ParserBlock;\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/text.js\nvar require_text = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/text.js\"(exports, module) {\n    \"use strict\";\n    function isTerminatorChar(ch) {\n      switch (ch) {\n        case 10:\n        case 33:\n        case 35:\n        case 36:\n        case 37:\n        case 38:\n        case 42:\n        case 43:\n        case 45:\n        case 58:\n        case 60:\n        case 61:\n        case 62:\n        case 64:\n        case 91:\n        case 92:\n        case 93:\n        case 94:\n        case 95:\n        case 96:\n        case 123:\n        case 125:\n        case 126:\n          return true;\n        default:\n          return false;\n      }\n    }\n    module.exports = function text2(state, silent) {\n      var pos = state.pos;\n      while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n        pos++;\n      }\n      if (pos === state.pos) {\n        return false;\n      }\n      if (!silent) {\n        state.pending += state.src.slice(state.pos, pos);\n      }\n      state.pos = pos;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/newline.js\nvar require_newline = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/newline.js\"(exports, module) {\n    \"use strict\";\n    var isSpace = require_utils().isSpace;\n    module.exports = function newline(state, silent) {\n      var pmax, max2, ws, pos = state.pos;\n      if (state.src.charCodeAt(pos) !== 10) {\n        return false;\n      }\n      pmax = state.pending.length - 1;\n      max2 = state.posMax;\n      if (!silent) {\n        if (pmax >= 0 && state.pending.charCodeAt(pmax) === 32) {\n          if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 32) {\n            ws = pmax - 1;\n            while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 32)\n              ws--;\n            state.pending = state.pending.slice(0, ws);\n            state.push(\"hardbreak\", \"br\", 0);\n          } else {\n            state.pending = state.pending.slice(0, -1);\n            state.push(\"softbreak\", \"br\", 0);\n          }\n        } else {\n          state.push(\"softbreak\", \"br\", 0);\n        }\n      }\n      pos++;\n      while (pos < max2 && isSpace(state.src.charCodeAt(pos))) {\n        pos++;\n      }\n      state.pos = pos;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/escape.js\nvar require_escape = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/escape.js\"(exports, module) {\n    \"use strict\";\n    var isSpace = require_utils().isSpace;\n    var ESCAPED = [];\n    for (i = 0; i < 256; i++) {\n      ESCAPED.push(0);\n    }\n    var i;\n    \"\\\\!\\\"#$%&'()*+,./:;<=>?@[]^_`{|}~-\".split(\"\").forEach(function(ch) {\n      ESCAPED[ch.charCodeAt(0)] = 1;\n    });\n    module.exports = function escape(state, silent) {\n      var ch, pos = state.pos, max2 = state.posMax;\n      if (state.src.charCodeAt(pos) !== 92) {\n        return false;\n      }\n      pos++;\n      if (pos < max2) {\n        ch = state.src.charCodeAt(pos);\n        if (ch < 256 && ESCAPED[ch] !== 0) {\n          if (!silent) {\n            state.pending += state.src[pos];\n          }\n          state.pos += 2;\n          return true;\n        }\n        if (ch === 10) {\n          if (!silent) {\n            state.push(\"hardbreak\", \"br\", 0);\n          }\n          pos++;\n          while (pos < max2) {\n            ch = state.src.charCodeAt(pos);\n            if (!isSpace(ch)) {\n              break;\n            }\n            pos++;\n          }\n          state.pos = pos;\n          return true;\n        }\n      }\n      if (!silent) {\n        state.pending += \"\\\\\";\n      }\n      state.pos++;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/backticks.js\nvar require_backticks = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/backticks.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function backtick(state, silent) {\n      var start, max2, marker, token, matchStart, matchEnd, openerLength, closerLength, pos = state.pos, ch = state.src.charCodeAt(pos);\n      if (ch !== 96) {\n        return false;\n      }\n      start = pos;\n      pos++;\n      max2 = state.posMax;\n      while (pos < max2 && state.src.charCodeAt(pos) === 96) {\n        pos++;\n      }\n      marker = state.src.slice(start, pos);\n      openerLength = marker.length;\n      if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n        if (!silent)\n          state.pending += marker;\n        state.pos += openerLength;\n        return true;\n      }\n      matchStart = matchEnd = pos;\n      while ((matchStart = state.src.indexOf(\"`\", matchEnd)) !== -1) {\n        matchEnd = matchStart + 1;\n        while (matchEnd < max2 && state.src.charCodeAt(matchEnd) === 96) {\n          matchEnd++;\n        }\n        closerLength = matchEnd - matchStart;\n        if (closerLength === openerLength) {\n          if (!silent) {\n            token = state.push(\"code_inline\", \"code\", 0);\n            token.markup = marker;\n            token.content = state.src.slice(pos, matchStart).replace(/\\n/g, \" \").replace(/^ (.+) $/, \"$1\");\n          }\n          state.pos = matchEnd;\n          return true;\n        }\n        state.backticks[closerLength] = matchStart;\n      }\n      state.backticksScanned = true;\n      if (!silent)\n        state.pending += marker;\n      state.pos += openerLength;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/strikethrough.js\nvar require_strikethrough = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/strikethrough.js\"(exports, module) {\n    \"use strict\";\n    module.exports.tokenize = function strikethrough(state, silent) {\n      var i, scanned, token, len, ch, start = state.pos, marker = state.src.charCodeAt(start);\n      if (silent) {\n        return false;\n      }\n      if (marker !== 126) {\n        return false;\n      }\n      scanned = state.scanDelims(state.pos, true);\n      len = scanned.length;\n      ch = String.fromCharCode(marker);\n      if (len < 2) {\n        return false;\n      }\n      if (len % 2) {\n        token = state.push(\"text\", \"\", 0);\n        token.content = ch;\n        len--;\n      }\n      for (i = 0; i < len; i += 2) {\n        token = state.push(\"text\", \"\", 0);\n        token.content = ch + ch;\n        state.delimiters.push({\n          marker,\n          length: 0,\n          token: state.tokens.length - 1,\n          end: -1,\n          open: scanned.can_open,\n          close: scanned.can_close\n        });\n      }\n      state.pos += scanned.length;\n      return true;\n    };\n    function postProcess(state, delimiters) {\n      var i, j, startDelim, endDelim, token, loneMarkers = [], max2 = delimiters.length;\n      for (i = 0; i < max2; i++) {\n        startDelim = delimiters[i];\n        if (startDelim.marker !== 126) {\n          continue;\n        }\n        if (startDelim.end === -1) {\n          continue;\n        }\n        endDelim = delimiters[startDelim.end];\n        token = state.tokens[startDelim.token];\n        token.type = \"s_open\";\n        token.tag = \"s\";\n        token.nesting = 1;\n        token.markup = \"~~\";\n        token.content = \"\";\n        token = state.tokens[endDelim.token];\n        token.type = \"s_close\";\n        token.tag = \"s\";\n        token.nesting = -1;\n        token.markup = \"~~\";\n        token.content = \"\";\n        if (state.tokens[endDelim.token - 1].type === \"text\" && state.tokens[endDelim.token - 1].content === \"~\") {\n          loneMarkers.push(endDelim.token - 1);\n        }\n      }\n      while (loneMarkers.length) {\n        i = loneMarkers.pop();\n        j = i + 1;\n        while (j < state.tokens.length && state.tokens[j].type === \"s_close\") {\n          j++;\n        }\n        j--;\n        if (i !== j) {\n          token = state.tokens[j];\n          state.tokens[j] = state.tokens[i];\n          state.tokens[i] = token;\n        }\n      }\n    }\n    module.exports.postProcess = function strikethrough(state) {\n      var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;\n      postProcess(state, state.delimiters);\n      for (curr = 0; curr < max2; curr++) {\n        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n          postProcess(state, tokens_meta[curr].delimiters);\n        }\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/emphasis.js\nvar require_emphasis = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/emphasis.js\"(exports, module) {\n    \"use strict\";\n    module.exports.tokenize = function emphasis(state, silent) {\n      var i, scanned, token, start = state.pos, marker = state.src.charCodeAt(start);\n      if (silent) {\n        return false;\n      }\n      if (marker !== 95 && marker !== 42) {\n        return false;\n      }\n      scanned = state.scanDelims(state.pos, marker === 42);\n      for (i = 0; i < scanned.length; i++) {\n        token = state.push(\"text\", \"\", 0);\n        token.content = String.fromCharCode(marker);\n        state.delimiters.push({\n          marker,\n          length: scanned.length,\n          token: state.tokens.length - 1,\n          end: -1,\n          open: scanned.can_open,\n          close: scanned.can_close\n        });\n      }\n      state.pos += scanned.length;\n      return true;\n    };\n    function postProcess(state, delimiters) {\n      var i, startDelim, endDelim, token, ch, isStrong, max2 = delimiters.length;\n      for (i = max2 - 1; i >= 0; i--) {\n        startDelim = delimiters[i];\n        if (startDelim.marker !== 95 && startDelim.marker !== 42) {\n          continue;\n        }\n        if (startDelim.end === -1) {\n          continue;\n        }\n        endDelim = delimiters[startDelim.end];\n        isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 && delimiters[i - 1].marker === startDelim.marker && delimiters[i - 1].token === startDelim.token - 1 && delimiters[startDelim.end + 1].token === endDelim.token + 1;\n        ch = String.fromCharCode(startDelim.marker);\n        token = state.tokens[startDelim.token];\n        token.type = isStrong ? \"strong_open\" : \"em_open\";\n        token.tag = isStrong ? \"strong\" : \"em\";\n        token.nesting = 1;\n        token.markup = isStrong ? ch + ch : ch;\n        token.content = \"\";\n        token = state.tokens[endDelim.token];\n        token.type = isStrong ? \"strong_close\" : \"em_close\";\n        token.tag = isStrong ? \"strong\" : \"em\";\n        token.nesting = -1;\n        token.markup = isStrong ? ch + ch : ch;\n        token.content = \"\";\n        if (isStrong) {\n          state.tokens[delimiters[i - 1].token].content = \"\";\n          state.tokens[delimiters[startDelim.end + 1].token].content = \"\";\n          i--;\n        }\n      }\n    }\n    module.exports.postProcess = function emphasis(state) {\n      var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;\n      postProcess(state, state.delimiters);\n      for (curr = 0; curr < max2; curr++) {\n        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n          postProcess(state, tokens_meta[curr].delimiters);\n        }\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/link.js\nvar require_link = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/link.js\"(exports, module) {\n    \"use strict\";\n    var normalizeReference = require_utils().normalizeReference;\n    var isSpace = require_utils().isSpace;\n    module.exports = function link2(state, silent) {\n      var attrs, code2, label, labelEnd, labelStart, pos, res, ref, token, href = \"\", title = \"\", oldPos = state.pos, max2 = state.posMax, start = state.pos, parseReference = true;\n      if (state.src.charCodeAt(state.pos) !== 91) {\n        return false;\n      }\n      labelStart = state.pos + 1;\n      labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n      if (labelEnd < 0) {\n        return false;\n      }\n      pos = labelEnd + 1;\n      if (pos < max2 && state.src.charCodeAt(pos) === 40) {\n        parseReference = false;\n        pos++;\n        for (; pos < max2; pos++) {\n          code2 = state.src.charCodeAt(pos);\n          if (!isSpace(code2) && code2 !== 10) {\n            break;\n          }\n        }\n        if (pos >= max2) {\n          return false;\n        }\n        start = pos;\n        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n        if (res.ok) {\n          href = state.md.normalizeLink(res.str);\n          if (state.md.validateLink(href)) {\n            pos = res.pos;\n          } else {\n            href = \"\";\n          }\n          start = pos;\n          for (; pos < max2; pos++) {\n            code2 = state.src.charCodeAt(pos);\n            if (!isSpace(code2) && code2 !== 10) {\n              break;\n            }\n          }\n          res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n          if (pos < max2 && start !== pos && res.ok) {\n            title = res.str;\n            pos = res.pos;\n            for (; pos < max2; pos++) {\n              code2 = state.src.charCodeAt(pos);\n              if (!isSpace(code2) && code2 !== 10) {\n                break;\n              }\n            }\n          }\n        }\n        if (pos >= max2 || state.src.charCodeAt(pos) !== 41) {\n          parseReference = true;\n        }\n        pos++;\n      }\n      if (parseReference) {\n        if (typeof state.env.references === \"undefined\") {\n          return false;\n        }\n        if (pos < max2 && state.src.charCodeAt(pos) === 91) {\n          start = pos + 1;\n          pos = state.md.helpers.parseLinkLabel(state, pos);\n          if (pos >= 0) {\n            label = state.src.slice(start, pos++);\n          } else {\n            pos = labelEnd + 1;\n          }\n        } else {\n          pos = labelEnd + 1;\n        }\n        if (!label) {\n          label = state.src.slice(labelStart, labelEnd);\n        }\n        ref = state.env.references[normalizeReference(label)];\n        if (!ref) {\n          state.pos = oldPos;\n          return false;\n        }\n        href = ref.href;\n        title = ref.title;\n      }\n      if (!silent) {\n        state.pos = labelStart;\n        state.posMax = labelEnd;\n        token = state.push(\"link_open\", \"a\", 1);\n        token.attrs = attrs = [[\"href\", href]];\n        if (title) {\n          attrs.push([\"title\", title]);\n        }\n        state.md.inline.tokenize(state);\n        token = state.push(\"link_close\", \"a\", -1);\n      }\n      state.pos = pos;\n      state.posMax = max2;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/image.js\nvar require_image = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/image.js\"(exports, module) {\n    \"use strict\";\n    var normalizeReference = require_utils().normalizeReference;\n    var isSpace = require_utils().isSpace;\n    module.exports = function image2(state, silent) {\n      var attrs, code2, content, label, labelEnd, labelStart, pos, ref, res, title, token, tokens, start, href = \"\", oldPos = state.pos, max2 = state.posMax;\n      if (state.src.charCodeAt(state.pos) !== 33) {\n        return false;\n      }\n      if (state.src.charCodeAt(state.pos + 1) !== 91) {\n        return false;\n      }\n      labelStart = state.pos + 2;\n      labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n      if (labelEnd < 0) {\n        return false;\n      }\n      pos = labelEnd + 1;\n      if (pos < max2 && state.src.charCodeAt(pos) === 40) {\n        pos++;\n        for (; pos < max2; pos++) {\n          code2 = state.src.charCodeAt(pos);\n          if (!isSpace(code2) && code2 !== 10) {\n            break;\n          }\n        }\n        if (pos >= max2) {\n          return false;\n        }\n        start = pos;\n        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n        if (res.ok) {\n          href = state.md.normalizeLink(res.str);\n          if (state.md.validateLink(href)) {\n            pos = res.pos;\n          } else {\n            href = \"\";\n          }\n        }\n        start = pos;\n        for (; pos < max2; pos++) {\n          code2 = state.src.charCodeAt(pos);\n          if (!isSpace(code2) && code2 !== 10) {\n            break;\n          }\n        }\n        res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n        if (pos < max2 && start !== pos && res.ok) {\n          title = res.str;\n          pos = res.pos;\n          for (; pos < max2; pos++) {\n            code2 = state.src.charCodeAt(pos);\n            if (!isSpace(code2) && code2 !== 10) {\n              break;\n            }\n          }\n        } else {\n          title = \"\";\n        }\n        if (pos >= max2 || state.src.charCodeAt(pos) !== 41) {\n          state.pos = oldPos;\n          return false;\n        }\n        pos++;\n      } else {\n        if (typeof state.env.references === \"undefined\") {\n          return false;\n        }\n        if (pos < max2 && state.src.charCodeAt(pos) === 91) {\n          start = pos + 1;\n          pos = state.md.helpers.parseLinkLabel(state, pos);\n          if (pos >= 0) {\n            label = state.src.slice(start, pos++);\n          } else {\n            pos = labelEnd + 1;\n          }\n        } else {\n          pos = labelEnd + 1;\n        }\n        if (!label) {\n          label = state.src.slice(labelStart, labelEnd);\n        }\n        ref = state.env.references[normalizeReference(label)];\n        if (!ref) {\n          state.pos = oldPos;\n          return false;\n        }\n        href = ref.href;\n        title = ref.title;\n      }\n      if (!silent) {\n        content = state.src.slice(labelStart, labelEnd);\n        state.md.inline.parse(content, state.md, state.env, tokens = []);\n        token = state.push(\"image\", \"img\", 0);\n        token.attrs = attrs = [[\"src\", href], [\"alt\", \"\"]];\n        token.children = tokens;\n        token.content = content;\n        if (title) {\n          attrs.push([\"title\", title]);\n        }\n      }\n      state.pos = pos;\n      state.posMax = max2;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/autolink.js\nvar require_autolink = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/autolink.js\"(exports, module) {\n    \"use strict\";\n    var EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;\n    var AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\\-]{1,31}):([^<>\\x00-\\x20]*)$/;\n    module.exports = function autolink(state, silent) {\n      var url, fullUrl, token, ch, start, max2, pos = state.pos;\n      if (state.src.charCodeAt(pos) !== 60) {\n        return false;\n      }\n      start = state.pos;\n      max2 = state.posMax;\n      for (; ; ) {\n        if (++pos >= max2)\n          return false;\n        ch = state.src.charCodeAt(pos);\n        if (ch === 60)\n          return false;\n        if (ch === 62)\n          break;\n      }\n      url = state.src.slice(start + 1, pos);\n      if (AUTOLINK_RE.test(url)) {\n        fullUrl = state.md.normalizeLink(url);\n        if (!state.md.validateLink(fullUrl)) {\n          return false;\n        }\n        if (!silent) {\n          token = state.push(\"link_open\", \"a\", 1);\n          token.attrs = [[\"href\", fullUrl]];\n          token.markup = \"autolink\";\n          token.info = \"auto\";\n          token = state.push(\"text\", \"\", 0);\n          token.content = state.md.normalizeLinkText(url);\n          token = state.push(\"link_close\", \"a\", -1);\n          token.markup = \"autolink\";\n          token.info = \"auto\";\n        }\n        state.pos += url.length + 2;\n        return true;\n      }\n      if (EMAIL_RE.test(url)) {\n        fullUrl = state.md.normalizeLink(\"mailto:\" + url);\n        if (!state.md.validateLink(fullUrl)) {\n          return false;\n        }\n        if (!silent) {\n          token = state.push(\"link_open\", \"a\", 1);\n          token.attrs = [[\"href\", fullUrl]];\n          token.markup = \"autolink\";\n          token.info = \"auto\";\n          token = state.push(\"text\", \"\", 0);\n          token.content = state.md.normalizeLinkText(url);\n          token = state.push(\"link_close\", \"a\", -1);\n          token.markup = \"autolink\";\n          token.info = \"auto\";\n        }\n        state.pos += url.length + 2;\n        return true;\n      }\n      return false;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/html_inline.js\nvar require_html_inline = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/html_inline.js\"(exports, module) {\n    \"use strict\";\n    var HTML_TAG_RE = require_html_re().HTML_TAG_RE;\n    function isLetter(ch) {\n      var lc = ch | 32;\n      return lc >= 97 && lc <= 122;\n    }\n    module.exports = function html_inline(state, silent) {\n      var ch, match, max2, token, pos = state.pos;\n      if (!state.md.options.html) {\n        return false;\n      }\n      max2 = state.posMax;\n      if (state.src.charCodeAt(pos) !== 60 || pos + 2 >= max2) {\n        return false;\n      }\n      ch = state.src.charCodeAt(pos + 1);\n      if (ch !== 33 && ch !== 63 && ch !== 47 && !isLetter(ch)) {\n        return false;\n      }\n      match = state.src.slice(pos).match(HTML_TAG_RE);\n      if (!match) {\n        return false;\n      }\n      if (!silent) {\n        token = state.push(\"html_inline\", \"\", 0);\n        token.content = state.src.slice(pos, pos + match[0].length);\n      }\n      state.pos += match[0].length;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/entity.js\nvar require_entity = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/entity.js\"(exports, module) {\n    \"use strict\";\n    var entities = require_entities2();\n    var has = require_utils().has;\n    var isValidEntityCode = require_utils().isValidEntityCode;\n    var fromCodePoint = require_utils().fromCodePoint;\n    var DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;\n    var NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;\n    module.exports = function entity(state, silent) {\n      var ch, code2, match, pos = state.pos, max2 = state.posMax;\n      if (state.src.charCodeAt(pos) !== 38) {\n        return false;\n      }\n      if (pos + 1 < max2) {\n        ch = state.src.charCodeAt(pos + 1);\n        if (ch === 35) {\n          match = state.src.slice(pos).match(DIGITAL_RE);\n          if (match) {\n            if (!silent) {\n              code2 = match[1][0].toLowerCase() === \"x\" ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n              state.pending += isValidEntityCode(code2) ? fromCodePoint(code2) : fromCodePoint(65533);\n            }\n            state.pos += match[0].length;\n            return true;\n          }\n        } else {\n          match = state.src.slice(pos).match(NAMED_RE);\n          if (match) {\n            if (has(entities, match[1])) {\n              if (!silent) {\n                state.pending += entities[match[1]];\n              }\n              state.pos += match[0].length;\n              return true;\n            }\n          }\n        }\n      }\n      if (!silent) {\n        state.pending += \"&\";\n      }\n      state.pos++;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/balance_pairs.js\nvar require_balance_pairs = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/balance_pairs.js\"(exports, module) {\n    \"use strict\";\n    function processDelimiters(state, delimiters) {\n      var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx, isOddMatch, lastJump, openersBottom = {}, max2 = delimiters.length;\n      if (!max2)\n        return;\n      var headerIdx = 0;\n      var lastTokenIdx = -2;\n      var jumps = [];\n      for (closerIdx = 0; closerIdx < max2; closerIdx++) {\n        closer = delimiters[closerIdx];\n        jumps.push(0);\n        if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {\n          headerIdx = closerIdx;\n        }\n        lastTokenIdx = closer.token;\n        closer.length = closer.length || 0;\n        if (!closer.close)\n          continue;\n        if (!openersBottom.hasOwnProperty(closer.marker)) {\n          openersBottom[closer.marker] = [-1, -1, -1, -1, -1, -1];\n        }\n        minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + closer.length % 3];\n        openerIdx = headerIdx - jumps[headerIdx] - 1;\n        newMinOpenerIdx = openerIdx;\n        for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {\n          opener = delimiters[openerIdx];\n          if (opener.marker !== closer.marker)\n            continue;\n          if (opener.open && opener.end < 0) {\n            isOddMatch = false;\n            if (opener.close || closer.open) {\n              if ((opener.length + closer.length) % 3 === 0) {\n                if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n                  isOddMatch = true;\n                }\n              }\n            }\n            if (!isOddMatch) {\n              lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? jumps[openerIdx - 1] + 1 : 0;\n              jumps[closerIdx] = closerIdx - openerIdx + lastJump;\n              jumps[openerIdx] = lastJump;\n              closer.open = false;\n              opener.end = closerIdx;\n              opener.close = false;\n              newMinOpenerIdx = -1;\n              lastTokenIdx = -2;\n              break;\n            }\n          }\n        }\n        if (newMinOpenerIdx !== -1) {\n          openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length || 0) % 3] = newMinOpenerIdx;\n        }\n      }\n    }\n    module.exports = function link_pairs(state) {\n      var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;\n      processDelimiters(state, state.delimiters);\n      for (curr = 0; curr < max2; curr++) {\n        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n          processDelimiters(state, tokens_meta[curr].delimiters);\n        }\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/text_collapse.js\nvar require_text_collapse = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/text_collapse.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function text_collapse(state) {\n      var curr, last, level = 0, tokens = state.tokens, max2 = state.tokens.length;\n      for (curr = last = 0; curr < max2; curr++) {\n        if (tokens[curr].nesting < 0)\n          level--;\n        tokens[curr].level = level;\n        if (tokens[curr].nesting > 0)\n          level++;\n        if (tokens[curr].type === \"text\" && curr + 1 < max2 && tokens[curr + 1].type === \"text\") {\n          tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n        } else {\n          if (curr !== last) {\n            tokens[last] = tokens[curr];\n          }\n          last++;\n        }\n      }\n      if (curr !== last) {\n        tokens.length = last;\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/state_inline.js\nvar require_state_inline = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/state_inline.js\"(exports, module) {\n    \"use strict\";\n    var Token = require_token();\n    var isWhiteSpace = require_utils().isWhiteSpace;\n    var isPunctChar = require_utils().isPunctChar;\n    var isMdAsciiPunct = require_utils().isMdAsciiPunct;\n    function StateInline(src, md, env, outTokens) {\n      this.src = src;\n      this.env = env;\n      this.md = md;\n      this.tokens = outTokens;\n      this.tokens_meta = Array(outTokens.length);\n      this.pos = 0;\n      this.posMax = this.src.length;\n      this.level = 0;\n      this.pending = \"\";\n      this.pendingLevel = 0;\n      this.cache = {};\n      this.delimiters = [];\n      this._prev_delimiters = [];\n      this.backticks = {};\n      this.backticksScanned = false;\n    }\n    StateInline.prototype.pushPending = function() {\n      var token = new Token(\"text\", \"\", 0);\n      token.content = this.pending;\n      token.level = this.pendingLevel;\n      this.tokens.push(token);\n      this.pending = \"\";\n      return token;\n    };\n    StateInline.prototype.push = function(type, tag, nesting) {\n      if (this.pending) {\n        this.pushPending();\n      }\n      var token = new Token(type, tag, nesting);\n      var token_meta = null;\n      if (nesting < 0) {\n        this.level--;\n        this.delimiters = this._prev_delimiters.pop();\n      }\n      token.level = this.level;\n      if (nesting > 0) {\n        this.level++;\n        this._prev_delimiters.push(this.delimiters);\n        this.delimiters = [];\n        token_meta = { delimiters: this.delimiters };\n      }\n      this.pendingLevel = this.level;\n      this.tokens.push(token);\n      this.tokens_meta.push(token_meta);\n      return token;\n    };\n    StateInline.prototype.scanDelims = function(start, canSplitWord) {\n      var pos = start, lastChar, nextChar, count, can_open, can_close, isLastWhiteSpace, isLastPunctChar, isNextWhiteSpace, isNextPunctChar, left_flanking = true, right_flanking = true, max2 = this.posMax, marker = this.src.charCodeAt(start);\n      lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 32;\n      while (pos < max2 && this.src.charCodeAt(pos) === marker) {\n        pos++;\n      }\n      count = pos - start;\n      nextChar = pos < max2 ? this.src.charCodeAt(pos) : 32;\n      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n      isLastWhiteSpace = isWhiteSpace(lastChar);\n      isNextWhiteSpace = isWhiteSpace(nextChar);\n      if (isNextWhiteSpace) {\n        left_flanking = false;\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          left_flanking = false;\n        }\n      }\n      if (isLastWhiteSpace) {\n        right_flanking = false;\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          right_flanking = false;\n        }\n      }\n      if (!canSplitWord) {\n        can_open = left_flanking && (!right_flanking || isLastPunctChar);\n        can_close = right_flanking && (!left_flanking || isNextPunctChar);\n      } else {\n        can_open = left_flanking;\n        can_close = right_flanking;\n      }\n      return {\n        can_open,\n        can_close,\n        length: count\n      };\n    };\n    StateInline.prototype.Token = Token;\n    module.exports = StateInline;\n  }\n});\n\n// node_modules/markdown-it/lib/parser_inline.js\nvar require_parser_inline = __commonJS({\n  \"node_modules/markdown-it/lib/parser_inline.js\"(exports, module) {\n    \"use strict\";\n    var Ruler = require_ruler();\n    var _rules = [\n      [\"text\", require_text()],\n      [\"newline\", require_newline()],\n      [\"escape\", require_escape()],\n      [\"backticks\", require_backticks()],\n      [\"strikethrough\", require_strikethrough().tokenize],\n      [\"emphasis\", require_emphasis().tokenize],\n      [\"link\", require_link()],\n      [\"image\", require_image()],\n      [\"autolink\", require_autolink()],\n      [\"html_inline\", require_html_inline()],\n      [\"entity\", require_entity()]\n    ];\n    var _rules2 = [\n      [\"balance_pairs\", require_balance_pairs()],\n      [\"strikethrough\", require_strikethrough().postProcess],\n      [\"emphasis\", require_emphasis().postProcess],\n      [\"text_collapse\", require_text_collapse()]\n    ];\n    function ParserInline() {\n      var i;\n      this.ruler = new Ruler();\n      for (i = 0; i < _rules.length; i++) {\n        this.ruler.push(_rules[i][0], _rules[i][1]);\n      }\n      this.ruler2 = new Ruler();\n      for (i = 0; i < _rules2.length; i++) {\n        this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n      }\n    }\n    ParserInline.prototype.skipToken = function(state) {\n      var ok, i, pos = state.pos, rules = this.ruler.getRules(\"\"), len = rules.length, maxNesting = state.md.options.maxNesting, cache = state.cache;\n      if (typeof cache[pos] !== \"undefined\") {\n        state.pos = cache[pos];\n        return;\n      }\n      if (state.level < maxNesting) {\n        for (i = 0; i < len; i++) {\n          state.level++;\n          ok = rules[i](state, true);\n          state.level--;\n          if (ok) {\n            break;\n          }\n        }\n      } else {\n        state.pos = state.posMax;\n      }\n      if (!ok) {\n        state.pos++;\n      }\n      cache[pos] = state.pos;\n    };\n    ParserInline.prototype.tokenize = function(state) {\n      var ok, i, rules = this.ruler.getRules(\"\"), len = rules.length, end = state.posMax, maxNesting = state.md.options.maxNesting;\n      while (state.pos < end) {\n        if (state.level < maxNesting) {\n          for (i = 0; i < len; i++) {\n            ok = rules[i](state, false);\n            if (ok) {\n              break;\n            }\n          }\n        }\n        if (ok) {\n          if (state.pos >= end) {\n            break;\n          }\n          continue;\n        }\n        state.pending += state.src[state.pos++];\n      }\n      if (state.pending) {\n        state.pushPending();\n      }\n    };\n    ParserInline.prototype.parse = function(str, md, env, outTokens) {\n      var i, rules, len;\n      var state = new this.State(str, md, env, outTokens);\n      this.tokenize(state);\n      rules = this.ruler2.getRules(\"\");\n      len = rules.length;\n      for (i = 0; i < len; i++) {\n        rules[i](state);\n      }\n    };\n    ParserInline.prototype.State = require_state_inline();\n    module.exports = ParserInline;\n  }\n});\n\n// node_modules/linkify-it/lib/re.js\nvar require_re = __commonJS({\n  \"node_modules/linkify-it/lib/re.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function(opts) {\n      var re = {};\n      re.src_Any = require_regex2().source;\n      re.src_Cc = require_regex3().source;\n      re.src_Z = require_regex5().source;\n      re.src_P = require_regex().source;\n      re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join(\"|\");\n      re.src_ZCc = [re.src_Z, re.src_Cc].join(\"|\");\n      var text_separators = \"[><\\uFF5C]\";\n      re.src_pseudo_letter = \"(?:(?!\" + text_separators + \"|\" + re.src_ZPCc + \")\" + re.src_Any + \")\";\n      re.src_ip4 = \"(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\";\n      re.src_auth = \"(?:(?:(?!\" + re.src_ZCc + \"|[@/\\\\[\\\\]()]).)+@)?\";\n      re.src_port = \"(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?\";\n      re.src_host_terminator = \"(?=$|\" + text_separators + \"|\" + re.src_ZPCc + \")(?!-|_|:\\\\d|\\\\.-|\\\\.(?!$|\" + re.src_ZPCc + \"))\";\n      re.src_path = \"(?:[/?#](?:(?!\" + re.src_ZCc + \"|\" + text_separators + `|[()[\\\\]{}.,\"'?!\\\\-;]).|\\\\[(?:(?!` + re.src_ZCc + \"|\\\\]).)*\\\\]|\\\\((?:(?!\" + re.src_ZCc + \"|[)]).)*\\\\)|\\\\{(?:(?!\" + re.src_ZCc + '|[}]).)*\\\\}|\\\\\"(?:(?!' + re.src_ZCc + `|[\"]).)+\\\\\"|\\\\'(?:(?!` + re.src_ZCc + \"|[']).)+\\\\'|\\\\'(?=\" + re.src_pseudo_letter + \"|[-]).|\\\\.{2,}[a-zA-Z0-9%/&]|\\\\.(?!\" + re.src_ZCc + \"|[.]).|\" + (opts && opts[\"---\"] ? \"\\\\-(?!--(?:[^-]|$))(?:-*)|\" : \"\\\\-+|\") + \",(?!\" + re.src_ZCc + \").|;(?!\" + re.src_ZCc + \").|\\\\!+(?!\" + re.src_ZCc + \"|[!]).|\\\\?(?!\" + re.src_ZCc + \"|[?]).)+|\\\\/)?\";\n      re.src_email_name = '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*';\n      re.src_xn = \"xn--[a-z0-9\\\\-]{1,59}\";\n      re.src_domain_root = \"(?:\" + re.src_xn + \"|\" + re.src_pseudo_letter + \"{1,63})\";\n      re.src_domain = \"(?:\" + re.src_xn + \"|(?:\" + re.src_pseudo_letter + \")|(?:\" + re.src_pseudo_letter + \"(?:-|\" + re.src_pseudo_letter + \"){0,61}\" + re.src_pseudo_letter + \"))\";\n      re.src_host = \"(?:(?:(?:(?:\" + re.src_domain + \")\\\\.)*\" + re.src_domain + \"))\";\n      re.tpl_host_fuzzy = \"(?:\" + re.src_ip4 + \"|(?:(?:(?:\" + re.src_domain + \")\\\\.)+(?:%TLDS%)))\";\n      re.tpl_host_no_ip_fuzzy = \"(?:(?:(?:\" + re.src_domain + \")\\\\.)+(?:%TLDS%))\";\n      re.src_host_strict = re.src_host + re.src_host_terminator;\n      re.tpl_host_fuzzy_strict = re.tpl_host_fuzzy + re.src_host_terminator;\n      re.src_host_port_strict = re.src_host + re.src_port + re.src_host_terminator;\n      re.tpl_host_port_fuzzy_strict = re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n      re.tpl_host_port_no_ip_fuzzy_strict = re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n      re.tpl_host_fuzzy_test = \"localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:\" + re.src_ZPCc + \"|>|$))\";\n      re.tpl_email_fuzzy = \"(^|\" + text_separators + '|\"|\\\\(|' + re.src_ZCc + \")(\" + re.src_email_name + \"@\" + re.tpl_host_fuzzy_strict + \")\";\n      re.tpl_link_fuzzy = \"(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uFF5C]|\" + re.src_ZPCc + \"))((?![$+<=>^`|\\uFF5C])\" + re.tpl_host_port_fuzzy_strict + re.src_path + \")\";\n      re.tpl_link_no_ip_fuzzy = \"(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uFF5C]|\" + re.src_ZPCc + \"))((?![$+<=>^`|\\uFF5C])\" + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + \")\";\n      return re;\n    };\n  }\n});\n\n// node_modules/linkify-it/index.js\nvar require_linkify_it = __commonJS({\n  \"node_modules/linkify-it/index.js\"(exports, module) {\n    \"use strict\";\n    function assign(obj) {\n      var sources = Array.prototype.slice.call(arguments, 1);\n      sources.forEach(function(source) {\n        if (!source) {\n          return;\n        }\n        Object.keys(source).forEach(function(key) {\n          obj[key] = source[key];\n        });\n      });\n      return obj;\n    }\n    function _class(obj) {\n      return Object.prototype.toString.call(obj);\n    }\n    function isString(obj) {\n      return _class(obj) === \"[object String]\";\n    }\n    function isObject(obj) {\n      return _class(obj) === \"[object Object]\";\n    }\n    function isRegExp(obj) {\n      return _class(obj) === \"[object RegExp]\";\n    }\n    function isFunction2(obj) {\n      return _class(obj) === \"[object Function]\";\n    }\n    function escapeRE(str) {\n      return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, \"\\\\$&\");\n    }\n    var defaultOptions = {\n      fuzzyLink: true,\n      fuzzyEmail: true,\n      fuzzyIP: false\n    };\n    function isOptionsObj(obj) {\n      return Object.keys(obj || {}).reduce(function(acc, k) {\n        return acc || defaultOptions.hasOwnProperty(k);\n      }, false);\n    }\n    var defaultSchemas = {\n      \"http:\": {\n        validate: function(text2, pos, self) {\n          var tail = text2.slice(pos);\n          if (!self.re.http) {\n            self.re.http = new RegExp(\"^\\\\/\\\\/\" + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, \"i\");\n          }\n          if (self.re.http.test(tail)) {\n            return tail.match(self.re.http)[0].length;\n          }\n          return 0;\n        }\n      },\n      \"https:\": \"http:\",\n      \"ftp:\": \"http:\",\n      \"//\": {\n        validate: function(text2, pos, self) {\n          var tail = text2.slice(pos);\n          if (!self.re.no_http) {\n            self.re.no_http = new RegExp(\"^\" + self.re.src_auth + \"(?:localhost|(?:(?:\" + self.re.src_domain + \")\\\\.)+\" + self.re.src_domain_root + \")\" + self.re.src_port + self.re.src_host_terminator + self.re.src_path, \"i\");\n          }\n          if (self.re.no_http.test(tail)) {\n            if (pos >= 3 && text2[pos - 3] === \":\") {\n              return 0;\n            }\n            if (pos >= 3 && text2[pos - 3] === \"/\") {\n              return 0;\n            }\n            return tail.match(self.re.no_http)[0].length;\n          }\n          return 0;\n        }\n      },\n      \"mailto:\": {\n        validate: function(text2, pos, self) {\n          var tail = text2.slice(pos);\n          if (!self.re.mailto) {\n            self.re.mailto = new RegExp(\"^\" + self.re.src_email_name + \"@\" + self.re.src_host_strict, \"i\");\n          }\n          if (self.re.mailto.test(tail)) {\n            return tail.match(self.re.mailto)[0].length;\n          }\n          return 0;\n        }\n      }\n    };\n    var tlds_2ch_src_re = \"a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]\";\n    var tlds_default = \"biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\\u0440\\u0444\".split(\"|\");\n    function resetScanCache(self) {\n      self.__index__ = -1;\n      self.__text_cache__ = \"\";\n    }\n    function createValidator(re) {\n      return function(text2, pos) {\n        var tail = text2.slice(pos);\n        if (re.test(tail)) {\n          return tail.match(re)[0].length;\n        }\n        return 0;\n      };\n    }\n    function createNormalizer() {\n      return function(match, self) {\n        self.normalize(match);\n      };\n    }\n    function compile(self) {\n      var re = self.re = require_re()(self.__opts__);\n      var tlds = self.__tlds__.slice();\n      self.onCompile();\n      if (!self.__tlds_replaced__) {\n        tlds.push(tlds_2ch_src_re);\n      }\n      tlds.push(re.src_xn);\n      re.src_tlds = tlds.join(\"|\");\n      function untpl(tpl) {\n        return tpl.replace(\"%TLDS%\", re.src_tlds);\n      }\n      re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), \"i\");\n      re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), \"i\");\n      re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), \"i\");\n      re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), \"i\");\n      var aliases = [];\n      self.__compiled__ = {};\n      function schemaError(name, val) {\n        throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n      }\n      Object.keys(self.__schemas__).forEach(function(name) {\n        var val = self.__schemas__[name];\n        if (val === null) {\n          return;\n        }\n        var compiled = { validate: null, link: null };\n        self.__compiled__[name] = compiled;\n        if (isObject(val)) {\n          if (isRegExp(val.validate)) {\n            compiled.validate = createValidator(val.validate);\n          } else if (isFunction2(val.validate)) {\n            compiled.validate = val.validate;\n          } else {\n            schemaError(name, val);\n          }\n          if (isFunction2(val.normalize)) {\n            compiled.normalize = val.normalize;\n          } else if (!val.normalize) {\n            compiled.normalize = createNormalizer();\n          } else {\n            schemaError(name, val);\n          }\n          return;\n        }\n        if (isString(val)) {\n          aliases.push(name);\n          return;\n        }\n        schemaError(name, val);\n      });\n      aliases.forEach(function(alias) {\n        if (!self.__compiled__[self.__schemas__[alias]]) {\n          return;\n        }\n        self.__compiled__[alias].validate = self.__compiled__[self.__schemas__[alias]].validate;\n        self.__compiled__[alias].normalize = self.__compiled__[self.__schemas__[alias]].normalize;\n      });\n      self.__compiled__[\"\"] = { validate: null, normalize: createNormalizer() };\n      var slist = Object.keys(self.__compiled__).filter(function(name) {\n        return name.length > 0 && self.__compiled__[name];\n      }).map(escapeRE).join(\"|\");\n      self.re.schema_test = RegExp(\"(^|(?!_)(?:[><\\uFF5C]|\" + re.src_ZPCc + \"))(\" + slist + \")\", \"i\");\n      self.re.schema_search = RegExp(\"(^|(?!_)(?:[><\\uFF5C]|\" + re.src_ZPCc + \"))(\" + slist + \")\", \"ig\");\n      self.re.pretest = RegExp(\"(\" + self.re.schema_test.source + \")|(\" + self.re.host_fuzzy_test.source + \")|@\", \"i\");\n      resetScanCache(self);\n    }\n    function Match(self, shift) {\n      var start = self.__index__, end = self.__last_index__, text2 = self.__text_cache__.slice(start, end);\n      this.schema = self.__schema__.toLowerCase();\n      this.index = start + shift;\n      this.lastIndex = end + shift;\n      this.raw = text2;\n      this.text = text2;\n      this.url = text2;\n    }\n    function createMatch(self, shift) {\n      var match = new Match(self, shift);\n      self.__compiled__[match.schema].normalize(match, self);\n      return match;\n    }\n    function LinkifyIt(schemas, options) {\n      if (!(this instanceof LinkifyIt)) {\n        return new LinkifyIt(schemas, options);\n      }\n      if (!options) {\n        if (isOptionsObj(schemas)) {\n          options = schemas;\n          schemas = {};\n        }\n      }\n      this.__opts__ = assign({}, defaultOptions, options);\n      this.__index__ = -1;\n      this.__last_index__ = -1;\n      this.__schema__ = \"\";\n      this.__text_cache__ = \"\";\n      this.__schemas__ = assign({}, defaultSchemas, schemas);\n      this.__compiled__ = {};\n      this.__tlds__ = tlds_default;\n      this.__tlds_replaced__ = false;\n      this.re = {};\n      compile(this);\n    }\n    LinkifyIt.prototype.add = function add(schema, definition) {\n      this.__schemas__[schema] = definition;\n      compile(this);\n      return this;\n    };\n    LinkifyIt.prototype.set = function set(options) {\n      this.__opts__ = assign(this.__opts__, options);\n      return this;\n    };\n    LinkifyIt.prototype.test = function test(text2) {\n      this.__text_cache__ = text2;\n      this.__index__ = -1;\n      if (!text2.length) {\n        return false;\n      }\n      var m, ml, me, len, shift, next, re, tld_pos, at_pos;\n      if (this.re.schema_test.test(text2)) {\n        re = this.re.schema_search;\n        re.lastIndex = 0;\n        while ((m = re.exec(text2)) !== null) {\n          len = this.testSchemaAt(text2, m[2], re.lastIndex);\n          if (len) {\n            this.__schema__ = m[2];\n            this.__index__ = m.index + m[1].length;\n            this.__last_index__ = m.index + m[0].length + len;\n            break;\n          }\n        }\n      }\n      if (this.__opts__.fuzzyLink && this.__compiled__[\"http:\"]) {\n        tld_pos = text2.search(this.re.host_fuzzy_test);\n        if (tld_pos >= 0) {\n          if (this.__index__ < 0 || tld_pos < this.__index__) {\n            if ((ml = text2.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n              shift = ml.index + ml[1].length;\n              if (this.__index__ < 0 || shift < this.__index__) {\n                this.__schema__ = \"\";\n                this.__index__ = shift;\n                this.__last_index__ = ml.index + ml[0].length;\n              }\n            }\n          }\n        }\n      }\n      if (this.__opts__.fuzzyEmail && this.__compiled__[\"mailto:\"]) {\n        at_pos = text2.indexOf(\"@\");\n        if (at_pos >= 0) {\n          if ((me = text2.match(this.re.email_fuzzy)) !== null) {\n            shift = me.index + me[1].length;\n            next = me.index + me[0].length;\n            if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next > this.__last_index__) {\n              this.__schema__ = \"mailto:\";\n              this.__index__ = shift;\n              this.__last_index__ = next;\n            }\n          }\n        }\n      }\n      return this.__index__ >= 0;\n    };\n    LinkifyIt.prototype.pretest = function pretest(text2) {\n      return this.re.pretest.test(text2);\n    };\n    LinkifyIt.prototype.testSchemaAt = function testSchemaAt(text2, schema, pos) {\n      if (!this.__compiled__[schema.toLowerCase()]) {\n        return 0;\n      }\n      return this.__compiled__[schema.toLowerCase()].validate(text2, pos, this);\n    };\n    LinkifyIt.prototype.match = function match(text2) {\n      var shift = 0, result = [];\n      if (this.__index__ >= 0 && this.__text_cache__ === text2) {\n        result.push(createMatch(this, shift));\n        shift = this.__last_index__;\n      }\n      var tail = shift ? text2.slice(shift) : text2;\n      while (this.test(tail)) {\n        result.push(createMatch(this, shift));\n        tail = tail.slice(this.__last_index__);\n        shift += this.__last_index__;\n      }\n      if (result.length) {\n        return result;\n      }\n      return null;\n    };\n    LinkifyIt.prototype.tlds = function tlds(list2, keepOld) {\n      list2 = Array.isArray(list2) ? list2 : [list2];\n      if (!keepOld) {\n        this.__tlds__ = list2.slice();\n        this.__tlds_replaced__ = true;\n        compile(this);\n        return this;\n      }\n      this.__tlds__ = this.__tlds__.concat(list2).sort().filter(function(el, idx, arr) {\n        return el !== arr[idx - 1];\n      }).reverse();\n      compile(this);\n      return this;\n    };\n    LinkifyIt.prototype.normalize = function normalize(match) {\n      if (!match.schema) {\n        match.url = \"http://\" + match.url;\n      }\n      if (match.schema === \"mailto:\" && !/^mailto:/i.test(match.url)) {\n        match.url = \"mailto:\" + match.url;\n      }\n    };\n    LinkifyIt.prototype.onCompile = function onCompile() {\n    };\n    module.exports = LinkifyIt;\n  }\n});\n\n// node_modules/punycode/punycode.js\nvar require_punycode = __commonJS({\n  \"node_modules/punycode/punycode.js\"(exports, module) {\n    \"use strict\";\n    var maxInt = 2147483647;\n    var base = 36;\n    var tMin = 1;\n    var tMax = 26;\n    var skew = 38;\n    var damp = 700;\n    var initialBias = 72;\n    var initialN = 128;\n    var delimiter = \"-\";\n    var regexPunycode = /^xn--/;\n    var regexNonASCII = /[^\\0-\\x7E]/;\n    var regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g;\n    var errors = {\n      \"overflow\": \"Overflow: input needs wider integers to process\",\n      \"not-basic\": \"Illegal input >= 0x80 (not a basic code point)\",\n      \"invalid-input\": \"Invalid input\"\n    };\n    var baseMinusTMin = base - tMin;\n    var floor = Math.floor;\n    var stringFromCharCode = String.fromCharCode;\n    function error2(type) {\n      throw new RangeError(errors[type]);\n    }\n    function map(array, fn) {\n      const result = [];\n      let length = array.length;\n      while (length--) {\n        result[length] = fn(array[length]);\n      }\n      return result;\n    }\n    function mapDomain(string, fn) {\n      const parts = string.split(\"@\");\n      let result = \"\";\n      if (parts.length > 1) {\n        result = parts[0] + \"@\";\n        string = parts[1];\n      }\n      string = string.replace(regexSeparators, \".\");\n      const labels = string.split(\".\");\n      const encoded = map(labels, fn).join(\".\");\n      return result + encoded;\n    }\n    function ucs2decode(string) {\n      const output = [];\n      let counter = 0;\n      const length = string.length;\n      while (counter < length) {\n        const value = string.charCodeAt(counter++);\n        if (value >= 55296 && value <= 56319 && counter < length) {\n          const extra = string.charCodeAt(counter++);\n          if ((extra & 64512) == 56320) {\n            output.push(((value & 1023) << 10) + (extra & 1023) + 65536);\n          } else {\n            output.push(value);\n            counter--;\n          }\n        } else {\n          output.push(value);\n        }\n      }\n      return output;\n    }\n    var ucs2encode = (array) => String.fromCodePoint(...array);\n    var basicToDigit = function(codePoint) {\n      if (codePoint - 48 < 10) {\n        return codePoint - 22;\n      }\n      if (codePoint - 65 < 26) {\n        return codePoint - 65;\n      }\n      if (codePoint - 97 < 26) {\n        return codePoint - 97;\n      }\n      return base;\n    };\n    var digitToBasic = function(digit, flag) {\n      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n    };\n    var adapt = function(delta, numPoints, firstTime) {\n      let k = 0;\n      delta = firstTime ? floor(delta / damp) : delta >> 1;\n      delta += floor(delta / numPoints);\n      for (; delta > baseMinusTMin * tMax >> 1; k += base) {\n        delta = floor(delta / baseMinusTMin);\n      }\n      return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n    };\n    var decode = function(input) {\n      const output = [];\n      const inputLength = input.length;\n      let i = 0;\n      let n = initialN;\n      let bias = initialBias;\n      let basic = input.lastIndexOf(delimiter);\n      if (basic < 0) {\n        basic = 0;\n      }\n      for (let j = 0; j < basic; ++j) {\n        if (input.charCodeAt(j) >= 128) {\n          error2(\"not-basic\");\n        }\n        output.push(input.charCodeAt(j));\n      }\n      for (let index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {\n        let oldi = i;\n        for (let w = 1, k = base; ; k += base) {\n          if (index >= inputLength) {\n            error2(\"invalid-input\");\n          }\n          const digit = basicToDigit(input.charCodeAt(index++));\n          if (digit >= base || digit > floor((maxInt - i) / w)) {\n            error2(\"overflow\");\n          }\n          i += digit * w;\n          const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n          if (digit < t) {\n            break;\n          }\n          const baseMinusT = base - t;\n          if (w > floor(maxInt / baseMinusT)) {\n            error2(\"overflow\");\n          }\n          w *= baseMinusT;\n        }\n        const out = output.length + 1;\n        bias = adapt(i - oldi, out, oldi == 0);\n        if (floor(i / out) > maxInt - n) {\n          error2(\"overflow\");\n        }\n        n += floor(i / out);\n        i %= out;\n        output.splice(i++, 0, n);\n      }\n      return String.fromCodePoint(...output);\n    };\n    var encode = function(input) {\n      const output = [];\n      input = ucs2decode(input);\n      let inputLength = input.length;\n      let n = initialN;\n      let delta = 0;\n      let bias = initialBias;\n      for (const currentValue of input) {\n        if (currentValue < 128) {\n          output.push(stringFromCharCode(currentValue));\n        }\n      }\n      let basicLength = output.length;\n      let handledCPCount = basicLength;\n      if (basicLength) {\n        output.push(delimiter);\n      }\n      while (handledCPCount < inputLength) {\n        let m = maxInt;\n        for (const currentValue of input) {\n          if (currentValue >= n && currentValue < m) {\n            m = currentValue;\n          }\n        }\n        const handledCPCountPlusOne = handledCPCount + 1;\n        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n          error2(\"overflow\");\n        }\n        delta += (m - n) * handledCPCountPlusOne;\n        n = m;\n        for (const currentValue of input) {\n          if (currentValue < n && ++delta > maxInt) {\n            error2(\"overflow\");\n          }\n          if (currentValue == n) {\n            let q = delta;\n            for (let k = base; ; k += base) {\n              const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n              if (q < t) {\n                break;\n              }\n              const qMinusT = q - t;\n              const baseMinusT = base - t;\n              output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n              q = floor(qMinusT / baseMinusT);\n            }\n            output.push(stringFromCharCode(digitToBasic(q, 0)));\n            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n            delta = 0;\n            ++handledCPCount;\n          }\n        }\n        ++delta;\n        ++n;\n      }\n      return output.join(\"\");\n    };\n    var toUnicode = function(input) {\n      return mapDomain(input, function(string) {\n        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n      });\n    };\n    var toASCII = function(input) {\n      return mapDomain(input, function(string) {\n        return regexNonASCII.test(string) ? \"xn--\" + encode(string) : string;\n      });\n    };\n    var punycode = {\n      \"version\": \"2.1.0\",\n      \"ucs2\": {\n        \"decode\": ucs2decode,\n        \"encode\": ucs2encode\n      },\n      \"decode\": decode,\n      \"encode\": encode,\n      \"toASCII\": toASCII,\n      \"toUnicode\": toUnicode\n    };\n    module.exports = punycode;\n  }\n});\n\n// node_modules/markdown-it/lib/presets/default.js\nvar require_default = __commonJS({\n  \"node_modules/markdown-it/lib/presets/default.js\"(exports, module) {\n    \"use strict\";\n    module.exports = {\n      options: {\n        html: false,\n        xhtmlOut: false,\n        breaks: false,\n        langPrefix: \"language-\",\n        linkify: false,\n        typographer: false,\n        quotes: \"\\u201C\\u201D\\u2018\\u2019\",\n        highlight: null,\n        maxNesting: 100\n      },\n      components: {\n        core: {},\n        block: {},\n        inline: {}\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/presets/zero.js\nvar require_zero = __commonJS({\n  \"node_modules/markdown-it/lib/presets/zero.js\"(exports, module) {\n    \"use strict\";\n    module.exports = {\n      options: {\n        html: false,\n        xhtmlOut: false,\n        breaks: false,\n        langPrefix: \"language-\",\n        linkify: false,\n        typographer: false,\n        quotes: \"\\u201C\\u201D\\u2018\\u2019\",\n        highlight: null,\n        maxNesting: 20\n      },\n      components: {\n        core: {\n          rules: [\n            \"normalize\",\n            \"block\",\n            \"inline\"\n          ]\n        },\n        block: {\n          rules: [\n            \"paragraph\"\n          ]\n        },\n        inline: {\n          rules: [\n            \"text\"\n          ],\n          rules2: [\n            \"balance_pairs\",\n            \"text_collapse\"\n          ]\n        }\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/presets/commonmark.js\nvar require_commonmark = __commonJS({\n  \"node_modules/markdown-it/lib/presets/commonmark.js\"(exports, module) {\n    \"use strict\";\n    module.exports = {\n      options: {\n        html: true,\n        xhtmlOut: true,\n        breaks: false,\n        langPrefix: \"language-\",\n        linkify: false,\n        typographer: false,\n        quotes: \"\\u201C\\u201D\\u2018\\u2019\",\n        highlight: null,\n        maxNesting: 20\n      },\n      components: {\n        core: {\n          rules: [\n            \"normalize\",\n            \"block\",\n            \"inline\"\n          ]\n        },\n        block: {\n          rules: [\n            \"blockquote\",\n            \"code\",\n            \"fence\",\n            \"heading\",\n            \"hr\",\n            \"html_block\",\n            \"lheading\",\n            \"list\",\n            \"reference\",\n            \"paragraph\"\n          ]\n        },\n        inline: {\n          rules: [\n            \"autolink\",\n            \"backticks\",\n            \"emphasis\",\n            \"entity\",\n            \"escape\",\n            \"html_inline\",\n            \"image\",\n            \"link\",\n            \"newline\",\n            \"text\"\n          ],\n          rules2: [\n            \"balance_pairs\",\n            \"emphasis\",\n            \"text_collapse\"\n          ]\n        }\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/index.js\nvar require_lib = __commonJS({\n  \"node_modules/markdown-it/lib/index.js\"(exports, module) {\n    \"use strict\";\n    var utils = require_utils();\n    var helpers = require_helpers();\n    var Renderer = require_renderer();\n    var ParserCore = require_parser_core();\n    var ParserBlock = require_parser_block();\n    var ParserInline = require_parser_inline();\n    var LinkifyIt = require_linkify_it();\n    var mdurl = require_mdurl();\n    var punycode = require_punycode();\n    var config = {\n      default: require_default(),\n      zero: require_zero(),\n      commonmark: require_commonmark()\n    };\n    var BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\n    var GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\n    function validateLink(url) {\n      var str = url.trim().toLowerCase();\n      return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) ? true : false : true;\n    }\n    var RECODE_HOSTNAME_FOR = [\"http:\", \"https:\", \"mailto:\"];\n    function normalizeLink(url) {\n      var parsed = mdurl.parse(url, true);\n      if (parsed.hostname) {\n        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n          try {\n            parsed.hostname = punycode.toASCII(parsed.hostname);\n          } catch (er) {\n          }\n        }\n      }\n      return mdurl.encode(mdurl.format(parsed));\n    }\n    function normalizeLinkText(url) {\n      var parsed = mdurl.parse(url, true);\n      if (parsed.hostname) {\n        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n          try {\n            parsed.hostname = punycode.toUnicode(parsed.hostname);\n          } catch (er) {\n          }\n        }\n      }\n      return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + \"%\");\n    }\n    function MarkdownIt3(presetName, options) {\n      if (!(this instanceof MarkdownIt3)) {\n        return new MarkdownIt3(presetName, options);\n      }\n      if (!options) {\n        if (!utils.isString(presetName)) {\n          options = presetName || {};\n          presetName = \"default\";\n        }\n      }\n      this.inline = new ParserInline();\n      this.block = new ParserBlock();\n      this.core = new ParserCore();\n      this.renderer = new Renderer();\n      this.linkify = new LinkifyIt();\n      this.validateLink = validateLink;\n      this.normalizeLink = normalizeLink;\n      this.normalizeLinkText = normalizeLinkText;\n      this.utils = utils;\n      this.helpers = utils.assign({}, helpers);\n      this.options = {};\n      this.configure(presetName);\n      if (options) {\n        this.set(options);\n      }\n    }\n    MarkdownIt3.prototype.set = function(options) {\n      utils.assign(this.options, options);\n      return this;\n    };\n    MarkdownIt3.prototype.configure = function(presets) {\n      var self = this, presetName;\n      if (utils.isString(presets)) {\n        presetName = presets;\n        presets = config[presetName];\n        if (!presets) {\n          throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name');\n        }\n      }\n      if (!presets) {\n        throw new Error(\"Wrong `markdown-it` preset, can't be empty\");\n      }\n      if (presets.options) {\n        self.set(presets.options);\n      }\n      if (presets.components) {\n        Object.keys(presets.components).forEach(function(name) {\n          if (presets.components[name].rules) {\n            self[name].ruler.enableOnly(presets.components[name].rules);\n          }\n          if (presets.components[name].rules2) {\n            self[name].ruler2.enableOnly(presets.components[name].rules2);\n          }\n        });\n      }\n      return this;\n    };\n    MarkdownIt3.prototype.enable = function(list2, ignoreInvalid) {\n      var result = [];\n      if (!Array.isArray(list2)) {\n        list2 = [list2];\n      }\n      [\"core\", \"block\", \"inline\"].forEach(function(chain) {\n        result = result.concat(this[chain].ruler.enable(list2, true));\n      }, this);\n      result = result.concat(this.inline.ruler2.enable(list2, true));\n      var missed = list2.filter(function(name) {\n        return result.indexOf(name) < 0;\n      });\n      if (missed.length && !ignoreInvalid) {\n        throw new Error(\"MarkdownIt. Failed to enable unknown rule(s): \" + missed);\n      }\n      return this;\n    };\n    MarkdownIt3.prototype.disable = function(list2, ignoreInvalid) {\n      var result = [];\n      if (!Array.isArray(list2)) {\n        list2 = [list2];\n      }\n      [\"core\", \"block\", \"inline\"].forEach(function(chain) {\n        result = result.concat(this[chain].ruler.disable(list2, true));\n      }, this);\n      result = result.concat(this.inline.ruler2.disable(list2, true));\n      var missed = list2.filter(function(name) {\n        return result.indexOf(name) < 0;\n      });\n      if (missed.length && !ignoreInvalid) {\n        throw new Error(\"MarkdownIt. Failed to disable unknown rule(s): \" + missed);\n      }\n      return this;\n    };\n    MarkdownIt3.prototype.use = function(plugin4) {\n      var args = [this].concat(Array.prototype.slice.call(arguments, 1));\n      plugin4.apply(plugin4, args);\n      return this;\n    };\n    MarkdownIt3.prototype.parse = function(src, env) {\n      if (typeof src !== \"string\") {\n        throw new Error(\"Input data should be a String\");\n      }\n      var state = new this.core.State(src, this, env);\n      this.core.process(state);\n      return state.tokens;\n    };\n    MarkdownIt3.prototype.render = function(src, env) {\n      env = env || {};\n      return this.renderer.render(this.parse(src, env), this.options, env);\n    };\n    MarkdownIt3.prototype.parseInline = function(src, env) {\n      var state = new this.core.State(src, this, env);\n      state.inlineMode = true;\n      this.core.process(state);\n      return state.tokens;\n    };\n    MarkdownIt3.prototype.renderInline = function(src, env) {\n      env = env || {};\n      return this.renderer.render(this.parseInline(src, env), this.options, env);\n    };\n    module.exports = MarkdownIt3;\n  }\n});\n\n// node_modules/markdown-it/index.js\nvar require_markdown_it = __commonJS({\n  \"node_modules/markdown-it/index.js\"(exports, module) {\n    \"use strict\";\n    module.exports = require_lib();\n  }\n});\n\n// src/ast/base.ts\nvar base_exports = {};\n__export(base_exports, {\n  getAstValues: () => getAstValues,\n  isAst: () => isAst,\n  isFunction: () => isFunction,\n  isVariable: () => isVariable,\n  resolve: () => resolve\n});\nfunction isAst(value) {\n  return !!value?.$$mdtype;\n}\nfunction isFunction(value) {\n  return !!(value?.$$mdtype === \"Function\");\n}\nfunction isVariable(value) {\n  return !!(value?.$$mdtype === \"Variable\");\n}\nfunction* getAstValues(value) {\n  if (value == null || typeof value !== \"object\")\n    return;\n  if (Array.isArray(value))\n    for (const v of value)\n      yield* getAstValues(v);\n  if (isAst(value))\n    yield value;\n  if (Object.getPrototypeOf(value) !== Object.prototype)\n    return;\n  for (const v of Object.values(value))\n    yield* getAstValues(v);\n}\nfunction resolve(value, config = {}) {\n  if (value == null || typeof value !== \"object\")\n    return value;\n  if (Array.isArray(value))\n    return value.map((item2) => resolve(item2, config));\n  if (isAst(value) && value?.resolve instanceof Function)\n    return value.resolve(config);\n  if (Object.getPrototypeOf(value) !== Object.prototype)\n    return value;\n  const output = {};\n  for (const [k, v] of Object.entries(value))\n    output[k] = resolve(v, config);\n  return output;\n}\n\n// src/tag.ts\nvar Tag = class {\n  constructor(name = \"div\", attributes = {}, children = []) {\n    this.$$mdtype = \"Tag\";\n    this.name = name;\n    this.attributes = attributes;\n    this.children = children;\n  }\n};\nTag.isTag = (tag) => {\n  return !!(tag?.$$mdtype === \"Tag\");\n};\n\n// src/schema-types/class.ts\nvar Class = class {\n  validate(value) {\n    if (typeof value === \"string\" || typeof value === \"object\")\n      return [];\n    return [\n      {\n        id: \"attribute-type-invalid\",\n        level: \"error\",\n        message: `Attribute 'class' must be type 'string | object'`\n      }\n    ];\n  }\n  transform(value) {\n    if (!value || typeof value === \"string\")\n      return value;\n    const classes = [];\n    for (const [k, v] of Object.entries(value ?? {}))\n      if (v)\n        classes.push(k);\n    return classes.join(\" \");\n  }\n};\n\n// src/schema-types/id.ts\nvar Id = class {\n  validate(value) {\n    if (typeof value === \"string\" && value.match(/^[a-zA-Z]/))\n      return [];\n    return [\n      {\n        id: \"attribute-value-invalid\",\n        level: \"error\",\n        message: \"The 'id' attribute must start with a letter\"\n      }\n    ];\n  }\n};\n\n// src/utils.ts\nvar import_tag = __toModule(require_tag());\n\n// src/ast/variable.ts\nvar Variable = class {\n  constructor(path = []) {\n    this.$$mdtype = \"Variable\";\n    this.path = path;\n  }\n  resolve({ variables } = {}) {\n    return variables instanceof Function ? variables(this.path) : this.path.reduce((obj = {}, key) => obj[key], variables);\n  }\n};\n\n// src/ast/function.ts\nvar Function2 = class {\n  constructor(name, parameters) {\n    this.$$mdtype = \"Function\";\n    this.name = name;\n    this.parameters = parameters;\n  }\n  resolve(config = {}) {\n    const fn = config?.functions?.[this.name];\n    if (!fn)\n      return null;\n    const parameters = resolve(this.parameters, config);\n    return fn.transform?.(parameters, config);\n  }\n};\n\n// src/utils.ts\nvar STATES;\n(function(STATES2) {\n  STATES2[STATES2[\"normal\"] = 0] = \"normal\";\n  STATES2[STATES2[\"string\"] = 1] = \"string\";\n  STATES2[STATES2[\"escape\"] = 2] = \"escape\";\n})(STATES || (STATES = {}));\nvar OPEN = \"{%\";\nvar CLOSE = \"%}\";\nvar IDENTIFIER_REGEX = /^[a-zA-Z0-9_-]+$/;\nfunction isIdentifier(s2) {\n  return typeof s2 === \"string\" && IDENTIFIER_REGEX.test(s2);\n}\nfunction isPromise(a) {\n  return a && typeof a === \"object\" && typeof a.then === \"function\";\n}\nfunction findTagEnd(content, start = 0) {\n  let state = 0;\n  for (let pos = start; pos < content.length; pos++) {\n    const char = content[pos];\n    switch (state) {\n      case 1:\n        switch (char) {\n          case '\"':\n            state = 0;\n            break;\n          case \"\\\\\":\n            state = 2;\n            break;\n        }\n        break;\n      case 2:\n        state = 1;\n        break;\n      case 0:\n        if (char === '\"')\n          state = 1;\n        else if (content.startsWith(CLOSE, pos))\n          return pos;\n    }\n  }\n  return null;\n}\nfunction parseTag(content, line, contentStart) {\n  try {\n    return (0, import_tag.parse)(content, { Variable, Function: Function2 });\n  } catch (error2) {\n    if (!(error2 instanceof import_tag.SyntaxError))\n      throw error2;\n    const {\n      message,\n      location: { start, end }\n    } = error2;\n    const location = {\n      start: { line, character: start.offset + contentStart },\n      end: { line: line + 1, character: end.offset + contentStart }\n    };\n    return { type: \"error\", meta: { error: { message, location } } };\n  }\n}\nfunction parseTags(content, firstLine = 0) {\n  let line = firstLine + 1;\n  const output = [];\n  let start = 0;\n  for (let pos = 0; pos < content.length; pos++) {\n    if (content[pos] === \"\\n\") {\n      line++;\n      continue;\n    }\n    if (!content.startsWith(OPEN, pos))\n      continue;\n    const end = findTagEnd(content, pos);\n    if (end == null) {\n      pos = pos + OPEN.length;\n      continue;\n    }\n    const text2 = content.slice(pos, end + CLOSE.length);\n    const inner = content.slice(pos + OPEN.length, end);\n    const lineStart = content.lastIndexOf(\"\\n\", pos);\n    const lineEnd = content.indexOf(\"\\n\", end);\n    const lineContent = content.slice(lineStart, lineEnd);\n    const tag = parseTag(inner.trim(), line, pos - lineStart);\n    const precedingTextEnd = lineContent.trim() === text2 ? lineStart : pos;\n    const precedingText = content.slice(start, precedingTextEnd);\n    output.push({\n      type: \"text\",\n      start,\n      end: pos - 1,\n      content: precedingText\n    });\n    output.push({\n      map: [line, line + 1],\n      position: {\n        start: pos - lineStart,\n        end: pos - lineStart + text2.length\n      },\n      start: pos,\n      end: pos + text2.length - 1,\n      info: text2,\n      ...tag\n    });\n    start = end + CLOSE.length;\n    pos = start - 1;\n  }\n  output.push({\n    type: \"text\",\n    start,\n    end: content.length - 1,\n    content: content.slice(start)\n  });\n  return output;\n}\n\n// src/transformer.ts\nvar globalAttributes = {\n  class: { type: Class, render: true },\n  id: { type: Id, render: true }\n};\nvar transformer_default = {\n  findSchema(node2, { nodes = {}, tags = {} } = {}) {\n    return node2.tag ? tags[node2.tag] : nodes[node2.type];\n  },\n  attributes(node2, config = {}) {\n    const schema = this.findSchema(node2, config) ?? {};\n    const output = {};\n    const attrs = { ...globalAttributes, ...schema.attributes };\n    for (const [key, attr] of Object.entries(attrs)) {\n      if (attr.render == false)\n        continue;\n      const name = typeof attr.render === \"string\" ? attr.render : key;\n      let value = node2.attributes[key];\n      if (typeof attr.type === \"function\") {\n        const instance = new attr.type();\n        if (instance.transform) {\n          value = instance.transform(value, config);\n        }\n      }\n      value = value === void 0 ? attr.default : value;\n      if (value === void 0)\n        continue;\n      output[name] = value;\n    }\n    return output;\n  },\n  children(node2, config = {}) {\n    const children = node2.children.flatMap((child) => this.node(child, config));\n    if (children.some(isPromise)) {\n      return Promise.all(children);\n    }\n    return children;\n  },\n  node(node2, config = {}) {\n    const schema = this.findSchema(node2, config) ?? {};\n    if (schema && schema.transform instanceof Function)\n      return schema.transform(node2, config);\n    const children = this.children(node2, config);\n    if (!schema || !schema.render)\n      return children;\n    const attributes = this.attributes(node2, config);\n    if (isPromise(attributes) || isPromise(children)) {\n      return Promise.all([attributes, children]).then((values) => new Tag(schema.render, ...values));\n    }\n    return new Tag(schema.render, attributes, children);\n  }\n};\n\n// src/ast/node.ts\nvar Node = class {\n  constructor(type = \"node\", attributes = {}, children = [], tag) {\n    this.$$mdtype = \"Node\";\n    this.errors = [];\n    this.lines = [];\n    this.inline = false;\n    this.attributes = attributes;\n    this.children = children;\n    this.type = type;\n    this.tag = tag;\n    this.annotations = [];\n  }\n  *walk() {\n    for (const child of this.children) {\n      yield child;\n      yield* child.walk();\n    }\n  }\n  push(node2) {\n    this.children.push(node2);\n  }\n  resolve(config = {}) {\n    return Object.assign(new Node(), this, {\n      children: this.children.map((child) => child.resolve(config)),\n      attributes: resolve(this.attributes, config)\n    });\n  }\n  findSchema(config = {}) {\n    return transformer_default.findSchema(this, config);\n  }\n  transformAttributes(config = {}) {\n    return transformer_default.attributes(this, config);\n  }\n  transformChildren(config) {\n    return transformer_default.children(this, config);\n  }\n  transform(config) {\n    return transformer_default.node(this, config);\n  }\n};\n\n// src/ast/index.ts\nvar AstTypes = {\n  Function: Function2,\n  Node,\n  Variable\n};\nfunction reviver(_, value) {\n  if (!value)\n    return value;\n  const klass = AstTypes[value.$$mdtype];\n  return klass ? Object.assign(new klass(), value) : value;\n}\nfunction fromJSON(text2) {\n  return JSON.parse(text2, reviver);\n}\nvar ast_default = {\n  ...AstTypes,\n  ...base_exports,\n  fromJSON\n};\n\n// src/formatter.ts\nvar SPACE = \" \";\nvar SEP = \", \";\nvar NL = \"\\n\";\nvar OL = \"1. \";\nvar UL = \"- \";\nvar MAX_TAG_OPENING_WIDTH = 80;\nvar WRAPPING_TYPES = [\"strong\", \"em\", \"s\"];\nvar max = (a, b) => Math.max(a, b);\nvar increment = (o, n = 2) => ({\n  ...o,\n  indent: (o.indent || 0) + n\n});\nfunction* formatChildren(a, options) {\n  for (const child of a.children) {\n    yield* formatValue(child, options);\n  }\n}\nfunction* formatInline(g) {\n  yield [...g].join(\"\").trim();\n}\nfunction* formatTableRow(items) {\n  yield `| ${items.join(\" | \")} |`;\n}\nfunction formatScalar(v) {\n  if (ast_default.isAst(v)) {\n    return format(v);\n  }\n  if (v === null) {\n    return \"null\";\n  }\n  if (Array.isArray(v)) {\n    return \"[\" + v.map(formatScalar).join(SEP) + \"]\";\n  }\n  if (typeof v === \"object\") {\n    return \"{\" + Object.entries(v).map(([key, value]) => `${isIdentifier(key) ? key : `\"${key}\"`}: ${formatScalar(value)}`).join(SEP) + \"}\";\n  }\n  return JSON.stringify(v);\n}\nfunction formatAnnotationValue(a) {\n  if (a.name === \"primary\")\n    return formatScalar(a.value);\n  if (a.name === \"id\" && typeof a.value === \"string\" && isIdentifier(a.value))\n    return \"#\" + a.value;\n  if (a.type === \"class\" && isIdentifier(a.name))\n    return \".\" + a.name;\n  return `${a.name}=${formatScalar(a.value)}`;\n}\nfunction* formatAttributes(n) {\n  for (const [key, value] of Object.entries(n.attributes)) {\n    if (key === \"class\" && typeof value === \"object\" && !ast_default.isAst(value))\n      for (const name of Object.keys(value)) {\n        yield formatAnnotationValue({ type: \"class\", name, value });\n      }\n    else\n      yield formatAnnotationValue({ type: \"attribute\", name: key, value });\n  }\n}\nfunction* formatAnnotations(n) {\n  if (n.annotations.length) {\n    yield OPEN + SPACE;\n    yield n.annotations.map(formatAnnotationValue).join(SPACE);\n    yield SPACE + CLOSE;\n  }\n}\nfunction* formatVariable(v) {\n  yield \"$\";\n  yield v.path.map((p, i) => {\n    if (i === 0)\n      return p;\n    if (isIdentifier(p))\n      return \".\" + p;\n    if (typeof p === \"number\")\n      return `[${p}]`;\n    return `[\"${p}\"]`;\n  }).join(\"\");\n}\nfunction* formatFunction(f) {\n  yield f.name;\n  yield \"(\";\n  yield Object.values(f.parameters).map(formatScalar).join(SEP);\n  yield \")\";\n}\nfunction* trimStart(g) {\n  let n;\n  do {\n    const { value, done } = g.next();\n    if (done)\n      return;\n    n = value.trimStart();\n  } while (!n.length);\n  yield n;\n  yield* g;\n}\nfunction* escapeMarkdownCharacters(s2, characters) {\n  yield s2.replace(characters, \"\\\\$&\").replace(new RegExp(\"\\xA0\", \"g\"), \"&nbsp;\");\n}\nfunction* formatNode(n, o = {}) {\n  const no = { ...o, parent: n };\n  const indent = SPACE.repeat(no.indent || 0);\n  switch (n.type) {\n    case \"document\": {\n      if (n.attributes.frontmatter && n.attributes.frontmatter.length) {\n        yield \"---\" + NL + n.attributes.frontmatter + NL + \"---\" + NL + NL;\n      }\n      yield* trimStart(formatChildren(n, no));\n      break;\n    }\n    case \"heading\": {\n      yield NL;\n      yield indent;\n      yield \"#\".repeat(n.attributes.level || 1);\n      yield SPACE;\n      yield* trimStart(formatChildren(n, no));\n      yield* formatAnnotations(n);\n      yield NL;\n      break;\n    }\n    case \"paragraph\": {\n      yield NL;\n      yield* formatChildren(n, no);\n      yield* formatAnnotations(n);\n      yield NL;\n      break;\n    }\n    case \"inline\": {\n      yield indent;\n      yield* formatChildren(n, no);\n      break;\n    }\n    case \"image\": {\n      yield \"!\";\n      yield \"[\";\n      yield* formatValue(n.attributes.alt, no);\n      yield \"]\";\n      yield \"(\";\n      yield* typeof n.attributes.src === \"string\" ? escapeMarkdownCharacters(n.attributes.src, /[()]/) : formatValue(n.attributes.src, no);\n      if (n.attributes.title) {\n        yield SPACE + `\"${n.attributes.title}\"`;\n      }\n      yield \")\";\n      break;\n    }\n    case \"link\": {\n      yield \"[\";\n      yield* formatChildren(n, no);\n      yield \"]\";\n      yield \"(\";\n      yield* typeof n.attributes.href === \"string\" ? escapeMarkdownCharacters(n.attributes.href, /[()]/g) : formatValue(n.attributes.href, no);\n      if (n.attributes.title) {\n        yield SPACE + `\"${n.attributes.title}\"`;\n      }\n      yield \")\";\n      break;\n    }\n    case \"text\": {\n      const { content } = n.attributes;\n      if (ast_default.isAst(content)) {\n        yield OPEN + SPACE;\n        yield* formatValue(content, no);\n        yield SPACE + CLOSE;\n      } else {\n        if (o.parent && WRAPPING_TYPES.includes(o.parent.type)) {\n          yield* escapeMarkdownCharacters(content, /[*_~]/g);\n        } else {\n          yield* escapeMarkdownCharacters(content, /^[*>#]/);\n        }\n      }\n      break;\n    }\n    case \"blockquote\": {\n      const prefix = \">\" + SPACE;\n      yield n.children.map((child) => format(child, no).trimStart()).map((d) => NL + indent + prefix + d).join(indent + prefix);\n      break;\n    }\n    case \"hr\": {\n      yield NL;\n      yield indent;\n      yield \"---\";\n      yield NL;\n      break;\n    }\n    case \"fence\": {\n      yield NL;\n      yield indent;\n      const innerFence = n.attributes.content.match(/`{3,}/g) || [];\n      const innerFenceLength = innerFence.map((s2) => s2.length).reduce(max, 0);\n      const boundary = \"`\".repeat(innerFenceLength ? innerFenceLength + 1 : 3);\n      yield boundary;\n      if (n.attributes.language)\n        yield n.attributes.language;\n      if (n.annotations.length)\n        yield SPACE;\n      yield* formatAnnotations(n);\n      yield NL;\n      yield indent;\n      yield n.attributes.content.split(NL).join(NL + indent);\n      yield boundary;\n      yield NL;\n      break;\n    }\n    case \"tag\": {\n      if (!n.inline) {\n        yield NL;\n        yield indent;\n      }\n      const open = OPEN + SPACE;\n      const tag = [open + n.tag, ...formatAttributes(n)];\n      const inlineTag = tag.join(SPACE);\n      const isLongTagOpening = inlineTag.length + open.length * 2 > (o.maxTagOpeningWidth || MAX_TAG_OPENING_WIDTH);\n      yield (!n.inline && isLongTagOpening ? tag.join(NL + SPACE.repeat(open.length) + indent) : inlineTag) + SPACE + (n.children.length ? \"\" : \"/\") + CLOSE;\n      if (n.children.length) {\n        yield* formatChildren(n, no.allowIndentation ? increment(no) : no);\n        if (!n.inline) {\n          yield indent;\n        }\n        yield OPEN + SPACE + \"/\" + n.tag + SPACE + CLOSE;\n      }\n      if (!n.inline) {\n        yield NL;\n      }\n      break;\n    }\n    case \"list\": {\n      const prefix = n.attributes.ordered ? OL : UL;\n      for (const child of n.children) {\n        const d = format(child, increment(no, prefix.length)).trim();\n        yield NL + indent + prefix + d;\n      }\n      yield NL;\n      break;\n    }\n    case \"item\": {\n      for (let i = 0; i < n.children.length; i++) {\n        yield* formatValue(n.children[i], no);\n        if (i === 0)\n          yield* formatAnnotations(n);\n      }\n      break;\n    }\n    case \"strong\": {\n      yield \"**\";\n      yield* formatInline(formatChildren(n, no));\n      yield \"**\";\n      break;\n    }\n    case \"em\": {\n      yield \"_\";\n      yield* formatInline(formatChildren(n, no));\n      yield \"_\";\n      break;\n    }\n    case \"code\": {\n      yield \"`\";\n      yield* formatInline(formatValue(n.attributes.content, no));\n      yield \"`\";\n      break;\n    }\n    case \"s\": {\n      yield \"~~\";\n      yield* formatInline(formatChildren(n, no));\n      yield \"~~\";\n      break;\n    }\n    case \"hardbreak\": {\n      yield \"\\\\\" + NL;\n      yield indent;\n      break;\n    }\n    case \"softbreak\": {\n      yield NL;\n      yield indent;\n      break;\n    }\n    case \"table\": {\n      const table3 = [...formatChildren(n, increment(no))];\n      if (o.parent && o.parent.type === \"tag\" && o.parent.tag === \"table\") {\n        for (let i = 0; i < table3.length; i++) {\n          const row = table3[i];\n          if (typeof row === \"string\") {\n            if (row.trim().length) {\n              yield NL;\n              yield row;\n            }\n          } else {\n            if (i !== 0) {\n              yield NL;\n              yield indent + \"---\";\n            }\n            for (const d of row) {\n              yield NL + indent + UL + d;\n            }\n          }\n        }\n        yield NL;\n      } else {\n        yield NL;\n        const [head, ...rows] = table3;\n        const ml = table3.map((arr) => arr.map((s2) => s2.length).reduce(max)).reduce(max);\n        yield* formatTableRow(head.map((h) => h + SPACE.repeat(ml - h.length)));\n        yield NL;\n        yield* formatTableRow(head.map(() => \"-\".repeat(ml)));\n        yield NL;\n        for (const row of rows) {\n          yield* formatTableRow(row.map((r) => r + SPACE.repeat(ml - r.length)));\n          yield NL;\n        }\n      }\n      break;\n    }\n    case \"thead\": {\n      const [head] = [...formatChildren(n, no)];\n      yield head || [];\n      break;\n    }\n    case \"tr\": {\n      yield [...formatChildren(n, no)];\n      break;\n    }\n    case \"td\":\n    case \"th\": {\n      yield [...formatChildren(n, no), ...formatAnnotations(n)].join(\"\").trim();\n      break;\n    }\n    case \"tbody\": {\n      yield* formatChildren(n, no);\n      break;\n    }\n    case \"comment\": {\n      yield \"<!-- \" + n.attributes.content + \" -->\\n\";\n      break;\n    }\n    case \"error\":\n    case \"node\":\n      break;\n  }\n}\nfunction* formatValue(v, o = {}) {\n  switch (typeof v) {\n    case \"undefined\":\n      break;\n    case \"boolean\":\n    case \"number\":\n    case \"string\": {\n      yield v.toString();\n      break;\n    }\n    case \"object\": {\n      if (v === null)\n        break;\n      if (Array.isArray(v)) {\n        for (const n of v)\n          yield* formatValue(n, o);\n        break;\n      }\n      switch (v.$$mdtype) {\n        case \"Function\": {\n          yield* formatFunction(v);\n          break;\n        }\n        case \"Node\":\n          yield* formatNode(v, o);\n          break;\n        case \"Variable\": {\n          yield* formatVariable(v);\n          break;\n        }\n        default:\n          throw new Error(`Unimplemented: \"${v.$$mdtype}\"`);\n      }\n      break;\n    }\n  }\n}\nfunction format(v, options) {\n  let doc = \"\";\n  for (const s2 of formatValue(v, options))\n    doc += s2;\n  return doc.trimStart();\n}\n\n// src/tags/conditional.ts\nfunction truthy(value) {\n  return value !== false && value !== void 0 && value !== null;\n}\nfunction renderConditions(node2) {\n  const conditions = [\n    { condition: node2.attributes.primary, children: [] }\n  ];\n  for (const child of node2.children) {\n    if (child.type === \"tag\" && child.tag === \"else\")\n      conditions.push({\n        condition: \"primary\" in child.attributes ? child.attributes.primary : true,\n        children: []\n      });\n    else\n      conditions[conditions.length - 1].children.push(child);\n  }\n  return conditions;\n}\nvar tagIf = {\n  attributes: {\n    primary: { type: Object, render: false }\n  },\n  transform(node2, config) {\n    const conditions = renderConditions(node2);\n    for (const { condition, children } of conditions)\n      if (truthy(condition)) {\n        const nodes = children.flatMap((child) => child.transform(config));\n        if (nodes.some(isPromise)) {\n          return Promise.all(nodes).then((nodes2) => nodes2.flat());\n        }\n        return nodes;\n      }\n    return [];\n  }\n};\nvar tagElse = {\n  selfClosing: true,\n  attributes: {\n    primary: { type: Object, render: false }\n  }\n};\n\n// src/functions/index.ts\nvar and = {\n  transform(parameters) {\n    return Object.values(parameters).every((x) => truthy(x));\n  }\n};\nvar or = {\n  transform(parameters) {\n    return Object.values(parameters).find((x) => truthy(x)) !== void 0;\n  }\n};\nvar not = {\n  parameters: {\n    0: { required: true }\n  },\n  transform(parameters) {\n    return !truthy(parameters[0]);\n  }\n};\nvar equals = {\n  transform(parameters) {\n    const values = Object.values(parameters);\n    return values.every((v) => v === values[0]);\n  }\n};\nvar debug = {\n  transform(parameters) {\n    return JSON.stringify(parameters[0], null, 2);\n  }\n};\nvar defaultFn = {\n  transform(parameters) {\n    return parameters[0] === void 0 ? parameters[1] : parameters[0];\n  }\n};\nvar functions_default = { and, or, not, equals, default: defaultFn, debug };\n\n// src/transforms/table.ts\nfunction convertToRow(node2, cellType = \"td\") {\n  node2.type = \"tr\";\n  node2.attributes = {};\n  for (const cell of node2.children)\n    cell.type = cellType;\n  return node2;\n}\nfunction transform(document2) {\n  for (const node2 of document2.walk()) {\n    if (node2.type !== \"tag\" || node2.tag !== \"table\")\n      continue;\n    const [first, ...rest] = node2.children;\n    if (!first || first.type === \"table\")\n      continue;\n    const table3 = new ast_default.Node(\"table\", node2.attributes, [\n      new ast_default.Node(\"thead\"),\n      new ast_default.Node(\"tbody\")\n    ]);\n    const [thead2, tbody2] = table3.children;\n    if (first.type === \"list\")\n      thead2.push(convertToRow(first, \"th\"));\n    for (const row of rest) {\n      if (row.type === \"list\")\n        convertToRow(row);\n      else if (row.type === \"tag\" && row.tag === \"if\") {\n        const children = [];\n        for (const child of row.children) {\n          if (child.type === \"hr\")\n            continue;\n          if (child.type === \"list\")\n            convertToRow(child);\n          children.push(child);\n        }\n        row.children = children;\n      } else\n        continue;\n      tbody2.push(row);\n    }\n    node2.children = [table3];\n  }\n}\n\n// src/transforms/index.ts\nvar transforms_default = [transform];\n\n// src/parser.ts\nvar mappings = {\n  ordered_list: \"list\",\n  bullet_list: \"list\",\n  code_inline: \"code\",\n  list_item: \"item\",\n  variable: \"text\"\n};\nfunction annotate(node2, attributes) {\n  for (const attribute of attributes) {\n    node2.annotations.push(attribute);\n    const { name, value, type } = attribute;\n    if (type === \"attribute\")\n      node2.attributes[name] = value;\n    else if (type === \"class\")\n      if (node2.attributes.class)\n        node2.attributes.class[name] = value;\n      else\n        node2.attributes.class = { [name]: value };\n  }\n}\nfunction handleAttrs(token, type) {\n  switch (type) {\n    case \"heading\":\n      return { level: Number(token.tag.replace(\"h\", \"\")) };\n    case \"list\":\n      return { ordered: token.type.startsWith(\"ordered\") };\n    case \"link\": {\n      const attrs = Object.fromEntries(token.attrs);\n      return attrs.title ? { href: attrs.href, title: attrs.title } : { href: attrs.href };\n    }\n    case \"image\": {\n      const attrs = Object.fromEntries(token.attrs);\n      return attrs.title ? { alt: token.content, src: attrs.src, title: attrs.title } : { alt: token.content, src: attrs.src };\n    }\n    case \"text\":\n    case \"code\":\n    case \"comment\":\n      return { content: (token.meta || {}).variable || token.content };\n    case \"fence\": {\n      const [language] = token.info.split(\" \", 1);\n      return language === \"\" || language === OPEN ? { content: token.content } : { content: token.content, language };\n    }\n    case \"td\":\n    case \"th\": {\n      if (token.attrs) {\n        const attrs = Object.fromEntries(token.attrs);\n        let align;\n        if (attrs.style) {\n          if (attrs.style.includes(\"left\")) {\n            align = \"left\";\n          } else if (attrs.style.includes(\"center\")) {\n            align = \"center\";\n          } else if (attrs.style.includes(\"right\")) {\n            align = \"right\";\n          }\n        }\n        if (align) {\n          return { align };\n        }\n      }\n      return {};\n    }\n    default:\n      return {};\n  }\n}\nfunction handleToken(token, nodes, file, inlineParent) {\n  if (token.type === \"frontmatter\") {\n    nodes[0].attributes.frontmatter = token.content;\n    return;\n  }\n  if (token.hidden || token.type === \"text\" && token.content === \"\")\n    return;\n  const errors = token.errors || [];\n  const parent = nodes[nodes.length - 1];\n  const { tag, attributes, error: error2 } = token.meta || {};\n  if (token.type === \"annotation\") {\n    if (inlineParent)\n      return annotate(inlineParent, attributes);\n    return parent.errors.push({\n      id: \"no-inline-annotations\",\n      level: \"error\",\n      message: `Can't apply inline annotations to '${parent.type}'`\n    });\n  }\n  let typeName = token.type.replace(/_(open|close)$/, \"\");\n  if (mappings[typeName])\n    typeName = mappings[typeName];\n  if (typeName === \"error\") {\n    const { message, location } = error2;\n    errors.push({ id: \"parse-error\", level: \"critical\", message, location });\n  }\n  if (token.nesting < 0) {\n    if (parent.type === typeName) {\n      if (parent.lines && token.map)\n        parent.lines.push(...token.map);\n      return nodes.pop();\n    }\n    errors.push({\n      id: \"missing-opening\",\n      level: \"critical\",\n      message: `Node '${typeName}' is missing opening`\n    });\n  }\n  const attrs = handleAttrs(token, typeName);\n  const node2 = new Node(typeName, attrs, void 0, tag || void 0);\n  const { position = {} } = token;\n  node2.errors = errors;\n  node2.lines = token.map || parent.lines || [];\n  node2.location = {\n    file,\n    start: {\n      line: node2.lines[0],\n      character: position.start\n    },\n    end: {\n      line: node2.lines[1],\n      character: position.end\n    }\n  };\n  if (inlineParent)\n    node2.inline = true;\n  if (attributes && [\"tag\", \"fence\", \"image\"].includes(typeName))\n    annotate(node2, attributes);\n  parent.push(node2);\n  if (token.nesting > 0)\n    nodes.push(node2);\n  if (!Array.isArray(token.children))\n    return;\n  inlineParent = parent;\n  nodes.push(node2);\n  const isLeafNode = typeName === \"image\";\n  if (!isLeafNode) {\n    for (const child of token.children)\n      handleToken(child, nodes, file, inlineParent);\n  }\n  nodes.pop();\n}\nfunction parser(tokens, file) {\n  const doc = new Node(\"document\");\n  const nodes = [doc];\n  for (const token of tokens)\n    handleToken(token, nodes, file);\n  if (nodes.length > 1)\n    for (const node2 of nodes.slice(1))\n      node2.errors.push({\n        id: \"missing-closing\",\n        level: \"critical\",\n        message: `Node '${node2.tag || node2.type}' is missing closing`\n      });\n  for (const transform3 of transforms_default)\n    transform3(doc);\n  return doc;\n}\n\n// src/schema.ts\nvar schema_exports = {};\n__export(schema_exports, {\n  blockquote: () => blockquote,\n  code: () => code,\n  comment: () => comment,\n  document: () => document,\n  em: () => em,\n  error: () => error,\n  fence: () => fence,\n  hardbreak: () => hardbreak,\n  heading: () => heading,\n  hr: () => hr,\n  image: () => image,\n  inline: () => inline,\n  item: () => item,\n  link: () => link,\n  list: () => list,\n  node: () => node,\n  paragraph: () => paragraph,\n  s: () => s,\n  softbreak: () => softbreak,\n  strong: () => strong,\n  table: () => table,\n  tbody: () => tbody,\n  td: () => td,\n  text: () => text,\n  th: () => th,\n  thead: () => thead,\n  tr: () => tr\n});\nvar document = {\n  render: \"article\",\n  children: [\n    \"heading\",\n    \"paragraph\",\n    \"image\",\n    \"table\",\n    \"tag\",\n    \"fence\",\n    \"blockquote\",\n    \"comment\",\n    \"list\",\n    \"hr\"\n  ],\n  attributes: {\n    frontmatter: { render: false }\n  }\n};\nvar heading = {\n  children: [\"inline\"],\n  attributes: {\n    level: { type: Number, render: false, required: true }\n  },\n  transform(node2, config) {\n    return new Tag(`h${node2.attributes[\"level\"]}`, node2.transformAttributes(config), node2.transformChildren(config));\n  }\n};\nvar paragraph = {\n  render: \"p\",\n  children: [\"inline\"]\n};\nvar image = {\n  render: \"img\",\n  attributes: {\n    src: { type: String, required: true },\n    alt: { type: String },\n    title: { type: String }\n  }\n};\nvar fence = {\n  render: \"pre\",\n  attributes: {\n    content: { type: String, render: false, required: true },\n    language: { type: String, render: \"data-language\" },\n    process: { type: Boolean, render: false, default: true }\n  },\n  transform(node2, config) {\n    const attributes = node2.transformAttributes(config);\n    const children = node2.children.length ? node2.transformChildren(config) : [node2.attributes.content];\n    return new Tag(\"pre\", attributes, children);\n  }\n};\nvar blockquote = {\n  render: \"blockquote\",\n  children: [\n    \"heading\",\n    \"paragraph\",\n    \"image\",\n    \"table\",\n    \"tag\",\n    \"fence\",\n    \"blockquote\",\n    \"list\",\n    \"hr\"\n  ]\n};\nvar item = {\n  render: \"li\",\n  children: [\n    \"inline\",\n    \"heading\",\n    \"paragraph\",\n    \"image\",\n    \"table\",\n    \"tag\",\n    \"fence\",\n    \"blockquote\",\n    \"list\",\n    \"hr\"\n  ]\n};\nvar list = {\n  children: [\"item\"],\n  attributes: {\n    ordered: { type: Boolean, render: false, required: true }\n  },\n  transform(node2, config) {\n    return new Tag(node2.attributes.ordered ? \"ol\" : \"ul\", node2.transformAttributes(config), node2.transformChildren(config));\n  }\n};\nvar hr = {\n  render: \"hr\"\n};\nvar table = {\n  render: \"table\"\n};\nvar td = {\n  render: \"td\",\n  children: [\n    \"inline\",\n    \"heading\",\n    \"paragraph\",\n    \"image\",\n    \"table\",\n    \"tag\",\n    \"fence\",\n    \"blockquote\",\n    \"list\",\n    \"hr\"\n  ],\n  attributes: {\n    colspan: { type: Number },\n    rowspan: { type: Number },\n    align: { type: String }\n  }\n};\nvar th = {\n  render: \"th\",\n  attributes: {\n    width: { type: Number },\n    align: { type: String }\n  }\n};\nvar tr = {\n  render: \"tr\",\n  children: [\"th\", \"td\"]\n};\nvar tbody = {\n  render: \"tbody\",\n  children: [\"tr\", \"tag\"]\n};\nvar thead = {\n  render: \"thead\",\n  children: [\"tr\"]\n};\nvar strong = {\n  render: \"strong\",\n  children: [\"em\", \"s\", \"link\", \"code\", \"text\", \"tag\"]\n};\nvar em = {\n  render: \"em\",\n  children: [\"strong\", \"s\", \"link\", \"code\", \"text\", \"tag\"]\n};\nvar s = {\n  render: \"s\",\n  children: [\"strong\", \"em\", \"link\", \"code\", \"text\", \"tag\"]\n};\nvar inline = {\n  children: [\n    \"strong\",\n    \"em\",\n    \"s\",\n    \"code\",\n    \"text\",\n    \"tag\",\n    \"link\",\n    \"image\",\n    \"hardbreak\",\n    \"softbreak\",\n    \"comment\"\n  ]\n};\nvar link = {\n  render: \"a\",\n  children: [\"strong\", \"em\", \"s\", \"code\", \"text\", \"tag\"],\n  attributes: {\n    href: { type: String, required: true },\n    title: { type: String }\n  }\n};\nvar code = {\n  render: \"code\",\n  attributes: {\n    content: { type: String, render: false, required: true }\n  },\n  transform(node2, config) {\n    const attributes = node2.transformAttributes(config);\n    return new Tag(\"code\", attributes, [node2.attributes.content]);\n  }\n};\nvar text = {\n  attributes: {\n    content: { type: String, required: true }\n  },\n  transform(node2) {\n    return node2.attributes.content;\n  }\n};\nvar hardbreak = {\n  render: \"br\"\n};\nvar softbreak = {\n  transform() {\n    return \" \";\n  }\n};\nvar comment = {\n  attributes: {\n    content: { type: String, required: true }\n  }\n};\nvar error = {};\nvar node = {};\n\n// src/renderers/html.ts\nvar import_markdown_it = __toModule(require_markdown_it());\nvar { escapeHtml } = (0, import_markdown_it.default)().utils;\nvar voidElements = new Set([\n  \"area\",\n  \"base\",\n  \"br\",\n  \"col\",\n  \"embed\",\n  \"hr\",\n  \"img\",\n  \"input\",\n  \"link\",\n  \"meta\",\n  \"param\",\n  \"source\",\n  \"track\",\n  \"wbr\"\n]);\nfunction render(node2) {\n  if (typeof node2 === \"string\" || typeof node2 === \"number\")\n    return escapeHtml(String(node2));\n  if (Array.isArray(node2))\n    return node2.map(render).join(\"\");\n  if (node2 === null || typeof node2 !== \"object\" || !Tag.isTag(node2))\n    return \"\";\n  const { name, attributes, children = [] } = node2;\n  if (!name)\n    return render(children);\n  let output = `<${name}`;\n  for (const [k, v] of Object.entries(attributes ?? {}))\n    output += ` ${k}=\"${escapeHtml(String(v))}\"`;\n  output += \">\";\n  if (voidElements.has(name))\n    return output;\n  if (children.length)\n    output += render(children);\n  output += `</${name}>`;\n  return output;\n}\n\n// src/renderers/react/react.ts\nfunction tagName(name, components) {\n  return typeof name !== \"string\" ? name : name[0] !== name[0].toUpperCase() ? name : components instanceof Function ? components(name) : components[name];\n}\nfunction dynamic(node2, React, { components = {} } = {}) {\n  function deepRender2(value) {\n    if (value == null || typeof value !== \"object\")\n      return value;\n    if (Array.isArray(value))\n      return value.map((item2) => deepRender2(item2));\n    if (value.$$mdtype === \"Tag\")\n      return render3(value);\n    if (typeof value !== \"object\")\n      return value;\n    const output = {};\n    for (const [k, v] of Object.entries(value))\n      output[k] = deepRender2(v);\n    return output;\n  }\n  function render3(node3) {\n    if (Array.isArray(node3))\n      return React.createElement(React.Fragment, null, ...node3.map(render3));\n    if (node3 === null || typeof node3 !== \"object\" || !Tag.isTag(node3))\n      return node3;\n    const {\n      name,\n      attributes: { class: className, ...attrs } = {},\n      children = []\n    } = node3;\n    if (className)\n      attrs.className = className;\n    return React.createElement(tagName(name, components), Object.keys(attrs).length == 0 ? null : deepRender2(attrs), ...children.map(render3));\n  }\n  return render3(node2);\n}\n\n// src/renderers/react/static.ts\nfunction tagName2(name, components) {\n  return typeof name !== \"string\" ? \"Fragment\" : name[0] !== name[0].toUpperCase() ? name : components instanceof Function ? components(name) : components[name];\n}\nfunction renderArray(children) {\n  return children.map(render2).join(\", \");\n}\nfunction deepRender(value) {\n  if (value == null || typeof value !== \"object\")\n    return JSON.stringify(value);\n  if (Array.isArray(value))\n    return `[${value.map((item2) => deepRender(item2)).join(\", \")}]`;\n  if (value.$$mdtype === \"Tag\")\n    return render2(value);\n  if (typeof value !== \"object\")\n    return JSON.stringify(value);\n  const object = Object.entries(value).map(([k, v]) => [JSON.stringify(k), deepRender(v)].join(\": \")).join(\", \");\n  return `{${object}}`;\n}\nfunction render2(node2) {\n  if (Array.isArray(node2))\n    return `React.createElement(React.Fragment, null, ${renderArray(node2)})`;\n  if (node2 === null || typeof node2 !== \"object\" || !Tag.isTag(node2))\n    return JSON.stringify(node2);\n  const {\n    name,\n    attributes: { class: className, ...attrs } = {},\n    children = []\n  } = node2;\n  if (className)\n    attrs.className = className;\n  return `React.createElement(\n    tagName(${JSON.stringify(name)}, components),\n    ${Object.keys(attrs).length == 0 ? \"null\" : deepRender(attrs)},\n    ${renderArray(children)})`;\n}\nfunction reactStatic(node2) {\n  return `\n  (({components = {}} = {}) => {\n    ${tagName2}\n    return ${render2(node2)};\n  })\n`;\n}\n\n// src/renderers/index.ts\nvar renderers_default = { html: render, react: dynamic, reactStatic };\n\n// src/tags/partial.ts\nvar PartialFile = class {\n  validate(file, config) {\n    const { partials = {} } = config;\n    const partial2 = partials[file];\n    if (!partial2)\n      return [\n        {\n          id: \"attribute-value-invalid\",\n          level: \"error\",\n          message: `Partial \\`${file}\\` not found. The 'file' attribute must be set in \\`config.partials\\``\n        }\n      ];\n    return [];\n  }\n};\nvar partial = {\n  inline: false,\n  selfClosing: true,\n  attributes: {\n    file: { type: PartialFile, render: false, required: true },\n    variables: { type: Object, render: false }\n  },\n  transform(node2, config) {\n    const { partials = {} } = config;\n    const { file, variables } = node2.attributes;\n    const partial2 = partials[file];\n    if (!partial2)\n      return null;\n    const scopedConfig = {\n      ...config,\n      variables: {\n        ...config.variables,\n        ...variables,\n        [\"$$partial:filename\"]: file\n      }\n    };\n    const transformChildren = (part) => part.resolve(scopedConfig).transformChildren(scopedConfig);\n    return Array.isArray(partial2) ? partial2.flatMap(transformChildren) : transformChildren(partial2);\n  }\n};\n\n// src/tags/table.ts\nvar table2 = {\n  children: [\"table\"],\n  inline: false\n};\n\n// src/tags/index.ts\nvar tags_default = {\n  if: tagIf,\n  else: tagElse,\n  partial,\n  table: table2\n};\n\n// src/tokenizer/index.ts\nvar import_lib = __toModule(require_lib());\n\n// src/tokenizer/plugins/annotations.ts\nvar import_tag7 = __toModule(require_tag());\nfunction createToken(state, content, contentStart) {\n  try {\n    const { type, meta, nesting = 0 } = (0, import_tag7.parse)(content, { Variable, Function: Function2 });\n    const token = state.push(type, \"\", nesting);\n    token.info = content;\n    token.meta = meta;\n    if (!state.delimiters) {\n      state.delimiters = [];\n    }\n    return token;\n  } catch (error2) {\n    if (!(error2 instanceof import_tag7.SyntaxError))\n      throw error2;\n    const {\n      message,\n      location: { start, end }\n    } = error2;\n    const location = contentStart ? {\n      start: { offset: start.offset + contentStart },\n      end: { offset: end.offset + contentStart }\n    } : null;\n    const token = state.push(\"error\", \"\", 0);\n    token.meta = { error: { message, location } };\n    return token;\n  }\n}\nfunction block(state, startLine, endLine, silent) {\n  const start = state.bMarks[startLine] + state.tShift[startLine];\n  const finish = state.eMarks[startLine];\n  if (!state.src.startsWith(OPEN, start))\n    return false;\n  const tagEnd = findTagEnd(state.src, start);\n  const lastPossible = state.src.slice(0, finish).trim().length;\n  if (!tagEnd || tagEnd < lastPossible - CLOSE.length)\n    return false;\n  const contentStart = start + OPEN.length;\n  const content = state.src.slice(contentStart, tagEnd).trim();\n  const lines = content.split(\"\\n\").length;\n  if (content[0] === \"$\")\n    return false;\n  if (silent)\n    return true;\n  const token = createToken(state, content, contentStart);\n  token.map = [startLine, startLine + lines];\n  state.line += lines;\n  return true;\n}\nfunction inline2(state, silent) {\n  if (!state.src.startsWith(OPEN, state.pos))\n    return false;\n  const tagEnd = findTagEnd(state.src, state.pos);\n  if (!tagEnd)\n    return false;\n  const content = state.src.slice(state.pos + OPEN.length, tagEnd);\n  if (!silent)\n    createToken(state, content.trim());\n  state.pos = tagEnd + CLOSE.length;\n  return true;\n}\nfunction core(state) {\n  let token;\n  for (token of state.tokens) {\n    if (token.type !== \"fence\")\n      continue;\n    if (token.info.includes(OPEN)) {\n      const start = token.info.indexOf(OPEN);\n      const end = findTagEnd(token.info, start);\n      const content = token.info.slice(start + OPEN.length, end);\n      try {\n        const { meta } = (0, import_tag7.parse)(content.trim(), { Variable, Function: Function2 });\n        token.meta = meta;\n      } catch (error2) {\n        if (!(error2 instanceof import_tag7.SyntaxError))\n          throw error2;\n        if (!token.errors)\n          token.errors = [];\n        token.errors.push({\n          id: \"fence-tag-error\",\n          level: \"error\",\n          message: `Syntax error in fence tag: ${error2.message}`\n        });\n      }\n    }\n    if (token?.meta?.attributes?.find((attr) => attr.name === \"process\" && !attr.value))\n      continue;\n    token.children = parseTags(token.content, token.map[0]);\n  }\n}\nfunction plugin(md) {\n  md.block.ruler.before(\"paragraph\", \"annotations\", block, {\n    alt: [\"paragraph\", \"blockquote\"]\n  });\n  md.inline.ruler.push(\"containers\", inline2);\n  md.core.ruler.push(\"annotations\", core);\n}\n\n// src/tokenizer/plugins/frontmatter.ts\nvar fence2 = \"---\";\nfunction getLine(state, n) {\n  return state.src.slice(state.bMarks[n], state.eMarks[n]).trim();\n}\nfunction findClose(state, endLine) {\n  for (let line = 1; line < endLine; line++)\n    if (getLine(state, line) === fence2)\n      return line;\n}\nfunction block2(state, startLine, endLine, silent) {\n  if (startLine != 0 || getLine(state, 0) != fence2)\n    return false;\n  const close = findClose(state, endLine);\n  if (!close)\n    return false;\n  if (silent)\n    return true;\n  const token = state.push(\"frontmatter\", \"\", 0);\n  token.content = state.src.slice(state.eMarks[0], state.bMarks[close]).trim();\n  token.map = [0, close];\n  token.hidden = true;\n  state.line = close + 1;\n  return true;\n}\nfunction plugin2(md) {\n  md.block.ruler.before(\"hr\", \"frontmatter\", block2);\n}\n\n// src/tokenizer/plugins/comments.ts\nvar OPEN2 = \"<!--\";\nvar CLOSE2 = \"-->\";\nfunction block3(state, startLine, endLine, silent) {\n  const start = state.bMarks[startLine] + state.tShift[startLine];\n  if (!state.src.startsWith(OPEN2, start))\n    return false;\n  const close = state.src.indexOf(CLOSE2, start);\n  if (!close)\n    return false;\n  if (silent)\n    return true;\n  const content = state.src.slice(start + OPEN2.length, close);\n  const lines = content.split(\"\\n\").length;\n  const token = state.push(\"comment\", \"\", 0);\n  token.content = content.trim();\n  token.map = [startLine, startLine + lines];\n  state.line += lines;\n  return true;\n}\nfunction inline3(state, silent) {\n  if (!state.src.startsWith(OPEN2, state.pos))\n    return false;\n  const close = state.src.indexOf(CLOSE2, state.pos);\n  if (!close)\n    return false;\n  if (silent)\n    return true;\n  const content = state.src.slice(state.pos + OPEN2.length, close);\n  const token = state.push(\"comment\", \"\", 0);\n  token.content = content.trim();\n  state.pos = close + CLOSE2.length;\n  return true;\n}\nfunction plugin3(md) {\n  md.block.ruler.before(\"table\", \"comment\", block3, { alt: [\"paragraph\"] });\n  md.inline.ruler.push(\"comment\", inline3);\n}\n\n// src/tokenizer/index.ts\nvar Tokenizer = class {\n  constructor(config = {}) {\n    this.parser = new import_lib.default(config);\n    this.parser.use(plugin, \"annotations\", {});\n    this.parser.use(plugin2, \"frontmatter\", {});\n    this.parser.disable([\n      \"lheading\",\n      \"code\"\n    ]);\n    if (config.allowComments)\n      this.parser.use(plugin3, \"comments\", {});\n  }\n  tokenize(content) {\n    return this.parser.parse(content.toString(), {});\n  }\n};\n\n// src/validator.ts\nvar TypeMappings = {\n  String,\n  Number,\n  Array,\n  Object,\n  Boolean\n};\nfunction validateType(type, value, config) {\n  if (!type)\n    return true;\n  if (ast_default.isFunction(value) && config.validation?.validateFunctions) {\n    const schema = config.functions?.[value.name];\n    return !schema?.returns ? true : Array.isArray(schema.returns) ? schema.returns.find((t) => t === type) !== void 0 : schema.returns === type;\n  }\n  if (ast_default.isAst(value))\n    return true;\n  if (Array.isArray(type))\n    return type.some((t) => validateType(t, value, config));\n  if (typeof type === \"string\")\n    type = TypeMappings[type];\n  if (typeof type === \"function\") {\n    const instance = new type();\n    if (instance.validate) {\n      return instance.validate(value, config);\n    }\n  }\n  return value != null && value.constructor === type;\n}\nfunction typeToString(type) {\n  if (typeof type === \"string\")\n    return type;\n  if (Array.isArray(type))\n    return type.map(typeToString).join(\" | \");\n  return type.name;\n}\nfunction validateFunction(fn, config) {\n  const schema = config.functions?.[fn.name];\n  const errors = [];\n  if (!schema)\n    return [\n      {\n        id: \"function-undefined\",\n        level: \"critical\",\n        message: `Undefined function: '${fn.name}'`\n      }\n    ];\n  if (schema.validate)\n    errors.push(...schema.validate(fn, config));\n  if (schema.parameters) {\n    for (const [key, value] of Object.entries(fn.parameters)) {\n      const param = schema.parameters?.[key];\n      if (!param) {\n        errors.push({\n          id: \"parameter-undefined\",\n          level: \"error\",\n          message: `Invalid parameter: '${key}'`\n        });\n        continue;\n      }\n      if (ast_default.isAst(value) && !ast_default.isFunction(value))\n        continue;\n      if (param.type) {\n        const valid = validateType(param.type, value, config);\n        if (valid === false) {\n          errors.push({\n            id: \"parameter-type-invalid\",\n            level: \"error\",\n            message: `Parameter '${key}' of '${fn.name}' must be type of '${typeToString(param.type)}'`\n          });\n        } else if (Array.isArray(valid)) {\n          errors.push(...valid);\n        }\n      }\n    }\n  }\n  for (const [key, { required }] of Object.entries(schema.parameters ?? {}))\n    if (required && fn.parameters[key] === void 0)\n      errors.push({\n        id: \"parameter-missing-required\",\n        level: \"error\",\n        message: `Missing required parameter: '${key}'`\n      });\n  return errors;\n}\nfunction validator(node2, config) {\n  const schema = node2.findSchema(config);\n  const errors = [...node2.errors || []];\n  if (!schema) {\n    errors.push({\n      id: node2.tag ? \"tag-undefined\" : \"node-undefined\",\n      level: \"critical\",\n      message: node2.tag ? `Undefined tag: '${node2.tag}'` : `Undefined node: '${node2.type}'`\n    });\n    return errors;\n  }\n  if (schema.inline != void 0 && node2.inline !== schema.inline)\n    errors.push({\n      id: \"tag-placement-invalid\",\n      level: \"critical\",\n      message: `'${node2.tag}' tag should be ${schema.inline ? \"inline\" : \"block\"}`\n    });\n  if (schema.selfClosing && node2.children.length > 0)\n    errors.push({\n      id: \"tag-selfclosing-has-children\",\n      level: \"critical\",\n      message: `'${node2.tag}' tag should be self-closing`\n    });\n  const attributes = {\n    ...globalAttributes,\n    ...schema.attributes\n  };\n  for (let [key, value] of Object.entries(node2.attributes)) {\n    const attrib = attributes[key];\n    if (!attrib) {\n      errors.push({\n        id: \"attribute-undefined\",\n        level: \"error\",\n        message: `Invalid attribute: '${key}'`\n      });\n      continue;\n    }\n    let { type, matches, errorLevel } = attrib;\n    if (ast_default.isAst(value)) {\n      if (ast_default.isFunction(value) && config.validation?.validateFunctions)\n        errors.push(...validateFunction(value, config));\n      else if (ast_default.isVariable(value) && config.variables) {\n        let missing = false;\n        let variables = config.variables;\n        for (const key2 of value.path) {\n          if (!Object.prototype.hasOwnProperty.call(variables, key2)) {\n            missing = true;\n            break;\n          }\n          variables = variables[key2];\n        }\n        if (missing) {\n          errors.push({\n            id: \"variable-undefined\",\n            level: \"error\",\n            message: `Undefined variable: '${value.path.join(\".\")}'`\n          });\n        }\n      } else\n        continue;\n    }\n    value = value;\n    if (type) {\n      const valid = validateType(type, value, config);\n      if (valid === false) {\n        errors.push({\n          id: \"attribute-type-invalid\",\n          level: errorLevel || \"error\",\n          message: `Attribute '${key}' must be type of '${typeToString(type)}'`\n        });\n      }\n      if (Array.isArray(valid)) {\n        errors.push(...valid);\n      }\n    }\n    if (typeof matches === \"function\")\n      matches = matches(config);\n    if (Array.isArray(matches) && !matches.includes(value))\n      errors.push({\n        id: \"attribute-value-invalid\",\n        level: errorLevel || \"error\",\n        message: `Attribute '${key}' must match one of ${JSON.stringify(matches)}. Got '${value}' instead.`\n      });\n    if (matches instanceof RegExp && !matches.test(value))\n      errors.push({\n        id: \"attribute-value-invalid\",\n        level: errorLevel || \"error\",\n        message: `Attribute '${key}' must match ${matches}. Got '${value}' instead.`\n      });\n  }\n  for (const [key, { required }] of Object.entries(attributes))\n    if (required && node2.attributes[key] === void 0)\n      errors.push({\n        id: \"attribute-missing-required\",\n        level: \"error\",\n        message: `Missing required attribute: '${key}'`\n      });\n  for (const { type } of node2.children) {\n    if (schema.children && type !== \"error\" && !schema.children.includes(type))\n      errors.push({\n        id: \"child-invalid\",\n        level: \"warning\",\n        message: `Can't nest '${type}' in '${node2.tag || node2.type}'`\n      });\n  }\n  if (schema.validate) {\n    const schemaErrors = schema.validate(node2, config);\n    if (isPromise(schemaErrors)) {\n      return schemaErrors.then((e) => errors.concat(e));\n    }\n    errors.push(...schemaErrors);\n  }\n  return errors;\n}\n\n// index.ts\nvar tokenizer = new Tokenizer();\nfunction mergeConfig(config = {}) {\n  return {\n    ...config,\n    tags: {\n      ...tags_default,\n      ...config.tags\n    },\n    nodes: {\n      ...schema_exports,\n      ...config.nodes\n    },\n    functions: {\n      ...functions_default,\n      ...config.functions\n    }\n  };\n}\nfunction parse3(content, file) {\n  if (typeof content === \"string\")\n    content = tokenizer.tokenize(content);\n  return parser(content, file);\n}\nfunction resolve2(content, config) {\n  if (Array.isArray(content))\n    return content.flatMap((child) => child.resolve(config));\n  return content.resolve(config);\n}\nfunction transform2(nodes, options) {\n  const config = mergeConfig(options);\n  const content = resolve2(nodes, config);\n  if (Array.isArray(content))\n    return content.flatMap((child) => child.transform(config));\n  return content.transform(config);\n}\nfunction validate(content, options) {\n  const config = mergeConfig(options);\n  const output = [content, ...content.walk()].map((node2) => {\n    const { type, lines, location } = node2;\n    const errors = validator(node2, config);\n    if (isPromise(errors)) {\n      return errors.then((e) => e.map((error2) => ({ type, lines, location, error: error2 })));\n    }\n    return errors.map((error2) => ({ type, lines, location, error: error2 }));\n  });\n  if (output.some(isPromise)) {\n    return Promise.all(output).then((o) => o.flat());\n  }\n  return output.flat();\n}\nfunction createElement(name, attributes = {}, ...children) {\n  return { name, attributes, children };\n}\nvar Markdoc = class {\n  constructor(config) {\n    this.parse = parse3;\n    this.resolve = (content) => resolve2(content, this.config);\n    this.transform = (content) => transform2(content, this.config);\n    this.validate = (content) => validate(content, this.config);\n    this.config = config;\n  }\n};\nMarkdoc.nodes = schema_exports;\nMarkdoc.tags = tags_default;\nMarkdoc.functions = functions_default;\nMarkdoc.globalAttributes = globalAttributes;\nMarkdoc.renderers = renderers_default;\nMarkdoc.transforms = transforms_default;\nMarkdoc.Ast = ast_default;\nMarkdoc.Tag = Tag;\nMarkdoc.Tokenizer = Tokenizer;\nMarkdoc.parseTags = parseTags;\nMarkdoc.transformer = transformer_default;\nMarkdoc.validator = validator;\nMarkdoc.parse = parse3;\nMarkdoc.transform = transform2;\nMarkdoc.validate = validate;\nMarkdoc.createElement = createElement;\nMarkdoc.truthy = truthy;\nMarkdoc.format = format;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@markdoc/markdoc/dist/index.mjs\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["pages/_app","main"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=%2FUsers%2Filyukinaanna%2FDocuments%2Flove-or-leave%2Fpages%2Findex.md&page=%2F!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);